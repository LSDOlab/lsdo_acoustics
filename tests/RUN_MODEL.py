

# RUN_MODEL

# system evaluation block

# op _0009_power_combination_eval
# LANG: system_representation_geometry --> design_geometry
# SHAPES: (32500, 3) --> (32500, 3)
# full namespace: system_representation.system_configurations_model
v05_design_geometry = (v04_system_representation_geometry**1)
v05_design_geometry = (v05_design_geometry*_0009_coeff).reshape((32500, 3))

# op _000A_sparsematmat_eval
# LANG: design_geometry --> _000B
# SHAPES: (32500, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v017__000B = _000A_sparsematmat_eval_mat@v05_design_geometry

# op _000E_sparsematmat_eval
# LANG: design_geometry --> _000F
# SHAPES: (32500, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v019__000F = _000E_sparsematmat_eval_mat@v05_design_geometry

# op _000g_sparsematmat_eval
# LANG: design_geometry --> _000h
# SHAPES: (32500, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v07__000h = _000g_sparsematmat_eval_mat@v05_design_geometry

# op _000k_sparsematmat_eval
# LANG: design_geometry --> _000l
# SHAPES: (32500, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v09__000l = _000k_sparsematmat_eval_mat@v05_design_geometry

# op _000C reshape_eval
# LANG: _000B --> rotor_2_disk_in_plane_1
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v018_rotor_2_disk_in_plane_1 = v017__000B.reshape((1, 3))

# op _000G reshape_eval
# LANG: _000F --> rotor_2_disk_in_plane_2
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v020_rotor_2_disk_in_plane_2 = v019__000F.reshape((1, 3))

# op _000i reshape_eval
# LANG: _000h --> rotor_1_disk_in_plane_1
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v08_rotor_1_disk_in_plane_1 = v07__000h.reshape((1, 3))

# op _000m reshape_eval
# LANG: _000l --> rotor_1_disk_in_plane_2
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v010_rotor_1_disk_in_plane_2 = v09__000l.reshape((1, 3))

# op _01d6_power_combination_eval
# LANG: cruise_pitch_angle --> theta
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02092_theta = (v02061_cruise_pitch_angle**1)
v02092_theta = (v02092_theta*_01d6_coeff).reshape((1,))

# op _01e8 cross_product_eval
# LANG: rotor_2_disk_in_plane_1, rotor_2_disk_in_plane_2 --> _01e9
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((3,))
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((3,))
v02174__01e9 = np.cross(v020_rotor_2_disk_in_plane_2, v018_rotor_2_disk_in_plane_1, axisa = 0, axisb = 0, axisc = 0)
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((1, 3))
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((1, 3))

# op _01tb cross_product_eval
# LANG: rotor_1_disk_in_plane_1, rotor_1_disk_in_plane_2 --> _01tc
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((3,))
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((3,))
v02547__01tc = np.cross(v010_rotor_1_disk_in_plane_2, v08_rotor_1_disk_in_plane_1, axisa = 0, axisb = 0, axisc = 0)
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((1, 3))
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((1, 3))

# op _01dB_sin_eval
# LANG: theta --> _01dC
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02160__01dC = np.sin(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01dF_cos_eval
# LANG: theta --> _01dG
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02162__01dG = np.cos(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01dr_sin_eval
# LANG: theta --> _01ds
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02155__01ds = np.sin(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01dv_linear_combination_eval
# LANG: theta --> _01dw
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02157__01dw = _01dv_constant+1*v02092_theta
v02092_theta = v02092_theta.reshape((1,))

# op _01dx_linear_combination_eval
# LANG: theta --> _01dy
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02159__01dy = _01dx_constant+1*v02092_theta
v02092_theta = v02092_theta.reshape((1,))

# op _01ea pnorm_eval
# LANG: _01e9 --> _01eb
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02176__01eb = np.linalg.norm(v02174__01e9.flatten(), ord=2)

# op _01sA_linear_combination_eval
# LANG: theta --> _01sB
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02532__01sB = _01sA_constant+1*v02092_theta
v02092_theta = v02092_theta.reshape((1,))

# op _01sE_sin_eval
# LANG: theta --> _01sF
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02533__01sF = np.sin(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01sI_cos_eval
# LANG: theta --> _01sJ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02535__01sJ = np.cos(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01su_sin_eval
# LANG: theta --> _01sv
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02528__01sv = np.sin(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01sy_linear_combination_eval
# LANG: theta --> _01sz
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02530__01sz = _01sy_constant+1*v02092_theta
v02092_theta = v02092_theta.reshape((1,))

# op _01td pnorm_eval
# LANG: _01tc --> _01te
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02549__01te = np.linalg.norm(v02547__01tc.flatten(), ord=2)

# op _01aE_power_combination_eval
# LANG: cruise_altitude --> _01aF
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02127__01aF = (v02096_cruise_altitude**6)
v02127__01aF = (v02127__01aF*_01aE_coeff).reshape((1,))

# op _01aR_power_combination_eval
# LANG: cruise_altitude --> _01aS
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02130__01aS = (v02096_cruise_altitude**5)
v02130__01aS = (v02130__01aS*_01aR_coeff).reshape((1,))

# op _01b2_power_combination_eval
# LANG: cruise_altitude --> _01b3
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02132__01b3 = (v02096_cruise_altitude**4)
v02132__01b3 = (v02132__01b3*_01b2_coeff).reshape((1,))

# op _01bC_power_combination_eval
# LANG: cruise_altitude --> _01bD
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02138__01bD = (v02096_cruise_altitude**1)
v02138__01bD = (v02138__01bD*_01bC_coeff).reshape((1,))

# op _01bO_power_combination_eval
# LANG: cruise_altitude --> _01bP
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02140__01bP = (v02096_cruise_altitude**0)
v02140__01bP = (v02140__01bP*_01bO_coeff).reshape((1,))

# op _01be_power_combination_eval
# LANG: cruise_altitude --> _01bf
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02134__01bf = (v02096_cruise_altitude**3)
v02134__01bf = (v02134__01bf*_01be_coeff).reshape((1,))

# op _01bq_power_combination_eval
# LANG: cruise_altitude --> _01br
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02136__01br = (v02096_cruise_altitude**2)
v02136__01br = (v02136__01br*_01bq_coeff).reshape((1,))

# op _01dD_power_combination_eval
# LANG: _01dC --> _01dE
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02161__01dE = (v02160__01dC**1)
v02161__01dE = (v02161__01dE*_01dD_coeff).reshape((1, 1))

# op _01dH_power_combination_eval
# LANG: _01dG --> _01dI
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02163__01dI = (v02162__01dG**1)
v02163__01dI = (v02163__01dI*_01dH_coeff).reshape((1, 1))

# op _01do_cos_eval
# LANG: theta --> _01dp
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02153__01dp = np.cos(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01dt_power_combination_eval
# LANG: _01ds --> _01du
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02156__01du = (v02155__01ds**1)
v02156__01du = (v02156__01du*_01dt_coeff).reshape((1, 1))

# op _01dz_power_combination_eval
# LANG: _01dw, _01dy --> _01dA
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02158__01dA = (v02157__01dw**1)*(v02159__01dy**-1)
v02158__01dA = (v02158__01dA*_01dz_coeff).reshape((1, 1))

# op _01ec expand_scalar_eval
# LANG: _01eb --> _01ed
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02177__01ed = np.empty((3,))
v02177__01ed.fill(v02176__01eb.item())

# op _01sC_power_combination_eval
# LANG: _01sz, _01sB --> _01sD
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02531__01sD = (v02530__01sz**1)*(v02532__01sB**-1)
v02531__01sD = (v02531__01sD*_01sC_coeff).reshape((1, 1))

# op _01sG_power_combination_eval
# LANG: _01sF --> _01sH
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02534__01sH = (v02533__01sF**1)
v02534__01sH = (v02534__01sH*_01sG_coeff).reshape((1, 1))

# op _01sK_power_combination_eval
# LANG: _01sJ --> _01sL
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02536__01sL = (v02535__01sJ**1)
v02536__01sL = (v02536__01sL*_01sK_coeff).reshape((1, 1))

# op _01sr_cos_eval
# LANG: theta --> _01ss
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02092_theta = v02092_theta.reshape((1, 1))
v02526__01ss = np.cos(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01sw_power_combination_eval
# LANG: _01sv --> _01sx
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02529__01sx = (v02528__01sv**1)
v02529__01sx = (v02529__01sx*_01sw_coeff).reshape((1, 1))

# op _01tf expand_scalar_eval
# LANG: _01te --> _01tg
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02550__01tg = np.empty((3,))
v02550__01tg.fill(v02549__01te.item())

# op _002O_decompose_eval
# LANG: hover_observer_location --> _002P, _002Q, _002R
# SHAPES: (3,) --> (1,), (1,), (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v030__002P = ((v028_hover_observer_location.flatten())[src_indices__002P__002O]).reshape((1,))
v031__002Q = ((v028_hover_observer_location.flatten())[src_indices__002Q__002O]).reshape((1,))
v032__002R = ((v028_hover_observer_location.flatten())[src_indices__002R__002O]).reshape((1,))

# op _01aG_power_combination_eval
# LANG: _01aF --> _01aH
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02128__01aH = (v02127__01aF**1)
v02128__01aH = (v02128__01aH*_01aG_coeff).reshape((1,))

# op _01aT_power_combination_eval
# LANG: _01aS --> _01aU
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02131__01aU = (v02130__01aS**1)
v02131__01aU = (v02131__01aU*_01aT_coeff).reshape((1,))

# op _01b4_power_combination_eval
# LANG: _01b3 --> _01b5
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02133__01b5 = (v02132__01b3**1)
v02133__01b5 = (v02133__01b5*_01b4_coeff).reshape((1,))

# op _01bE_power_combination_eval
# LANG: _01bD --> _01bF
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02139__01bF = (v02138__01bD**1)
v02139__01bF = (v02139__01bF*_01bE_coeff).reshape((1,))

# op _01bQ_power_combination_eval
# LANG: _01bP --> _01bR
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02141__01bR = (v02140__01bP**1)
v02141__01bR = (v02141__01bR*_01bQ_coeff).reshape((1,))

# op _01bg_power_combination_eval
# LANG: _01bf --> _01bh
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02135__01bh = (v02134__01bf**1)
v02135__01bh = (v02135__01bh*_01bg_coeff).reshape((1,))

# op _01bs_power_combination_eval
# LANG: _01br --> _01bt
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02137__01bt = (v02136__01br**1)
v02137__01bt = (v02137__01bt*_01bs_coeff).reshape((1,))

# op _01dq_indexed_passthrough_eval
# LANG: _01dp, _01du, _01dA, _01dE, _01dI --> rotation_matrix
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02154_rotation_matrix__temp[i_v02153__01dp__01dq_indexed_passthrough_eval] = v02153__01dp.flatten()
v02154_rotation_matrix = v02154_rotation_matrix__temp.copy()
v02154_rotation_matrix__temp[i_v02156__01du__01dq_indexed_passthrough_eval] = v02156__01du.flatten()
v02154_rotation_matrix = v02154_rotation_matrix__temp.copy()
v02154_rotation_matrix__temp[i_v02158__01dA__01dq_indexed_passthrough_eval] = v02158__01dA.flatten()
v02154_rotation_matrix = v02154_rotation_matrix__temp.copy()
v02154_rotation_matrix__temp[i_v02161__01dE__01dq_indexed_passthrough_eval] = v02161__01dE.flatten()
v02154_rotation_matrix = v02154_rotation_matrix__temp.copy()
v02154_rotation_matrix__temp[i_v02163__01dI__01dq_indexed_passthrough_eval] = v02163__01dI.flatten()
v02154_rotation_matrix = v02154_rotation_matrix__temp.copy()

# op _01ee_power_combination_eval
# LANG: _01e9, _01ed --> _01ef
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02175__01ef = (v02174__01e9**1)*(v02177__01ed**-1)
v02175__01ef = (v02175__01ef*_01ee_coeff).reshape((3,))

# op _01st_indexed_passthrough_eval
# LANG: _01ss, _01sx, _01sD, _01sH, _01sL --> rotation_matrix
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02527_rotation_matrix__temp[i_v02526__01ss__01st_indexed_passthrough_eval] = v02526__01ss.flatten()
v02527_rotation_matrix = v02527_rotation_matrix__temp.copy()
v02527_rotation_matrix__temp[i_v02529__01sx__01st_indexed_passthrough_eval] = v02529__01sx.flatten()
v02527_rotation_matrix = v02527_rotation_matrix__temp.copy()
v02527_rotation_matrix__temp[i_v02531__01sD__01st_indexed_passthrough_eval] = v02531__01sD.flatten()
v02527_rotation_matrix = v02527_rotation_matrix__temp.copy()
v02527_rotation_matrix__temp[i_v02534__01sH__01st_indexed_passthrough_eval] = v02534__01sH.flatten()
v02527_rotation_matrix = v02527_rotation_matrix__temp.copy()
v02527_rotation_matrix__temp[i_v02536__01sL__01st_indexed_passthrough_eval] = v02536__01sL.flatten()
v02527_rotation_matrix = v02527_rotation_matrix__temp.copy()

# op _01th_power_combination_eval
# LANG: _01tc, _01tg --> _01ti
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02548__01ti = (v02547__01tc**1)*(v02550__01tg**-1)
v02548__01ti = (v02548__01ti*_01th_coeff).reshape((3,))

# op _0039_power_combination_eval
# LANG: _002P --> theta
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v042_theta = (v030__002P**1)
v042_theta = (v042_theta*_0039_coeff).reshape((1,))

# op _004b cross_product_eval
# LANG: rotor_2_disk_in_plane_1, rotor_2_disk_in_plane_2 --> _004c
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((3,))
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((3,))
v0124__004c = np.cross(v020_rotor_2_disk_in_plane_2, v018_rotor_2_disk_in_plane_1, axisa = 0, axisb = 0, axisc = 0)
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((1, 3))
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((1, 3))

# op _00je cross_product_eval
# LANG: rotor_1_disk_in_plane_1, rotor_1_disk_in_plane_2 --> _00jf
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((3,))
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((3,))
v0497__00jf = np.cross(v010_rotor_1_disk_in_plane_2, v08_rotor_1_disk_in_plane_1, axisa = 0, axisb = 0, axisc = 0)
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((1, 3))
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((1, 3))

# op _01aI_indexed_passthrough_eval
# LANG: _01aH, _01aU, _01b5, _01bh, _01bt, _01bF, _01bR --> temp_temperature
# SHAPES: (1,), (1,), (1,), (1,), (1,), (1,), (1,) --> (7,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02129_temp_temperature__temp[i_v02128__01aH__01aI_indexed_passthrough_eval] = v02128__01aH.flatten()
v02129_temp_temperature = v02129_temp_temperature__temp.copy()
v02129_temp_temperature__temp[i_v02131__01aU__01aI_indexed_passthrough_eval] = v02131__01aU.flatten()
v02129_temp_temperature = v02129_temp_temperature__temp.copy()
v02129_temp_temperature__temp[i_v02133__01b5__01aI_indexed_passthrough_eval] = v02133__01b5.flatten()
v02129_temp_temperature = v02129_temp_temperature__temp.copy()
v02129_temp_temperature__temp[i_v02135__01bh__01aI_indexed_passthrough_eval] = v02135__01bh.flatten()
v02129_temp_temperature = v02129_temp_temperature__temp.copy()
v02129_temp_temperature__temp[i_v02137__01bt__01aI_indexed_passthrough_eval] = v02137__01bt.flatten()
v02129_temp_temperature = v02129_temp_temperature__temp.copy()
v02129_temp_temperature__temp[i_v02139__01bF__01aI_indexed_passthrough_eval] = v02139__01bF.flatten()
v02129_temp_temperature = v02129_temp_temperature__temp.copy()
v02129_temp_temperature__temp[i_v02141__01bR__01aI_indexed_passthrough_eval] = v02141__01bR.flatten()
v02129_temp_temperature = v02129_temp_temperature__temp.copy()

# op _01eg_matvec_eval
# LANG: rotation_matrix, _01ef --> _01eh
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02173__01eh = v02154_rotation_matrix@v02175__01ef

# op _01tj_matvec_eval
# LANG: rotation_matrix, _01ti --> _01tk
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02546__01tk = v02527_rotation_matrix@v02548__01ti

# op _003A_linear_combination_eval
# LANG: theta --> _003B
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0109__003B = _003A_constant+1*v042_theta
v042_theta = v042_theta.reshape((1,))

# op _003E_sin_eval
# LANG: theta --> _003F
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0110__003F = np.sin(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _003I_cos_eval
# LANG: theta --> _003J
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0112__003J = np.cos(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _003u_sin_eval
# LANG: theta --> _003v
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0105__003v = np.sin(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _003y_linear_combination_eval
# LANG: theta --> _003z
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0107__003z = _003y_constant+1*v042_theta
v042_theta = v042_theta.reshape((1,))

# op _004d pnorm_eval
# LANG: _004c --> _004e
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0126__004e = np.linalg.norm(v0124__004c.flatten(), ord=2)

# op _00iB_linear_combination_eval
# LANG: theta --> _00iC
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0480__00iC = _00iB_constant+1*v042_theta
v042_theta = v042_theta.reshape((1,))

# op _00iD_linear_combination_eval
# LANG: theta --> _00iE
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0482__00iE = _00iD_constant+1*v042_theta
v042_theta = v042_theta.reshape((1,))

# op _00iH_sin_eval
# LANG: theta --> _00iI
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0483__00iI = np.sin(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00iL_cos_eval
# LANG: theta --> _00iM
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0485__00iM = np.cos(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00ix_sin_eval
# LANG: theta --> _00iy
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0478__00iy = np.sin(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00jg pnorm_eval
# LANG: _00jf --> _00jh
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0499__00jh = np.linalg.norm(v0497__00jf.flatten(), ord=2)

# op _01bW single_tensor_sum_no_axis_eval
# LANG: temp_temperature --> cruise_temperature
# SHAPES: (7,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02142_cruise_temperature = np.sum(v02129_temp_temperature).reshape((1,))

# op _01cl_decompose_eval
# LANG: cruise_observer_location --> _01cm, _01cZ, _01c_
# SHAPES: (3,) --> (1,), (1,), (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02069__01cm = ((v02062_cruise_observer_location.flatten())[src_indices__01cm__01cl]).reshape((1,))
v02070__01cZ = ((v02062_cruise_observer_location.flatten())[src_indices__01cZ__01cl]).reshape((1,))
v02071__01c_ = ((v02062_cruise_observer_location.flatten())[src_indices__01c___01cl]).reshape((1,))

# op _01ei expand_array_eval
# LANG: _01eh --> thrust_vector
# SHAPES: (3,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02178_thrust_vector = np.einsum('b,a->ab', v02173__01eh.reshape((3,)) ,np.ones((1,))).reshape((1, 3))

# op _01tl expand_array_eval
# LANG: _01tk --> thrust_vector
# SHAPES: (3,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02551_thrust_vector = np.einsum('b,a->ab', v02546__01tk.reshape((3,)) ,np.ones((1,))).reshape((1, 3))

# op _003C_power_combination_eval
# LANG: _003z, _003B --> _003D
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0108__003D = (v0107__003z**1)*(v0109__003B**-1)
v0108__003D = (v0108__003D*_003C_coeff).reshape((1, 1))

# op _003G_power_combination_eval
# LANG: _003F --> _003H
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0111__003H = (v0110__003F**1)
v0111__003H = (v0111__003H*_003G_coeff).reshape((1, 1))

# op _003K_power_combination_eval
# LANG: _003J --> _003L
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0113__003L = (v0112__003J**1)
v0113__003L = (v0113__003L*_003K_coeff).reshape((1, 1))

# op _003r_cos_eval
# LANG: theta --> _003s
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0103__003s = np.cos(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _003w_power_combination_eval
# LANG: _003v --> _003x
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0106__003x = (v0105__003v**1)
v0106__003x = (v0106__003x*_003w_coeff).reshape((1, 1))

# op _004f expand_scalar_eval
# LANG: _004e --> _004g
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0127__004g = np.empty((3,))
v0127__004g.fill(v0126__004e.item())

# op _00iF_power_combination_eval
# LANG: _00iC, _00iE --> _00iG
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0481__00iG = (v0480__00iC**1)*(v0482__00iE**-1)
v0481__00iG = (v0481__00iG*_00iF_coeff).reshape((1, 1))

# op _00iJ_power_combination_eval
# LANG: _00iI --> _00iK
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0484__00iK = (v0483__00iI**1)
v0484__00iK = (v0484__00iK*_00iJ_coeff).reshape((1, 1))

# op _00iN_power_combination_eval
# LANG: _00iM --> _00iO
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0486__00iO = (v0485__00iM**1)
v0486__00iO = (v0486__00iO*_00iN_coeff).reshape((1, 1))

# op _00iu_cos_eval
# LANG: theta --> _00iv
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v042_theta = v042_theta.reshape((1, 1))
v0476__00iv = np.cos(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00iz_power_combination_eval
# LANG: _00iy --> _00iA
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0479__00iA = (v0478__00iy**1)
v0479__00iA = (v0479__00iA*_00iz_coeff).reshape((1, 1))

# op _00ji expand_scalar_eval
# LANG: _00jh --> _00jj
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0500__00jj = np.empty((3,))
v0500__00jj.fill(v0499__00jh.item())

# op _01c9_power_combination_eval
# LANG: cruise_temperature --> _01ca
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02151__01ca = (v02142_cruise_temperature**1)
v02151__01ca = (v02151__01ca*_01c9_coeff).reshape((1,))

# op _01cp_power_combination_eval
# LANG: _01cm --> _01cq
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02072__01cq = (v02069__01cm**1)
v02072__01cq = (v02072__01cq*_01cp_coeff).reshape((1,))

# op _01fV_decompose_eval
# LANG: thrust_vector --> _01fW
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02223__01fW = ((v02178_thrust_vector.flatten())[src_indices__01fW__01fV]).reshape((1, 3))

# op _01uY_decompose_eval
# LANG: thrust_vector --> _01uZ
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02596__01uZ = ((v02551_thrust_vector.flatten())[src_indices__01uZ__01uY]).reshape((1, 3))

# op _003t_indexed_passthrough_eval
# LANG: _003s, _003x, _003D, _003H, _003L --> rotation_matrix
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0104_rotation_matrix__temp[i_v0103__003s__003t_indexed_passthrough_eval] = v0103__003s.flatten()
v0104_rotation_matrix = v0104_rotation_matrix__temp.copy()
v0104_rotation_matrix__temp[i_v0106__003x__003t_indexed_passthrough_eval] = v0106__003x.flatten()
v0104_rotation_matrix = v0104_rotation_matrix__temp.copy()
v0104_rotation_matrix__temp[i_v0108__003D__003t_indexed_passthrough_eval] = v0108__003D.flatten()
v0104_rotation_matrix = v0104_rotation_matrix__temp.copy()
v0104_rotation_matrix__temp[i_v0111__003H__003t_indexed_passthrough_eval] = v0111__003H.flatten()
v0104_rotation_matrix = v0104_rotation_matrix__temp.copy()
v0104_rotation_matrix__temp[i_v0113__003L__003t_indexed_passthrough_eval] = v0113__003L.flatten()
v0104_rotation_matrix = v0104_rotation_matrix__temp.copy()

# op _004h_power_combination_eval
# LANG: _004c, _004g --> _004i
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0125__004i = (v0124__004c**1)*(v0127__004g**-1)
v0125__004i = (v0125__004i*_004h_coeff).reshape((3,))

# op _00iw_indexed_passthrough_eval
# LANG: _00iv, _00iA, _00iG, _00iK, _00iO --> rotation_matrix
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0477_rotation_matrix__temp[i_v0476__00iv__00iw_indexed_passthrough_eval] = v0476__00iv.flatten()
v0477_rotation_matrix = v0477_rotation_matrix__temp.copy()
v0477_rotation_matrix__temp[i_v0479__00iA__00iw_indexed_passthrough_eval] = v0479__00iA.flatten()
v0477_rotation_matrix = v0477_rotation_matrix__temp.copy()
v0477_rotation_matrix__temp[i_v0481__00iG__00iw_indexed_passthrough_eval] = v0481__00iG.flatten()
v0477_rotation_matrix = v0477_rotation_matrix__temp.copy()
v0477_rotation_matrix__temp[i_v0484__00iK__00iw_indexed_passthrough_eval] = v0484__00iK.flatten()
v0477_rotation_matrix = v0477_rotation_matrix__temp.copy()
v0477_rotation_matrix__temp[i_v0486__00iO__00iw_indexed_passthrough_eval] = v0486__00iO.flatten()
v0477_rotation_matrix = v0477_rotation_matrix__temp.copy()

# op _00jk_power_combination_eval
# LANG: _00jf, _00jj --> _00jl
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0498__00jl = (v0497__00jf**1)*(v0500__00jj**-1)
v0498__00jl = (v0498__00jl*_00jk_coeff).reshape((3,))

# op _01cb_power_combination_eval
# LANG: _01ca --> cruise_speed_of_sound
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02152_cruise_speed_of_sound = (v02151__01ca**0.5)
v02152_cruise_speed_of_sound = (v02152_cruise_speed_of_sound*_01cb_coeff).reshape((1,))

# op _01cr_power_combination_eval
# LANG: _01cm --> _01cs
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02075__01cs = (v02069__01cm**1)
v02075__01cs = (v02075__01cs*_01cr_coeff).reshape((1,))

# op _01ct_power_combination_eval
# LANG: _01cm --> _01cu
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02077__01cu = (v02069__01cm**1)
v02077__01cu = (v02077__01cu*_01ct_coeff).reshape((1,))

# op _01cv_linear_combination_eval
# LANG: cruise_pitch_angle, _01cq --> _01cw
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02068__01cw = _01cv_constant+1*v02061_cruise_pitch_angle+-1*v02072__01cq

# op _01fZ_tensor_dot_product_eval
# LANG: projection_vector, _01fW --> _01f_
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02230__01f_ = np.sum(v02212_projection_vector * v02223__01fW, axis=1)

# op _01v1_tensor_dot_product_eval
# LANG: projection_vector, _01uZ --> _01v2
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02603__01v2 = np.sum(v02585_projection_vector * v02596__01uZ, axis=1)

# op _004j_matvec_eval
# LANG: rotation_matrix, _004i --> _004k
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0123__004k = v0104_rotation_matrix@v0125__004i

# op _00jm_matvec_eval
# LANG: rotation_matrix, _00jl --> _00jn
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0496__00jn = v0477_rotation_matrix@v0498__00jl

# op _01ch_power_combination_eval
# LANG: cruise_mach_number, cruise_speed_of_sound --> cruise_speed
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02066_cruise_speed = (v02152_cruise_speed_of_sound**1)*(v02064_cruise_mach_number**1)
v02066_cruise_speed = (v02066_cruise_speed*_01ch_coeff).reshape((1,))

# op _01cx_linear_combination_eval
# LANG: _01cs, _01cu --> _01cy
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02076__01cy = _01cx_constant+1*v02075__01cs+1*v02077__01cu

# op _01cz_cos_eval
# LANG: _01cw --> _01cA
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02073__01cA = np.cos(v02068__01cw)

# op _01g0 expand_scalar_eval
# LANG: _01f_ --> _01g1
# SHAPES: (1,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02231__01g1 = np.empty((1, 3))
v02231__01g1.fill(v02230__01f_.item())

# op _01v3 expand_scalar_eval
# LANG: _01v2 --> _01v4
# SHAPES: (1,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02604__01v4 = np.empty((1, 3))
v02604__01v4.fill(v02603__01v2.item())

# op _004l expand_array_eval
# LANG: _004k --> thrust_vector
# SHAPES: (3,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0128_thrust_vector = np.einsum('b,a->ab', v0123__004k.reshape((3,)) ,np.ones((1,))).reshape((1, 3))

# op _00jo expand_array_eval
# LANG: _00jn --> thrust_vector
# SHAPES: (3,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0501_thrust_vector = np.einsum('b,a->ab', v0496__00jn.reshape((3,)) ,np.ones((1,))).reshape((1, 3))

# op _01cB_power_combination_eval
# LANG: cruise_speed, _01cA --> _01cC
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02067__01cC = (v02066_cruise_speed**1)*(v02073__01cA**1)
v02067__01cC = (v02067__01cC*_01cB_coeff).reshape((1,))

# op _01cD_cos_eval
# LANG: _01cy --> _01cE
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02078__01cE = np.cos(v02076__01cy)

# op _01cL_sin_eval
# LANG: _01cw --> _01cM
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02082__01cM = np.sin(v02068__01cw)

# op _01g2_power_combination_eval
# LANG: _01fW, _01g1 --> _01g3
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02232__01g3 = (v02231__01g1**1)*(v02223__01fW**1)
v02232__01g3 = (v02232__01g3*_01g2_coeff).reshape((1, 3))

# op _01v5_power_combination_eval
# LANG: _01uZ, _01v4 --> _01v6
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02605__01v6 = (v02604__01v4**1)*(v02596__01uZ**1)
v02605__01v6 = (v02605__01v6*_01v5_coeff).reshape((1, 3))

# op _005Y_decompose_eval
# LANG: thrust_vector --> _005Z
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0173__005Z = ((v0128_thrust_vector.flatten())[src_indices__005Z__005Y]).reshape((1, 3))

# op _00l0_decompose_eval
# LANG: thrust_vector --> _00l1
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0546__00l1 = ((v0501_thrust_vector.flatten())[src_indices__00l1__00l0]).reshape((1, 3))

# op _01cF_power_combination_eval
# LANG: _01cC, _01cE --> u
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02074_u = (v02067__01cC**1)*(v02078__01cE**1)
v02074_u = (v02074_u*_01cF_coeff).reshape((1,))

# op _01cH_sin_eval
# LANG: _01cy --> _01cI
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02080__01cI = np.sin(v02076__01cy)

# op _01cN_power_combination_eval
# LANG: cruise_speed, _01cM --> _01cO
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02081__01cO = (v02066_cruise_speed**1)*(v02082__01cM**1)
v02081__01cO = (v02081__01cO*_01cN_coeff).reshape((1,))

# op _01cP_cos_eval
# LANG: _01cy --> _01cQ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02084__01cQ = np.cos(v02076__01cy)

# op _01g4_linear_combination_eval
# LANG: projection_vector, _01g3 --> _01g5
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02229__01g5 = _01g4_constant+1*v02212_projection_vector+-1*v02232__01g3

# op _01v7_linear_combination_eval
# LANG: projection_vector, _01v6 --> _01v8
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02602__01v8 = _01v7_constant+1*v02585_projection_vector+-1*v02605__01v6

# op _0061_tensor_dot_product_eval
# LANG: projection_vector, _005Z --> _0062
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0180__0062 = np.sum(v0162_projection_vector * v0173__005Z, axis=1)

# op _00l4_tensor_dot_product_eval
# LANG: projection_vector, _00l1 --> _00l5
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0553__00l5 = np.sum(v0535_projection_vector * v0546__00l1, axis=1)

# op _01cJ_power_combination_eval
# LANG: cruise_speed, _01cI --> v
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02079_v = (v02066_cruise_speed**1)*(v02080__01cI**1)
v02079_v = (v02079_v*_01cJ_coeff).reshape((1,))

# op _01cR_power_combination_eval
# LANG: _01cO, _01cQ --> w
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02083_w = (v02081__01cO**1)*(v02084__01cQ**1)
v02083_w = (v02083_w*_01cR_coeff).reshape((1,))

# op _01fw_power_combination_eval
# LANG: u --> _01fx
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02074_u = v02074_u.reshape((1, 1))
v02213__01fx = (v02074_u**1)
v02213__01fx = (v02213__01fx*_01fw_coeff).reshape((1, 1))
v02074_u = v02074_u.reshape((1,))

# op _01g6 pnorm_eval
# LANG: _01g5 --> _01g7
# SHAPES: (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02234__01g7 = np.linalg.norm(v02229__01g5.flatten(), ord=2)

# op _01uz_power_combination_eval
# LANG: u --> _01uA
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02074_u = v02074_u.reshape((1, 1))
v02586__01uA = (v02074_u**1)
v02586__01uA = (v02586__01uA*_01uz_coeff).reshape((1, 1))
v02074_u = v02074_u.reshape((1,))

# op _01v9 pnorm_eval
# LANG: _01v8 --> _01va
# SHAPES: (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02607__01va = np.linalg.norm(v02602__01v8.flatten(), ord=2)

# op _0063 expand_scalar_eval
# LANG: _0062 --> _0064
# SHAPES: (1,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0181__0064 = np.empty((1, 3))
v0181__0064.fill(v0180__0062.item())

# op _00l6 expand_scalar_eval
# LANG: _00l5 --> _00l7
# SHAPES: (1,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0554__00l7 = np.empty((1, 3))
v0554__00l7.fill(v0553__00l5.item())

# op _01g8 expand_scalar_eval
# LANG: _01g7 --> _01g9
# SHAPES: (1,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02235__01g9 = np.empty((1, 3))
v02235__01g9.fill(v02234__01g7.item())

# op _01gj_decompose_eval
# LANG: _01fx --> _01gk
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02214__01gk = ((v02213__01fx.flatten())[src_indices__01gk__01gj]).reshape((1, 1))

# op _01gm_decompose_eval
# LANG: v --> _01gn
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02079_v = v02079_v.reshape((1, 1))
v02216__01gn = ((v02079_v.flatten())[src_indices__01gn__01gm]).reshape((1, 1))
v02079_v = v02079_v.reshape((1,))

# op _01go_decompose_eval
# LANG: w --> _01gp
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02083_w = v02083_w.reshape((1, 1))
v02217__01gp = ((v02083_w.flatten())[src_indices__01gp__01go]).reshape((1, 1))
v02083_w = v02083_w.reshape((1,))

# op _01vb expand_scalar_eval
# LANG: _01va --> _01vc
# SHAPES: (1,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02608__01vc = np.empty((1, 3))
v02608__01vc.fill(v02607__01va.item())

# op _01vm_decompose_eval
# LANG: _01uA --> _01vn
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02587__01vn = ((v02586__01uA.flatten())[src_indices__01vn__01vm]).reshape((1, 1))

# op _01vp_decompose_eval
# LANG: v --> _01vq
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02079_v = v02079_v.reshape((1, 1))
v02589__01vq = ((v02079_v.flatten())[src_indices__01vq__01vp]).reshape((1, 1))
v02079_v = v02079_v.reshape((1,))

# op _01vr_decompose_eval
# LANG: w --> _01vs
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02083_w = v02083_w.reshape((1, 1))
v02590__01vs = ((v02083_w.flatten())[src_indices__01vs__01vr]).reshape((1, 1))
v02083_w = v02083_w.reshape((1,))

# op _0065_power_combination_eval
# LANG: _005Z, _0064 --> _0066
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0182__0066 = (v0181__0064**1)*(v0173__005Z**1)
v0182__0066 = (v0182__0066*_0065_coeff).reshape((1, 3))

# op _00l8_power_combination_eval
# LANG: _00l1, _00l7 --> _00l9
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0555__00l9 = (v0554__00l7**1)*(v0546__00l1**1)
v0555__00l9 = (v0555__00l9*_00l8_coeff).reshape((1, 3))

# op _01ga_power_combination_eval
# LANG: _01g5, _01g9 --> in_plane_ey
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02233_in_plane_ey = (v02229__01g5**1)*(v02235__01g9**-1)
v02233_in_plane_ey = (v02233_in_plane_ey*_01ga_coeff).reshape((1, 3))

# op _01gl_indexed_passthrough_eval
# LANG: _01gk, _01gn, _01gp --> velocity_vector
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02215_velocity_vector__temp[i_v02214__01gk__01gl_indexed_passthrough_eval] = v02214__01gk.flatten()
v02215_velocity_vector = v02215_velocity_vector__temp.copy()
v02215_velocity_vector__temp[i_v02216__01gn__01gl_indexed_passthrough_eval] = v02216__01gn.flatten()
v02215_velocity_vector = v02215_velocity_vector__temp.copy()
v02215_velocity_vector__temp[i_v02217__01gp__01gl_indexed_passthrough_eval] = v02217__01gp.flatten()
v02215_velocity_vector = v02215_velocity_vector__temp.copy()

# op _01vd_power_combination_eval
# LANG: _01v8, _01vc --> in_plane_ey
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02606_in_plane_ey = (v02602__01v8**1)*(v02608__01vc**-1)
v02606_in_plane_ey = (v02606_in_plane_ey*_01vd_coeff).reshape((1, 3))

# op _01vo_indexed_passthrough_eval
# LANG: _01vn, _01vq, _01vs --> velocity_vector
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02588_velocity_vector__temp[i_v02587__01vn__01vo_indexed_passthrough_eval] = v02587__01vn.flatten()
v02588_velocity_vector = v02588_velocity_vector__temp.copy()
v02588_velocity_vector__temp[i_v02589__01vq__01vo_indexed_passthrough_eval] = v02589__01vq.flatten()
v02588_velocity_vector = v02588_velocity_vector__temp.copy()
v02588_velocity_vector__temp[i_v02590__01vs__01vo_indexed_passthrough_eval] = v02590__01vs.flatten()
v02588_velocity_vector = v02588_velocity_vector__temp.copy()

# op _002S_power_combination_eval
# LANG: _002P --> u
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v033_u = (v030__002P**1)
v033_u = (v033_u*_002S_coeff).reshape((1,))

# op _0067_linear_combination_eval
# LANG: projection_vector, _0066 --> _0068
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0179__0068 = _0067_constant+1*v0162_projection_vector+-1*v0182__0066

# op _00la_linear_combination_eval
# LANG: projection_vector, _00l9 --> _00lb
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0552__00lb = _00la_constant+1*v0535_projection_vector+-1*v0555__00l9

# op _01gc cross_product_eval
# LANG: _01fW, in_plane_ey --> in_plane_ex
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02228_in_plane_ex = np.cross(v02223__01fW, v02233_in_plane_ey, axisa = 1, axisb = 1, axisc = 1)

# op _01gq_decompose_eval
# LANG: velocity_vector --> _01gr
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02221__01gr = ((v02215_velocity_vector.flatten())[src_indices__01gr__01gq]).reshape((1, 3))

# op _01vf cross_product_eval
# LANG: _01uZ, in_plane_ey --> in_plane_ex
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02601_in_plane_ex = np.cross(v02596__01uZ, v02606_in_plane_ey, axisa = 1, axisb = 1, axisc = 1)

# op _01vt_decompose_eval
# LANG: velocity_vector --> _01vu
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02594__01vu = ((v02588_velocity_vector.flatten())[src_indices__01vu__01vt]).reshape((1, 3))

# op _002U_power_combination_eval
# LANG: _002P --> v
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v034_v = (v030__002P**1)
v034_v = (v034_v*_002U_coeff).reshape((1,))

# op _002W_power_combination_eval
# LANG: _002P --> w
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v035_w = (v030__002P**1)
v035_w = (v035_w*_002W_coeff).reshape((1,))

# op _005z_power_combination_eval
# LANG: u --> _005A
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v033_u = v033_u.reshape((1, 1))
v0163__005A = (v033_u**1)
v0163__005A = (v0163__005A*_005z_coeff).reshape((1, 1))
v033_u = v033_u.reshape((1,))

# op _0069 pnorm_eval
# LANG: _0068 --> _006a
# SHAPES: (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0184__006a = np.linalg.norm(v0179__0068.flatten(), ord=2)

# op _00kC_power_combination_eval
# LANG: u --> _00kD
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v033_u = v033_u.reshape((1, 1))
v0536__00kD = (v033_u**1)
v0536__00kD = (v0536__00kD*_00kC_coeff).reshape((1, 1))
v033_u = v033_u.reshape((1,))

# op _00lc pnorm_eval
# LANG: _00lb --> _00ld
# SHAPES: (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0557__00ld = np.linalg.norm(v0552__00lb.flatten(), ord=2)

# op _01fX_power_combination_eval
# LANG: _01fW --> _01fY
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02224__01fY = (v02223__01fW**1)
v02224__01fY = (v02224__01fY*_01fX_coeff).reshape((1, 3))

# op _01gs_tensor_dot_product_eval
# LANG: _01gr, in_plane_ex --> _01gt
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02227__01gt = np.sum(v02221__01gr * v02228_in_plane_ex, axis=1)

# op _01u__power_combination_eval
# LANG: _01uZ --> _01v0
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02597__01v0 = (v02596__01uZ**1)
v02597__01v0 = (v02597__01v0*_01u__coeff).reshape((1, 3))

# op _01vv_tensor_dot_product_eval
# LANG: _01vu, in_plane_ex --> _01vw
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02600__01vw = np.sum(v02594__01vu * v02601_in_plane_ex, axis=1)

# op _006b expand_scalar_eval
# LANG: _006a --> _006c
# SHAPES: (1,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0185__006c = np.empty((1, 3))
v0185__006c.fill(v0184__006a.item())

# op _006m_decompose_eval
# LANG: _005A --> _006n
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0164__006n = ((v0163__005A.flatten())[src_indices__006n__006m]).reshape((1, 1))

# op _006p_decompose_eval
# LANG: v --> _006q
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v034_v = v034_v.reshape((1, 1))
v0166__006q = ((v034_v.flatten())[src_indices__006q__006p]).reshape((1, 1))
v034_v = v034_v.reshape((1,))

# op _006r_decompose_eval
# LANG: w --> _006s
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v035_w = v035_w.reshape((1, 1))
v0167__006s = ((v035_w.flatten())[src_indices__006s__006r]).reshape((1, 1))
v035_w = v035_w.reshape((1,))

# op _00le expand_scalar_eval
# LANG: _00ld --> _00lf
# SHAPES: (1,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0558__00lf = np.empty((1, 3))
v0558__00lf.fill(v0557__00ld.item())

# op _00lp_decompose_eval
# LANG: _00kD --> _00lq
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0537__00lq = ((v0536__00kD.flatten())[src_indices__00lq__00lp]).reshape((1, 1))

# op _00ls_decompose_eval
# LANG: v --> _00lt
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v034_v = v034_v.reshape((1, 1))
v0539__00lt = ((v034_v.flatten())[src_indices__00lt__00ls]).reshape((1, 1))
v034_v = v034_v.reshape((1,))

# op _00lu_decompose_eval
# LANG: w --> _00lv
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v035_w = v035_w.reshape((1, 1))
v0540__00lv = ((v035_w.flatten())[src_indices__00lv__00lu]).reshape((1, 1))
v035_w = v035_w.reshape((1,))

# op _01e4 pnorm_eval
# LANG: rotor_2_disk_in_plane_1 --> _01e5
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((3,))
v02171__01e5 = np.linalg.norm(v018_rotor_2_disk_in_plane_1.flatten(), ord=2)
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((1, 3))

# op _01gB_linear_combination_eval
# LANG: _01gt --> _01gC
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02236__01gC = _01gB_constant+-1*v02227__01gt

# op _01gu_tensor_dot_product_eval
# LANG: _01gr, in_plane_ey --> _01gv
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02238__01gv = np.sum(v02221__01gr * v02233_in_plane_ey, axis=1)

# op _01gw_tensor_dot_product_eval
# LANG: _01gr, _01fY --> _01gx
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02222__01gx = np.sum(v02221__01gr * v02224__01fY, axis=1)

# op _01t7 pnorm_eval
# LANG: rotor_1_disk_in_plane_1 --> _01t8
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((3,))
v02544__01t8 = np.linalg.norm(v08_rotor_1_disk_in_plane_1.flatten(), ord=2)
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((1, 3))

# op _01vE_linear_combination_eval
# LANG: _01vw --> _01vF
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02609__01vF = _01vE_constant+-1*v02600__01vw

# op _01vx_tensor_dot_product_eval
# LANG: _01vu, in_plane_ey --> _01vy
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02611__01vy = np.sum(v02594__01vu * v02606_in_plane_ey, axis=1)

# op _01vz_tensor_dot_product_eval
# LANG: _01vu, _01v0 --> _01vA
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02595__01vA = np.sum(v02594__01vu * v02597__01v0, axis=1)

# op _006d_power_combination_eval
# LANG: _0068, _006c --> in_plane_ey
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0183_in_plane_ey = (v0179__0068**1)*(v0185__006c**-1)
v0183_in_plane_ey = (v0183_in_plane_ey*_006d_coeff).reshape((1, 3))

# op _006o_indexed_passthrough_eval
# LANG: _006n, _006q, _006s --> velocity_vector
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0165_velocity_vector__temp[i_v0164__006n__006o_indexed_passthrough_eval] = v0164__006n.flatten()
v0165_velocity_vector = v0165_velocity_vector__temp.copy()
v0165_velocity_vector__temp[i_v0166__006q__006o_indexed_passthrough_eval] = v0166__006q.flatten()
v0165_velocity_vector = v0165_velocity_vector__temp.copy()
v0165_velocity_vector__temp[i_v0167__006s__006o_indexed_passthrough_eval] = v0167__006s.flatten()
v0165_velocity_vector = v0165_velocity_vector__temp.copy()

# op _00lg_power_combination_eval
# LANG: _00lb, _00lf --> in_plane_ey
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0556_in_plane_ey = (v0552__00lb**1)*(v0558__00lf**-1)
v0556_in_plane_ey = (v0556_in_plane_ey*_00lg_coeff).reshape((1, 3))

# op _00lr_indexed_passthrough_eval
# LANG: _00lq, _00lt, _00lv --> velocity_vector
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0538_velocity_vector__temp[i_v0537__00lq__00lr_indexed_passthrough_eval] = v0537__00lq.flatten()
v0538_velocity_vector = v0538_velocity_vector__temp.copy()
v0538_velocity_vector__temp[i_v0539__00lt__00lr_indexed_passthrough_eval] = v0539__00lt.flatten()
v0538_velocity_vector = v0538_velocity_vector__temp.copy()
v0538_velocity_vector__temp[i_v0540__00lv__00lr_indexed_passthrough_eval] = v0540__00lv.flatten()
v0538_velocity_vector = v0538_velocity_vector__temp.copy()

# op _01e6_power_combination_eval
# LANG: _01e5 --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02172_propeller_radius = (v02171__01e5**1)
v02172_propeller_radius = (v02172_propeller_radius*_01e6_coeff).reshape((1,))

# op _01gD expand_scalar_eval
# LANG: _01gC --> _01gE
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02237__01gE = np.empty((1, 40, 30, 1))
v02237__01gE.fill(v02236__01gC.item())

# op _01gF expand_scalar_eval
# LANG: _01gv --> _01gG
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02239__01gG = np.empty((1, 40, 30, 1))
v02239__01gG.fill(v02238__01gv.item())

# op _01gy expand_scalar_eval
# LANG: _01gx --> _01gz
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02225__01gz = np.empty((1, 40, 30, 1))
v02225__01gz.fill(v02222__01gx.item())

# op _01t9_power_combination_eval
# LANG: _01t8 --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02545_propeller_radius = (v02544__01t8**1)
v02545_propeller_radius = (v02545_propeller_radius*_01t9_coeff).reshape((1,))

# op _01vB expand_scalar_eval
# LANG: _01vA --> _01vC
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02598__01vC = np.empty((1, 40, 30, 1))
v02598__01vC.fill(v02595__01vA.item())

# op _01vG expand_scalar_eval
# LANG: _01vF --> _01vH
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02610__01vH = np.empty((1, 40, 30, 1))
v02610__01vH.fill(v02609__01vF.item())

# op _01vI expand_scalar_eval
# LANG: _01vy --> _01vJ
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02612__01vJ = np.empty((1, 40, 30, 1))
v02612__01vJ.fill(v02611__01vy.item())

# op _006f cross_product_eval
# LANG: _005Z, in_plane_ey --> in_plane_ex
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0178_in_plane_ex = np.cross(v0173__005Z, v0183_in_plane_ey, axisa = 1, axisb = 1, axisc = 1)

# op _006t_decompose_eval
# LANG: velocity_vector --> _006u
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0171__006u = ((v0165_velocity_vector.flatten())[src_indices__006u__006t]).reshape((1, 3))

# op _00li cross_product_eval
# LANG: _00l1, in_plane_ey --> in_plane_ex
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0551_in_plane_ex = np.cross(v0546__00l1, v0556_in_plane_ey, axisa = 1, axisb = 1, axisc = 1)

# op _00lw_decompose_eval
# LANG: velocity_vector --> _00lx
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0544__00lx = ((v0538_velocity_vector.flatten())[src_indices__00lx__00lw]).reshape((1, 3))

# op _01fL_power_combination_eval
# LANG: propeller_radius --> hub_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02240_hub_radius = (v02172_propeller_radius**1)
v02240_hub_radius = (v02240_hub_radius*_01fL_coeff).reshape((1,))

# op _01gA_indexed_passthrough_eval
# LANG: _01gz, _01gE, _01gG --> inflow_velocity
# SHAPES: (1, 40, 30, 1), (1, 40, 30, 1), (1, 40, 30, 1) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02226_inflow_velocity__temp[i_v02225__01gz__01gA_indexed_passthrough_eval] = v02225__01gz.flatten()
v02226_inflow_velocity = v02226_inflow_velocity__temp.copy()
v02226_inflow_velocity__temp[i_v02237__01gE__01gA_indexed_passthrough_eval] = v02237__01gE.flatten()
v02226_inflow_velocity = v02226_inflow_velocity__temp.copy()
v02226_inflow_velocity__temp[i_v02239__01gG__01gA_indexed_passthrough_eval] = v02239__01gG.flatten()
v02226_inflow_velocity = v02226_inflow_velocity__temp.copy()

# op _01ge_decompose_eval
# LANG: rpm --> _01gf
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02244__01gf = ((v02208_rpm.flatten())[src_indices__01gf__01ge]).reshape((1, 1))

# op _01i4_power_combination_eval
# LANG: z --> _01i5
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02284__01i5 = (v02283_z**1)
v02284__01i5 = (v02284__01i5*_01i4_coeff).reshape((1, 1))

# op _01uO_power_combination_eval
# LANG: propeller_radius --> hub_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02613_hub_radius = (v02545_propeller_radius**1)
v02613_hub_radius = (v02613_hub_radius*_01uO_coeff).reshape((1,))

# op _01vD_indexed_passthrough_eval
# LANG: _01vC, _01vH, _01vJ --> inflow_velocity
# SHAPES: (1, 40, 30, 1), (1, 40, 30, 1), (1, 40, 30, 1) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02599_inflow_velocity__temp[i_v02598__01vC__01vD_indexed_passthrough_eval] = v02598__01vC.flatten()
v02599_inflow_velocity = v02599_inflow_velocity__temp.copy()
v02599_inflow_velocity__temp[i_v02610__01vH__01vD_indexed_passthrough_eval] = v02610__01vH.flatten()
v02599_inflow_velocity = v02599_inflow_velocity__temp.copy()
v02599_inflow_velocity__temp[i_v02612__01vJ__01vD_indexed_passthrough_eval] = v02612__01vJ.flatten()
v02599_inflow_velocity = v02599_inflow_velocity__temp.copy()

# op _01vh_decompose_eval
# LANG: rpm --> _01vi
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02617__01vi = ((v02581_rpm.flatten())[src_indices__01vi__01vh]).reshape((1, 1))

# op _01x7_power_combination_eval
# LANG: z --> _01x8
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02657__01x8 = (v02656_z**1)
v02657__01x8 = (v02657__01x8*_01x7_coeff).reshape((1, 1))

# op _005__power_combination_eval
# LANG: _005Z --> _0060
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0174__0060 = (v0173__005Z**1)
v0174__0060 = (v0174__0060*_005__coeff).reshape((1, 3))

# op _006v_tensor_dot_product_eval
# LANG: _006u, in_plane_ex --> _006w
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0177__006w = np.sum(v0171__006u * v0178_in_plane_ex, axis=1)

# op _00l2_power_combination_eval
# LANG: _00l1 --> _00l3
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0547__00l3 = (v0546__00l1**1)
v0547__00l3 = (v0547__00l3*_00l2_coeff).reshape((1, 3))

# op _00ly_tensor_dot_product_eval
# LANG: _00lx, in_plane_ex --> _00lz
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0550__00lz = np.sum(v0544__00lx * v0551_in_plane_ex, axis=1)

# op _01gV expand_scalar_eval
# LANG: hub_radius --> _hub_radius
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02250__hub_radius = np.empty((1, 40, 30))
v02250__hub_radius.fill(v02240_hub_radius.item())

# op _01gX expand_scalar_eval
# LANG: propeller_radius --> _rotor_radius
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02251__rotor_radius = np.empty((1, 40, 30))
v02251__rotor_radius.fill(v02172_propeller_radius.item())

# op _01gg_power_combination_eval
# LANG: _01gf --> _01gh
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02245__01gh = (v02244__01gf**1)
v02245__01gh = (v02245__01gh*_01gg_coeff).reshape((1, 1))

# op _01h4 expand_array_eval
# LANG: y_dir --> _y_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02255__y_dir = np.einsum('ad,bc->abcd', v02248_y_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _01h6 expand_array_eval
# LANG: z_dir --> _z_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02256__z_dir = np.einsum('ad,bc->abcd', v02249_z_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _01h8_power_combination_eval
# LANG: inflow_velocity --> _inflow_velocity
# SHAPES: (1, 40, 30, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02257__inflow_velocity = (v02226_inflow_velocity**1)
v02257__inflow_velocity = (v02257__inflow_velocity*_01h8_coeff).reshape((1, 40, 30, 3))

# op _01i6_linear_combination_eval
# LANG: _01i5 --> _01i7
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02285__01i7 = _01i6_constant+-1*v02284__01i5

# op _01vY expand_scalar_eval
# LANG: hub_radius --> _hub_radius
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02623__hub_radius = np.empty((1, 40, 30))
v02623__hub_radius.fill(v02613_hub_radius.item())

# op _01v_ expand_scalar_eval
# LANG: propeller_radius --> _rotor_radius
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02624__rotor_radius = np.empty((1, 40, 30))
v02624__rotor_radius.fill(v02545_propeller_radius.item())

# op _01vj_power_combination_eval
# LANG: _01vi --> _01vk
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02618__01vk = (v02617__01vi**1)
v02618__01vk = (v02618__01vk*_01vj_coeff).reshape((1, 1))

# op _01w7 expand_array_eval
# LANG: y_dir --> _y_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02628__y_dir = np.einsum('ad,bc->abcd', v02621_y_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _01w9 expand_array_eval
# LANG: z_dir --> _z_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02629__z_dir = np.einsum('ad,bc->abcd', v02622_z_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _01wb_power_combination_eval
# LANG: inflow_velocity --> _inflow_velocity
# SHAPES: (1, 40, 30, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02630__inflow_velocity = (v02599_inflow_velocity**1)
v02630__inflow_velocity = (v02630__inflow_velocity*_01wb_coeff).reshape((1, 40, 30, 3))

# op _01x9_linear_combination_eval
# LANG: _01x8 --> _01xa
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02658__01xa = _01x9_constant+-1*v02657__01x8

# op _0047 pnorm_eval
# LANG: rotor_2_disk_in_plane_1 --> _0048
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((3,))
v0121__0048 = np.linalg.norm(v018_rotor_2_disk_in_plane_1.flatten(), ord=2)
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((1, 3))

# op _006E_linear_combination_eval
# LANG: _006w --> _006F
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0186__006F = _006E_constant+-1*v0177__006w

# op _006x_tensor_dot_product_eval
# LANG: _006u, in_plane_ey --> _006y
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0188__006y = np.sum(v0171__006u * v0183_in_plane_ey, axis=1)

# op _006z_tensor_dot_product_eval
# LANG: _006u, _0060 --> _006A
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0172__006A = np.sum(v0171__006u * v0174__0060, axis=1)

# op _00ja pnorm_eval
# LANG: rotor_1_disk_in_plane_1 --> _00jb
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((3,))
v0494__00jb = np.linalg.norm(v08_rotor_1_disk_in_plane_1.flatten(), ord=2)
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((1, 3))

# op _00lA_tensor_dot_product_eval
# LANG: _00lx, in_plane_ey --> _00lB
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0561__00lB = np.sum(v0544__00lx * v0556_in_plane_ey, axis=1)

# op _00lC_tensor_dot_product_eval
# LANG: _00lx, _00l3 --> _00lD
# SHAPES: (1, 3), (1, 3) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0545__00lD = np.sum(v0544__00lx * v0547__00l3, axis=1)

# op _00lH_linear_combination_eval
# LANG: _00lz --> _00lI
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0559__00lI = _00lH_constant+-1*v0550__00lz

# op _01gi_indexed_passthrough_eval
# LANG: _01gh --> rotational_speed
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02246_rotational_speed__temp[i_v02245__01gh__01gi_indexed_passthrough_eval] = v02245__01gh.flatten()
v02246_rotational_speed = v02246_rotational_speed__temp.copy()

# op _01hI_tensor_dot_product_eval
# LANG: _y_dir, _inflow_velocity --> _in_plane_inflow_velocity
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02272__in_plane_inflow_velocity = np.sum(v02257__inflow_velocity * v02255__y_dir, axis=3)

# op _01hK_tensor_dot_product_eval
# LANG: _z_dir, _inflow_velocity --> inflow_z
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02273_inflow_z = np.sum(v02257__inflow_velocity * v02256__z_dir, axis=3)

# op _01hs_linear_combination_eval
# LANG: _hub_radius, _rotor_radius --> _01ht
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02265__01ht = _01hs_constant+1*v02251__rotor_radius+-1*v02250__hub_radius

# op _01i8_power_combination_eval
# LANG: _01i7 --> _01i9
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02286__01i9 = (v02285__01i7**1)
v02286__01i9 = (v02286__01i9*_01i8_coeff).reshape((1, 1))

# op _01vl_indexed_passthrough_eval
# LANG: _01vk --> rotational_speed
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02619_rotational_speed__temp[i_v02618__01vk__01vl_indexed_passthrough_eval] = v02618__01vk.flatten()
v02619_rotational_speed = v02619_rotational_speed__temp.copy()

# op _01wL_tensor_dot_product_eval
# LANG: _y_dir, _inflow_velocity --> _in_plane_inflow_velocity
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02645__in_plane_inflow_velocity = np.sum(v02630__inflow_velocity * v02628__y_dir, axis=3)

# op _01wN_tensor_dot_product_eval
# LANG: _z_dir, _inflow_velocity --> inflow_z
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02646_inflow_z = np.sum(v02630__inflow_velocity * v02629__z_dir, axis=3)

# op _01wv_linear_combination_eval
# LANG: _hub_radius, _rotor_radius --> _01ww
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02638__01ww = _01wv_constant+1*v02624__rotor_radius+-1*v02623__hub_radius

# op _01xb_power_combination_eval
# LANG: _01xa --> _01xc
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02659__01xc = (v02658__01xa**1)
v02659__01xc = (v02659__01xc*_01xb_coeff).reshape((1, 1))

# op _0049_power_combination_eval
# LANG: _0048 --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0122_propeller_radius = (v0121__0048**1)
v0122_propeller_radius = (v0122_propeller_radius*_0049_coeff).reshape((1,))

# op _006B expand_scalar_eval
# LANG: _006A --> _006C
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0175__006C = np.empty((1, 40, 30, 1))
v0175__006C.fill(v0172__006A.item())

# op _006G expand_scalar_eval
# LANG: _006F --> _006H
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0187__006H = np.empty((1, 40, 30, 1))
v0187__006H.fill(v0186__006F.item())

# op _006I expand_scalar_eval
# LANG: _006y --> _006J
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0189__006J = np.empty((1, 40, 30, 1))
v0189__006J.fill(v0188__006y.item())

# op _00jc_power_combination_eval
# LANG: _00jb --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0495_propeller_radius = (v0494__00jb**1)
v0495_propeller_radius = (v0495_propeller_radius*_00jc_coeff).reshape((1,))

# op _00lE expand_scalar_eval
# LANG: _00lD --> _00lF
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0548__00lF = np.empty((1, 40, 30, 1))
v0548__00lF.fill(v0545__00lD.item())

# op _00lJ expand_scalar_eval
# LANG: _00lI --> _00lK
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0560__00lK = np.empty((1, 40, 30, 1))
v0560__00lK.fill(v0559__00lI.item())

# op _00lL expand_scalar_eval
# LANG: _00lB --> _00lM
# SHAPES: (1,) --> (1, 40, 30, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0562__00lM = np.empty((1, 40, 30, 1))
v0562__00lM.fill(v0561__00lB.item())

# op _01h0 expand_scalar_eval
# LANG: rotational_speed --> _rotational_speed
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02246_rotational_speed = v02246_rotational_speed.reshape((1,))
v02253__rotational_speed = np.empty((1, 40, 30))
v02253__rotational_speed.fill(v02246_rotational_speed.item())
v02246_rotational_speed = v02246_rotational_speed.reshape((1, 1))

# op _01hM_power_combination_eval
# LANG: inflow_z --> _01hN
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02274__01hN = (v02273_inflow_z**1)
v02274__01hN = (v02274__01hN*_01hM_coeff).reshape((1, 40, 30))

# op _01hO_cos_eval
# LANG: _theta --> _01hP
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02276__01hP = np.cos(v02261__theta)

# op _01hS_power_combination_eval
# LANG: _in_plane_inflow_velocity --> _01hT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02278__01hT = (v02272__in_plane_inflow_velocity**1)
v02278__01hT = (v02278__01hT*_01hS_coeff).reshape((1, 40, 30))

# op _01hU_sin_eval
# LANG: _theta --> _01hV
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02280__01hV = np.sin(v02261__theta)

# op _01hu_power_combination_eval
# LANG: _01ht, _normalized_radius --> _01hv
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02266__01hv = (v02265__01ht**1)*(v02262__normalized_radius**1)
v02266__01hv = (v02266__01hv*_01hu_coeff).reshape((1, 40, 30))

# op _01ia_linear_combination_eval
# LANG: _01i9 --> temperature
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02287_temperature = _01ia_constant+1*v02286__01i9

# op _01w3 expand_scalar_eval
# LANG: rotational_speed --> _rotational_speed
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02619_rotational_speed = v02619_rotational_speed.reshape((1,))
v02626__rotational_speed = np.empty((1, 40, 30))
v02626__rotational_speed.fill(v02619_rotational_speed.item())
v02619_rotational_speed = v02619_rotational_speed.reshape((1, 1))

# op _01wP_power_combination_eval
# LANG: inflow_z --> _01wQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02647__01wQ = (v02646_inflow_z**1)
v02647__01wQ = (v02647__01wQ*_01wP_coeff).reshape((1, 40, 30))

# op _01wR_cos_eval
# LANG: _theta --> _01wS
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02649__01wS = np.cos(v02634__theta)

# op _01wV_power_combination_eval
# LANG: _in_plane_inflow_velocity --> _01wW
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02651__01wW = (v02645__in_plane_inflow_velocity**1)
v02651__01wW = (v02651__01wW*_01wV_coeff).reshape((1, 40, 30))

# op _01wX_sin_eval
# LANG: _theta --> _01wY
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02653__01wY = np.sin(v02634__theta)

# op _01wx_power_combination_eval
# LANG: _01ww, _normalized_radius --> _01wy
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02639__01wy = (v02638__01ww**1)*(v02635__normalized_radius**1)
v02639__01wy = (v02639__01wy*_01wx_coeff).reshape((1, 40, 30))

# op _01xd_linear_combination_eval
# LANG: _01xc --> temperature
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02660_temperature = _01xd_constant+1*v02659__01xc

# op _005O_power_combination_eval
# LANG: propeller_radius --> hub_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0190_hub_radius = (v0122_propeller_radius**1)
v0190_hub_radius = (v0190_hub_radius*_005O_coeff).reshape((1,))

# op _006D_indexed_passthrough_eval
# LANG: _006C, _006H, _006J --> inflow_velocity
# SHAPES: (1, 40, 30, 1), (1, 40, 30, 1), (1, 40, 30, 1) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0176_inflow_velocity__temp[i_v0175__006C__006D_indexed_passthrough_eval] = v0175__006C.flatten()
v0176_inflow_velocity = v0176_inflow_velocity__temp.copy()
v0176_inflow_velocity__temp[i_v0187__006H__006D_indexed_passthrough_eval] = v0187__006H.flatten()
v0176_inflow_velocity = v0176_inflow_velocity__temp.copy()
v0176_inflow_velocity__temp[i_v0189__006J__006D_indexed_passthrough_eval] = v0189__006J.flatten()
v0176_inflow_velocity = v0176_inflow_velocity__temp.copy()

# op _006h_decompose_eval
# LANG: rpm --> _006i
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0194__006i = ((v0158_rpm.flatten())[src_indices__006i__006h]).reshape((1, 1))

# op _0087_power_combination_eval
# LANG: z --> _0088
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0234__0088 = (v0233_z**1)
v0234__0088 = (v0234__0088*_0087_coeff).reshape((1, 1))

# op _00kR_power_combination_eval
# LANG: propeller_radius --> hub_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0563_hub_radius = (v0495_propeller_radius**1)
v0563_hub_radius = (v0563_hub_radius*_00kR_coeff).reshape((1,))

# op _00lG_indexed_passthrough_eval
# LANG: _00lF, _00lK, _00lM --> inflow_velocity
# SHAPES: (1, 40, 30, 1), (1, 40, 30, 1), (1, 40, 30, 1) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0549_inflow_velocity__temp[i_v0548__00lF__00lG_indexed_passthrough_eval] = v0548__00lF.flatten()
v0549_inflow_velocity = v0549_inflow_velocity__temp.copy()
v0549_inflow_velocity__temp[i_v0560__00lK__00lG_indexed_passthrough_eval] = v0560__00lK.flatten()
v0549_inflow_velocity = v0549_inflow_velocity__temp.copy()
v0549_inflow_velocity__temp[i_v0562__00lM__00lG_indexed_passthrough_eval] = v0562__00lM.flatten()
v0549_inflow_velocity = v0549_inflow_velocity__temp.copy()

# op _00lk_decompose_eval
# LANG: rpm --> _00ll
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0567__00ll = ((v0531_rpm.flatten())[src_indices__00ll__00lk]).reshape((1, 1))

# op _00na_power_combination_eval
# LANG: z --> _00nb
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0607__00nb = (v0606_z**1)
v0607__00nb = (v0607__00nb*_00na_coeff).reshape((1, 1))

# op _01hQ_power_combination_eval
# LANG: _01hN, _01hP --> _01hR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02275__01hR = (v02274__01hN**1)*(v02276__01hP**1)
v02275__01hR = (v02275__01hR*_01hQ_coeff).reshape((1, 40, 30))

# op _01hW_power_combination_eval
# LANG: _01hT, _01hV --> _01hX
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02279__01hX = (v02278__01hT**1)*(v02280__01hV**1)
v02279__01hX = (v02279__01hX*_01hW_coeff).reshape((1, 40, 30))

# op _01hq_power_combination_eval
# LANG: _rotational_speed --> _angular_speed
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02263__angular_speed = (v02253__rotational_speed**1)
v02263__angular_speed = (v02263__angular_speed*_01hq_coeff).reshape((1, 40, 30))

# op _01hw_linear_combination_eval
# LANG: _01hv, _hub_radius --> _radius
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02264__radius = _01hw_constant+1*v02250__hub_radius+1*v02266__01hv

# op _01ic_power_combination_eval
# LANG: temperature --> _01id
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02288__01id = (v02287_temperature**1)
v02288__01id = (v02288__01id*_01ic_coeff).reshape((1, 1))

# op _01wT_power_combination_eval
# LANG: _01wQ, _01wS --> _01wU
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02648__01wU = (v02647__01wQ**1)*(v02649__01wS**1)
v02648__01wU = (v02648__01wU*_01wT_coeff).reshape((1, 40, 30))

# op _01wZ_power_combination_eval
# LANG: _01wW, _01wY --> _01w_
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02652__01w_ = (v02651__01wW**1)*(v02653__01wY**1)
v02652__01w_ = (v02652__01w_*_01wZ_coeff).reshape((1, 40, 30))

# op _01wt_power_combination_eval
# LANG: _rotational_speed --> _angular_speed
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02636__angular_speed = (v02626__rotational_speed**1)
v02636__angular_speed = (v02636__angular_speed*_01wt_coeff).reshape((1, 40, 30))

# op _01wz_linear_combination_eval
# LANG: _01wy, _hub_radius --> _radius
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02637__radius = _01wz_constant+1*v02623__hub_radius+1*v02639__01wy

# op _01xf_power_combination_eval
# LANG: temperature --> _01xg
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02661__01xg = (v02660_temperature**1)
v02661__01xg = (v02661__01xg*_01xf_coeff).reshape((1, 1))

# op _006Y expand_scalar_eval
# LANG: hub_radius --> _hub_radius
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0200__hub_radius = np.empty((1, 40, 30))
v0200__hub_radius.fill(v0190_hub_radius.item())

# op _006_ expand_scalar_eval
# LANG: propeller_radius --> _rotor_radius
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0201__rotor_radius = np.empty((1, 40, 30))
v0201__rotor_radius.fill(v0122_propeller_radius.item())

# op _006j_power_combination_eval
# LANG: _006i --> _006k
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0195__006k = (v0194__006i**1)
v0195__006k = (v0195__006k*_006j_coeff).reshape((1, 1))

# op _0077 expand_array_eval
# LANG: y_dir --> _y_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0205__y_dir = np.einsum('ad,bc->abcd', v0198_y_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _0079 expand_array_eval
# LANG: z_dir --> _z_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0206__z_dir = np.einsum('ad,bc->abcd', v0199_z_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _007b_power_combination_eval
# LANG: inflow_velocity --> _inflow_velocity
# SHAPES: (1, 40, 30, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0207__inflow_velocity = (v0176_inflow_velocity**1)
v0207__inflow_velocity = (v0207__inflow_velocity*_007b_coeff).reshape((1, 40, 30, 3))

# op _0089_linear_combination_eval
# LANG: _0088 --> _008a
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0235__008a = _0089_constant+-1*v0234__0088

# op _00lm_power_combination_eval
# LANG: _00ll --> _00ln
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0568__00ln = (v0567__00ll**1)
v0568__00ln = (v0568__00ln*_00lm_coeff).reshape((1, 1))

# op _00m0 expand_scalar_eval
# LANG: hub_radius --> _hub_radius
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0573__hub_radius = np.empty((1, 40, 30))
v0573__hub_radius.fill(v0563_hub_radius.item())

# op _00m2 expand_scalar_eval
# LANG: propeller_radius --> _rotor_radius
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0574__rotor_radius = np.empty((1, 40, 30))
v0574__rotor_radius.fill(v0495_propeller_radius.item())

# op _00ma expand_array_eval
# LANG: y_dir --> _y_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0578__y_dir = np.einsum('ad,bc->abcd', v0571_y_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _00mc expand_array_eval
# LANG: z_dir --> _z_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0579__z_dir = np.einsum('ad,bc->abcd', v0572_z_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _00me_power_combination_eval
# LANG: inflow_velocity --> _inflow_velocity
# SHAPES: (1, 40, 30, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0580__inflow_velocity = (v0549_inflow_velocity**1)
v0580__inflow_velocity = (v0580__inflow_velocity*_00me_coeff).reshape((1, 40, 30, 3))

# op _00nc_linear_combination_eval
# LANG: _00nb --> _00nd
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0608__00nd = _00nc_constant+-1*v0607__00nb

# op _000M_sparsematmat_eval
# LANG: design_geometry --> _000N
# SHAPES: (32500, 3) --> (40, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v023__000N = _000M_sparsematmat_eval_mat@v05_design_geometry

# op _000s_sparsematmat_eval
# LANG: design_geometry --> _000t
# SHAPES: (32500, 3) --> (40, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v013__000t = _000s_sparsematmat_eval_mat@v05_design_geometry

# op _01h2 expand_array_eval
# LANG: x_dir --> _x_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02254__x_dir = np.einsum('ad,bc->abcd', v02247_x_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _01hY_linear_combination_eval
# LANG: _01hR, _01hX --> _01hZ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02277__01hZ = _01hY_constant+1*v02275__01hR+1*v02279__01hX

# op _01h__power_combination_eval
# LANG: _angular_speed, _radius --> _01i0
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02282__01i0 = (v02264__radius**1)*(v02263__angular_speed**1)
v02282__01i0 = (v02282__01i0*_01h__coeff).reshape((1, 40, 30))

# op _01ie_power_combination_eval
# LANG: _01id --> _01if
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02289__01if = (v02288__01id**5.258643795229161)
v02289__01if = (v02289__01if*_01ie_coeff).reshape((1, 1))

# op _01w5 expand_array_eval
# LANG: x_dir --> _x_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02627__x_dir = np.einsum('ad,bc->abcd', v02620_x_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _01x0_linear_combination_eval
# LANG: _01wU, _01w_ --> _01x1
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02650__01x1 = _01x0_constant+1*v02648__01wU+1*v02652__01w_

# op _01x2_power_combination_eval
# LANG: _angular_speed, _radius --> _01x3
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02655__01x3 = (v02637__radius**1)*(v02636__angular_speed**1)
v02655__01x3 = (v02655__01x3*_01x2_coeff).reshape((1, 40, 30))

# op _01xh_power_combination_eval
# LANG: _01xg --> _01xi
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02662__01xi = (v02661__01xg**5.258643795229161)
v02662__01xi = (v02662__01xi*_01xh_coeff).reshape((1, 1))

# op _006l_indexed_passthrough_eval
# LANG: _006k --> rotational_speed
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0196_rotational_speed__temp[i_v0195__006k__006l_indexed_passthrough_eval] = v0195__006k.flatten()
v0196_rotational_speed = v0196_rotational_speed__temp.copy()

# op _007L_tensor_dot_product_eval
# LANG: _y_dir, _inflow_velocity --> _in_plane_inflow_velocity
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0222__in_plane_inflow_velocity = np.sum(v0207__inflow_velocity * v0205__y_dir, axis=3)

# op _007N_tensor_dot_product_eval
# LANG: _z_dir, _inflow_velocity --> inflow_z
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0223_inflow_z = np.sum(v0207__inflow_velocity * v0206__z_dir, axis=3)

# op _007v_linear_combination_eval
# LANG: _hub_radius, _rotor_radius --> _007w
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0215__007w = _007v_constant+1*v0201__rotor_radius+-1*v0200__hub_radius

# op _008b_power_combination_eval
# LANG: _008a --> _008c
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0236__008c = (v0235__008a**1)
v0236__008c = (v0236__008c*_008b_coeff).reshape((1, 1))

# op _00lo_indexed_passthrough_eval
# LANG: _00ln --> rotational_speed
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0569_rotational_speed__temp[i_v0568__00ln__00lo_indexed_passthrough_eval] = v0568__00ln.flatten()
v0569_rotational_speed = v0569_rotational_speed__temp.copy()

# op _00mO_tensor_dot_product_eval
# LANG: _y_dir, _inflow_velocity --> _in_plane_inflow_velocity
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0595__in_plane_inflow_velocity = np.sum(v0580__inflow_velocity * v0578__y_dir, axis=3)

# op _00mQ_tensor_dot_product_eval
# LANG: _z_dir, _inflow_velocity --> inflow_z
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0596_inflow_z = np.sum(v0580__inflow_velocity * v0579__z_dir, axis=3)

# op _00my_linear_combination_eval
# LANG: _hub_radius, _rotor_radius --> _00mz
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0588__00mz = _00my_constant+1*v0574__rotor_radius+-1*v0573__hub_radius

# op _00ne_power_combination_eval
# LANG: _00nd --> _00nf
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0609__00nf = (v0608__00nd**1)
v0609__00nf = (v0609__00nf*_00ne_coeff).reshape((1, 1))

# op _000O reshape_eval
# LANG: _000N --> rotor_2_blade_chord_length
# SHAPES: (40, 3) --> (40, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v024_rotor_2_blade_chord_length = v023__000N.reshape((40, 3))

# op _000Q_sparsematmat_eval
# LANG: design_geometry --> _000R
# SHAPES: (32500, 3) --> (40, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v025__000R = _000Q_sparsematmat_eval_mat@v05_design_geometry

# op _000u reshape_eval
# LANG: _000t --> rotor_1_blade_chord_length
# SHAPES: (40, 3) --> (40, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v014_rotor_1_blade_chord_length = v013__000t.reshape((40, 3))

# op _000w_sparsematmat_eval
# LANG: design_geometry --> _000x
# SHAPES: (32500, 3) --> (40, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v015__000x = _000w_sparsematmat_eval_mat@v05_design_geometry

# op _01hG_tensor_dot_product_eval
# LANG: _x_dir, _inflow_velocity --> _axial_inflow_velocity
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02271__axial_inflow_velocity = np.sum(v02257__inflow_velocity * v02254__x_dir, axis=3)

# op _01i1_linear_combination_eval
# LANG: _01hZ, _01i0 --> _tangential_inflow_velocity
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02281__tangential_inflow_velocity = _01i1_constant+1*v02277__01hZ+1*v02282__01i0

# op _01ig_power_combination_eval
# LANG: _01if --> pressure
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02290_pressure = (v02289__01if**1)
v02290_pressure = (v02290_pressure*_01ig_coeff).reshape((1, 1))

# op _01im_power_combination_eval
# LANG: temperature --> _01in
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02293__01in = (v02287_temperature**1)
v02293__01in = (v02293__01in*_01im_coeff).reshape((1, 1))

# op _01wJ_tensor_dot_product_eval
# LANG: _x_dir, _inflow_velocity --> _axial_inflow_velocity
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02644__axial_inflow_velocity = np.sum(v02630__inflow_velocity * v02627__x_dir, axis=3)

# op _01x4_linear_combination_eval
# LANG: _01x1, _01x3 --> _tangential_inflow_velocity
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02654__tangential_inflow_velocity = _01x4_constant+1*v02650__01x1+1*v02655__01x3

# op _01xj_power_combination_eval
# LANG: _01xi --> pressure
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02663_pressure = (v02662__01xi**1)
v02663_pressure = (v02663_pressure*_01xj_coeff).reshape((1, 1))

# op _01xp_power_combination_eval
# LANG: temperature --> _01xq
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02666__01xq = (v02660_temperature**1)
v02666__01xq = (v02666__01xq*_01xp_coeff).reshape((1, 1))

# op _0073 expand_scalar_eval
# LANG: rotational_speed --> _rotational_speed
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0196_rotational_speed = v0196_rotational_speed.reshape((1,))
v0203__rotational_speed = np.empty((1, 40, 30))
v0203__rotational_speed.fill(v0196_rotational_speed.item())
v0196_rotational_speed = v0196_rotational_speed.reshape((1, 1))

# op _007P_power_combination_eval
# LANG: inflow_z --> _007Q
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0224__007Q = (v0223_inflow_z**1)
v0224__007Q = (v0224__007Q*_007P_coeff).reshape((1, 40, 30))

# op _007R_cos_eval
# LANG: _theta --> _007S
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0226__007S = np.cos(v0211__theta)

# op _007V_power_combination_eval
# LANG: _in_plane_inflow_velocity --> _007W
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0228__007W = (v0222__in_plane_inflow_velocity**1)
v0228__007W = (v0228__007W*_007V_coeff).reshape((1, 40, 30))

# op _007X_sin_eval
# LANG: _theta --> _007Y
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0230__007Y = np.sin(v0211__theta)

# op _007x_power_combination_eval
# LANG: _007w, _normalized_radius --> _007y
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0216__007y = (v0215__007w**1)*(v0212__normalized_radius**1)
v0216__007y = (v0216__007y*_007x_coeff).reshape((1, 40, 30))

# op _008d_linear_combination_eval
# LANG: _008c --> temperature
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0237_temperature = _008d_constant+1*v0236__008c

# op _00m6 expand_scalar_eval
# LANG: rotational_speed --> _rotational_speed
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0569_rotational_speed = v0569_rotational_speed.reshape((1,))
v0576__rotational_speed = np.empty((1, 40, 30))
v0576__rotational_speed.fill(v0569_rotational_speed.item())
v0569_rotational_speed = v0569_rotational_speed.reshape((1, 1))

# op _00mA_power_combination_eval
# LANG: _00mz, _normalized_radius --> _00mB
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0589__00mB = (v0588__00mz**1)*(v0585__normalized_radius**1)
v0589__00mB = (v0589__00mB*_00mA_coeff).reshape((1, 40, 30))

# op _00mS_power_combination_eval
# LANG: inflow_z --> _00mT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0597__00mT = (v0596_inflow_z**1)
v0597__00mT = (v0597__00mT*_00mS_coeff).reshape((1, 40, 30))

# op _00mU_cos_eval
# LANG: _theta --> _00mV
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0599__00mV = np.cos(v0584__theta)

# op _00mY_power_combination_eval
# LANG: _in_plane_inflow_velocity --> _00mZ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0601__00mZ = (v0595__in_plane_inflow_velocity**1)
v0601__00mZ = (v0601__00mZ*_00mY_coeff).reshape((1, 40, 30))

# op _00m__sin_eval
# LANG: _theta --> _00n0
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0603__00n0 = np.sin(v0584__theta)

# op _00ng_linear_combination_eval
# LANG: _00nf --> temperature
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0610_temperature = _00ng_constant+1*v0609__00nf

# op _000S reshape_eval
# LANG: _000R --> rotor_2_blade_twist
# SHAPES: (40, 3) --> (40, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v026_rotor_2_blade_twist = v025__000R.reshape((40, 3))

# op _000y reshape_eval
# LANG: _000x --> rotor_1_blade_twist
# SHAPES: (40, 3) --> (40, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v016_rotor_1_blade_twist = v015__000x.reshape((40, 3))

# op _01dN pnorm_axis_eval
# LANG: rotor_2_blade_chord_length --> _01dO
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02164__01dO = np.sum(v024_rotor_2_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _01et_power_combination_eval
# LANG: _axial_inflow_velocity --> _01eu
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02182__01eu = (v02271__axial_inflow_velocity**2)
v02182__01eu = (v02182__01eu*_01et_coeff).reshape((1, 40, 30))

# op _01ev_power_combination_eval
# LANG: _tangential_inflow_velocity --> _01ew
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02184__01ew = (v02281__tangential_inflow_velocity**2)
v02184__01ew = (v02184__01ew*_01ev_coeff).reshape((1, 40, 30))

# op _01ii_power_combination_eval
# LANG: pressure --> _01ij
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02291__01ij = (v02290_pressure**1)
v02291__01ij = (v02291__01ij*_01ii_coeff).reshape((1, 1))

# op _01io_power_combination_eval
# LANG: _01in --> _01ip
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02294__01ip = (v02293__01in**1.5)
v02294__01ip = (v02294__01ip*_01io_coeff).reshape((1, 1))

# op _01sQ pnorm_axis_eval
# LANG: rotor_1_blade_chord_length --> _01sR
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02537__01sR = np.sum(v014_rotor_1_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _01tw_power_combination_eval
# LANG: _axial_inflow_velocity --> _01tx
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02555__01tx = (v02644__axial_inflow_velocity**2)
v02555__01tx = (v02555__01tx*_01tw_coeff).reshape((1, 40, 30))

# op _01ty_power_combination_eval
# LANG: _tangential_inflow_velocity --> _01tz
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02557__01tz = (v02654__tangential_inflow_velocity**2)
v02557__01tz = (v02557__01tz*_01ty_coeff).reshape((1, 40, 30))

# op _01xl_power_combination_eval
# LANG: pressure --> _01xm
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02664__01xm = (v02663_pressure**1)
v02664__01xm = (v02664__01xm*_01xl_coeff).reshape((1, 1))

# op _01xr_power_combination_eval
# LANG: _01xq --> _01xs
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02667__01xs = (v02666__01xq**1.5)
v02667__01xs = (v02667__01xs*_01xr_coeff).reshape((1, 1))

# op _007T_power_combination_eval
# LANG: _007Q, _007S --> _007U
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0225__007U = (v0224__007Q**1)*(v0226__007S**1)
v0225__007U = (v0225__007U*_007T_coeff).reshape((1, 40, 30))

# op _007Z_power_combination_eval
# LANG: _007W, _007Y --> _007_
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0229__007_ = (v0228__007W**1)*(v0230__007Y**1)
v0229__007_ = (v0229__007_*_007Z_coeff).reshape((1, 40, 30))

# op _007t_power_combination_eval
# LANG: _rotational_speed --> _angular_speed
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0213__angular_speed = (v0203__rotational_speed**1)
v0213__angular_speed = (v0213__angular_speed*_007t_coeff).reshape((1, 40, 30))

# op _007z_linear_combination_eval
# LANG: _007y, _hub_radius --> _radius
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0214__radius = _007z_constant+1*v0200__hub_radius+1*v0216__007y

# op _008f_power_combination_eval
# LANG: temperature --> _008g
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0238__008g = (v0237_temperature**1)
v0238__008g = (v0238__008g*_008f_coeff).reshape((1, 1))

# op _00mC_linear_combination_eval
# LANG: _00mB, _hub_radius --> _radius
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0587__radius = _00mC_constant+1*v0573__hub_radius+1*v0589__00mB

# op _00mW_power_combination_eval
# LANG: _00mT, _00mV --> _00mX
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0598__00mX = (v0597__00mT**1)*(v0599__00mV**1)
v0598__00mX = (v0598__00mX*_00mW_coeff).reshape((1, 40, 30))

# op _00mw_power_combination_eval
# LANG: _rotational_speed --> _angular_speed
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0586__angular_speed = (v0576__rotational_speed**1)
v0586__angular_speed = (v0586__angular_speed*_00mw_coeff).reshape((1, 40, 30))

# op _00n1_power_combination_eval
# LANG: _00mZ, _00n0 --> _00n2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0602__00n2 = (v0601__00mZ**1)*(v0603__00n0**1)
v0602__00n2 = (v0602__00n2*_00n1_coeff).reshape((1, 40, 30))

# op _00ni_power_combination_eval
# LANG: temperature --> _00nj
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0611__00nj = (v0610_temperature**1)
v0611__00nj = (v0611__00nj*_00ni_coeff).reshape((1, 1))

# op _01dP reshape_eval
# LANG: _01dO --> chord_profile
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02165_chord_profile = v02164__01dO.reshape((40, 1))

# op _01dS_single_tensor_sum_with_axis_eval
# LANG: rotor_2_blade_twist --> _01dT
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02166__01dT = np.sum(v026_rotor_2_blade_twist, axis = (1,)).reshape((40,))

# op _01ex_linear_combination_eval
# LANG: _01eu, _01ew --> _01ey
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02183__01ey = _01ex_constant+1*v02182__01eu+1*v02184__01ew

# op _01ik_power_combination_eval
# LANG: temperature, _01ij --> density
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02292_density = (v02291__01ij**1)*(v02287_temperature**-1)
v02292_density = (v02292_density*_01ik_coeff).reshape((1, 1))

# op _01iq_power_combination_eval
# LANG: _01ip --> _01ir
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02295__01ir = (v02294__01ip**1)
v02295__01ir = (v02295__01ir*_01iq_coeff).reshape((1, 1))

# op _01sS reshape_eval
# LANG: _01sR --> chord_profile
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02538_chord_profile = v02537__01sR.reshape((40, 1))

# op _01sV_single_tensor_sum_with_axis_eval
# LANG: rotor_1_blade_twist --> _01sW
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02539__01sW = np.sum(v016_rotor_1_blade_twist, axis = (1,)).reshape((40,))

# op _01tA_linear_combination_eval
# LANG: _01tx, _01tz --> _01tB
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02556__01tB = _01tA_constant+1*v02555__01tx+1*v02557__01tz

# op _01xn_power_combination_eval
# LANG: temperature, _01xm --> density
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02665_density = (v02664__01xm**1)*(v02660_temperature**-1)
v02665_density = (v02665_density*_01xn_coeff).reshape((1, 1))

# op _01xt_power_combination_eval
# LANG: _01xs --> _01xu
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02668__01xu = (v02667__01xs**1)
v02668__01xu = (v02668__01xu*_01xt_coeff).reshape((1, 1))

# op _0075 expand_array_eval
# LANG: x_dir --> _x_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0204__x_dir = np.einsum('ad,bc->abcd', v0197_x_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _0080_linear_combination_eval
# LANG: _007U, _007_ --> _0081
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0227__0081 = _0080_constant+1*v0225__007U+1*v0229__007_

# op _0082_power_combination_eval
# LANG: _angular_speed, _radius --> _0083
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0232__0083 = (v0214__radius**1)*(v0213__angular_speed**1)
v0232__0083 = (v0232__0083*_0082_coeff).reshape((1, 40, 30))

# op _008h_power_combination_eval
# LANG: _008g --> _008i
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0239__008i = (v0238__008g**5.258643795229161)
v0239__008i = (v0239__008i*_008h_coeff).reshape((1, 1))

# op _00m8 expand_array_eval
# LANG: x_dir --> _x_dir
# SHAPES: (1, 3) --> (1, 40, 30, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0577__x_dir = np.einsum('ad,bc->abcd', v0570_x_dir.reshape((1, 3)) ,np.ones((40, 30))).reshape((1, 40, 30, 3))

# op _00n3_linear_combination_eval
# LANG: _00mX, _00n2 --> _00n4
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0600__00n4 = _00n3_constant+1*v0598__00mX+1*v0602__00n2

# op _00n5_power_combination_eval
# LANG: _angular_speed, _radius --> _00n6
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0605__00n6 = (v0587__radius**1)*(v0586__angular_speed**1)
v0605__00n6 = (v0605__00n6*_00n5_coeff).reshape((1, 40, 30))

# op _00nk_power_combination_eval
# LANG: _00nj --> _00nl
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0612__00nl = (v0611__00nj**5.258643795229161)
v0612__00nl = (v0612__00nl*_00nk_coeff).reshape((1, 1))

# op _01dU reshape_eval
# LANG: _01dT --> _01dV
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02167__01dV = v02166__01dT.reshape((40, 1))

# op _01eC expand_scalar_eval
# LANG: density --> _01eD
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02292_density = v02292_density.reshape((1,))
v02180__01eD = np.empty((1, 40, 30))
v02180__01eD.fill(v02292_density.item())
v02292_density = v02292_density.reshape((1, 1))

# op _01ez_power_combination_eval
# LANG: _01ey --> _01eA
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02185__01eA = (v02183__01ey**0.5)
v02185__01eA = (v02185__01eA*_01ez_coeff).reshape((1, 40, 30))

# op _01hc expand_array_eval
# LANG: chord_profile --> _chord
# SHAPES: (40,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02165_chord_profile = v02165_chord_profile.reshape((40,))
v02259__chord = np.einsum('b,ac->abc', v02165_chord_profile.reshape((40,)) ,np.ones((1, 30))).reshape((1, 40, 30))
v02165_chord_profile = v02165_chord_profile.reshape((40, 1))

# op _01is_power_combination_eval
# LANG: _01ir --> _01it
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02296__01it = (v02295__01ir**1)
v02296__01it = (v02296__01it*_01is_coeff).reshape((1, 1))

# op _01iu_linear_combination_eval
# LANG: temperature --> _01iv
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02298__01iv = _01iu_constant+1*v02287_temperature

# op _01iy_power_combination_eval
# LANG: temperature --> _01iz
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02299__01iz = (v02287_temperature**1)
v02299__01iz = (v02299__01iz*_01iy_coeff).reshape((1, 1))

# op _01sX reshape_eval
# LANG: _01sW --> _01sY
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02540__01sY = v02539__01sW.reshape((40, 1))

# op _01tC_power_combination_eval
# LANG: _01tB --> _01tD
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02558__01tD = (v02556__01tB**0.5)
v02558__01tD = (v02558__01tD*_01tC_coeff).reshape((1, 40, 30))

# op _01tF expand_scalar_eval
# LANG: density --> _01tG
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02665_density = v02665_density.reshape((1,))
v02553__01tG = np.empty((1, 40, 30))
v02553__01tG.fill(v02665_density.item())
v02665_density = v02665_density.reshape((1, 1))

# op _01wf expand_array_eval
# LANG: chord_profile --> _chord
# SHAPES: (40,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02538_chord_profile = v02538_chord_profile.reshape((40,))
v02632__chord = np.einsum('b,ac->abc', v02538_chord_profile.reshape((40,)) ,np.ones((1, 30))).reshape((1, 40, 30))
v02538_chord_profile = v02538_chord_profile.reshape((40, 1))

# op _01xB_power_combination_eval
# LANG: temperature --> _01xC
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02672__01xC = (v02660_temperature**1)
v02672__01xC = (v02672__01xC*_01xB_coeff).reshape((1, 1))

# op _01xv_power_combination_eval
# LANG: _01xu --> _01xw
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02669__01xw = (v02668__01xu**1)
v02669__01xw = (v02669__01xw*_01xv_coeff).reshape((1, 1))

# op _01xx_linear_combination_eval
# LANG: temperature --> _01xy
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02671__01xy = _01xx_constant+1*v02660_temperature

# op _007J_tensor_dot_product_eval
# LANG: _x_dir, _inflow_velocity --> _axial_inflow_velocity
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0221__axial_inflow_velocity = np.sum(v0207__inflow_velocity * v0204__x_dir, axis=3)

# op _0084_linear_combination_eval
# LANG: _0081, _0083 --> _tangential_inflow_velocity
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0231__tangential_inflow_velocity = _0084_constant+1*v0227__0081+1*v0232__0083

# op _008j_power_combination_eval
# LANG: _008i --> pressure
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0240_pressure = (v0239__008i**1)
v0240_pressure = (v0240_pressure*_008j_coeff).reshape((1, 1))

# op _008p_power_combination_eval
# LANG: temperature --> _008q
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0243__008q = (v0237_temperature**1)
v0243__008q = (v0243__008q*_008p_coeff).reshape((1, 1))

# op _00mM_tensor_dot_product_eval
# LANG: _x_dir, _inflow_velocity --> _axial_inflow_velocity
# SHAPES: (1, 40, 30, 3), (1, 40, 30, 3) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0594__axial_inflow_velocity = np.sum(v0580__inflow_velocity * v0577__x_dir, axis=3)

# op _00n7_linear_combination_eval
# LANG: _00n4, _00n6 --> _tangential_inflow_velocity
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0604__tangential_inflow_velocity = _00n7_constant+1*v0600__00n4+1*v0605__00n6

# op _00nm_power_combination_eval
# LANG: _00nl --> pressure
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0613_pressure = (v0612__00nl**1)
v0613_pressure = (v0613_pressure*_00nm_coeff).reshape((1, 1))

# op _00ns_power_combination_eval
# LANG: temperature --> _00nt
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0616__00nt = (v0610_temperature**1)
v0616__00nt = (v0616__00nt*_00ns_coeff).reshape((1, 1))

# op _01dW_power_combination_eval
# LANG: chord_profile, _01dV --> _01dX
# SHAPES: (40, 1), (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02168__01dX = (v02167__01dV**1)*(v02165_chord_profile**-1)
v02168__01dX = (v02168__01dX*_01dW_coeff).reshape((40, 1))

# op _01eK_power_combination_eval
# LANG: _01eD, _01eA --> _01eL
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02181__01eL = (v02180__01eD**1)*(v02185__01eA**1)
v02181__01eL = (v02181__01eL*_01eK_coeff).reshape((1, 40, 30))

# op _01hy_power_combination_eval
# LANG: _chord --> _01hz
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02267__01hz = (v02259__chord**1)
v02267__01hz = (v02267__01hz*_01hy_coeff).reshape((1, 40, 30))

# op _01iA_power_combination_eval
# LANG: _01iz --> speed_of_sound
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02300_speed_of_sound = (v02299__01iz**0.5)
v02300_speed_of_sound = (v02300_speed_of_sound*_01iA_coeff).reshape((1, 1))

# op _01iw_power_combination_eval
# LANG: _01it, _01iv --> dynamic_viscosity
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.atmosphere_model
v02297_dynamic_viscosity = (v02296__01it**1)*(v02298__01iv**-1)
v02297_dynamic_viscosity = (v02297_dynamic_viscosity*_01iw_coeff).reshape((1, 1))

# op _01sZ_power_combination_eval
# LANG: chord_profile, _01sY --> _01s_
# SHAPES: (40, 1), (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02541__01s_ = (v02540__01sY**1)*(v02538_chord_profile**-1)
v02541__01s_ = (v02541__01s_*_01sZ_coeff).reshape((40, 1))

# op _01tN_power_combination_eval
# LANG: _01tG, _01tD --> _01tO
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02554__01tO = (v02553__01tG**1)*(v02558__01tD**1)
v02554__01tO = (v02554__01tO*_01tN_coeff).reshape((1, 40, 30))

# op _01wB_power_combination_eval
# LANG: _chord --> _01wC
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02640__01wC = (v02632__chord**1)
v02640__01wC = (v02640__01wC*_01wB_coeff).reshape((1, 40, 30))

# op _01xD_power_combination_eval
# LANG: _01xC --> speed_of_sound
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02673_speed_of_sound = (v02672__01xC**0.5)
v02673_speed_of_sound = (v02673_speed_of_sound*_01xD_coeff).reshape((1, 1))

# op _01xz_power_combination_eval
# LANG: _01xw, _01xy --> dynamic_viscosity
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.atmosphere_model
v02670_dynamic_viscosity = (v02669__01xw**1)*(v02671__01xy**-1)
v02670_dynamic_viscosity = (v02670_dynamic_viscosity*_01xz_coeff).reshape((1, 1))

# op _003Q pnorm_axis_eval
# LANG: rotor_2_blade_chord_length --> _003R
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0114__003R = np.sum(v024_rotor_2_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _004w_power_combination_eval
# LANG: _axial_inflow_velocity --> _004x
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0132__004x = (v0221__axial_inflow_velocity**2)
v0132__004x = (v0132__004x*_004w_coeff).reshape((1, 40, 30))

# op _004y_power_combination_eval
# LANG: _tangential_inflow_velocity --> _004z
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0134__004z = (v0231__tangential_inflow_velocity**2)
v0134__004z = (v0134__004z*_004y_coeff).reshape((1, 40, 30))

# op _008l_power_combination_eval
# LANG: pressure --> _008m
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0241__008m = (v0240_pressure**1)
v0241__008m = (v0241__008m*_008l_coeff).reshape((1, 1))

# op _008r_power_combination_eval
# LANG: _008q --> _008s
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0244__008s = (v0243__008q**1.5)
v0244__008s = (v0244__008s*_008r_coeff).reshape((1, 1))

# op _00iT pnorm_axis_eval
# LANG: rotor_1_blade_chord_length --> _00iU
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0487__00iU = np.sum(v014_rotor_1_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _00jB_power_combination_eval
# LANG: _tangential_inflow_velocity --> _00jC
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0507__00jC = (v0604__tangential_inflow_velocity**2)
v0507__00jC = (v0507__00jC*_00jB_coeff).reshape((1, 40, 30))

# op _00jz_power_combination_eval
# LANG: _axial_inflow_velocity --> _00jA
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0505__00jA = (v0594__axial_inflow_velocity**2)
v0505__00jA = (v0505__00jA*_00jz_coeff).reshape((1, 40, 30))

# op _00no_power_combination_eval
# LANG: pressure --> _00np
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0614__00np = (v0613_pressure**1)
v0614__00np = (v0614__00np*_00no_coeff).reshape((1, 1))

# op _00nu_power_combination_eval
# LANG: _00nt --> _00nv
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0617__00nv = (v0616__00nt**1.5)
v0617__00nv = (v0617__00nv*_00nu_coeff).reshape((1, 1))

# op _01dY_arcsin_eval
# LANG: _01dX --> _01dZ
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02169__01dZ = np.arcsin(v02168__01dX)

# op _01eF expand_scalar_eval
# LANG: dynamic_viscosity --> _01eG
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02297_dynamic_viscosity = v02297_dynamic_viscosity.reshape((1,))
v02188__01eG = np.empty((1, 40, 30))
v02188__01eG.fill(v02297_dynamic_viscosity.item())
v02297_dynamic_viscosity = v02297_dynamic_viscosity.reshape((1, 1))

# op _01eI expand_scalar_eval
# LANG: speed_of_sound --> _01eJ
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02300_speed_of_sound = v02300_speed_of_sound.reshape((1,))
v02190__01eJ = np.empty((1, 40, 30))
v02190__01eJ.fill(v02300_speed_of_sound.item())
v02300_speed_of_sound = v02300_speed_of_sound.reshape((1, 1))

# op _01eM_power_combination_eval
# LANG: _01eL, _chord --> _01eN
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02186__01eN = (v02181__01eL**1)*(v02259__chord**1)
v02186__01eN = (v02186__01eN*_01eM_coeff).reshape((1, 40, 30))

# op _01hA_power_combination_eval
# LANG: _01hz --> _01hB
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02268__01hB = (v02267__01hz**1)
v02268__01hB = (v02268__01hB*_01hA_coeff).reshape((1, 40, 30))

# op _01t0_arcsin_eval
# LANG: _01s_ --> _01t1
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02542__01t1 = np.arcsin(v02541__01s_)

# op _01tI expand_scalar_eval
# LANG: dynamic_viscosity --> _01tJ
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02670_dynamic_viscosity = v02670_dynamic_viscosity.reshape((1,))
v02561__01tJ = np.empty((1, 40, 30))
v02561__01tJ.fill(v02670_dynamic_viscosity.item())
v02670_dynamic_viscosity = v02670_dynamic_viscosity.reshape((1, 1))

# op _01tL expand_scalar_eval
# LANG: speed_of_sound --> _01tM
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02673_speed_of_sound = v02673_speed_of_sound.reshape((1,))
v02563__01tM = np.empty((1, 40, 30))
v02563__01tM.fill(v02673_speed_of_sound.item())
v02673_speed_of_sound = v02673_speed_of_sound.reshape((1, 1))

# op _01tP_power_combination_eval
# LANG: _01tO, _chord --> _01tQ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02559__01tQ = (v02554__01tO**1)*(v02632__chord**1)
v02559__01tQ = (v02559__01tQ*_01tP_coeff).reshape((1, 40, 30))

# op _01wD_power_combination_eval
# LANG: _01wC --> _01wE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02641__01wE = (v02640__01wC**1)
v02641__01wE = (v02641__01wE*_01wD_coeff).reshape((1, 40, 30))

# op _003S reshape_eval
# LANG: _003R --> chord_profile
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0115_chord_profile = v0114__003R.reshape((40, 1))

# op _003V_single_tensor_sum_with_axis_eval
# LANG: rotor_2_blade_twist --> _003W
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0116__003W = np.sum(v026_rotor_2_blade_twist, axis = (1,)).reshape((40,))

# op _004A_linear_combination_eval
# LANG: _004x, _004z --> _004B
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0133__004B = _004A_constant+1*v0132__004x+1*v0134__004z

# op _008n_power_combination_eval
# LANG: temperature, _008m --> density
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0242_density = (v0241__008m**1)*(v0237_temperature**-1)
v0242_density = (v0242_density*_008n_coeff).reshape((1, 1))

# op _008t_power_combination_eval
# LANG: _008s --> _008u
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0245__008u = (v0244__008s**1)
v0245__008u = (v0245__008u*_008t_coeff).reshape((1, 1))

# op _00iV reshape_eval
# LANG: _00iU --> chord_profile
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0488_chord_profile = v0487__00iU.reshape((40, 1))

# op _00iY_single_tensor_sum_with_axis_eval
# LANG: rotor_1_blade_twist --> _00iZ
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0489__00iZ = np.sum(v016_rotor_1_blade_twist, axis = (1,)).reshape((40,))

# op _00jD_linear_combination_eval
# LANG: _00jA, _00jC --> _00jE
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0506__00jE = _00jD_constant+1*v0505__00jA+1*v0507__00jC

# op _00nq_power_combination_eval
# LANG: temperature, _00np --> density
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0615_density = (v0614__00np**1)*(v0610_temperature**-1)
v0615_density = (v0615_density*_00nq_coeff).reshape((1, 1))

# op _00nw_power_combination_eval
# LANG: _00nv --> _00nx
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0618__00nx = (v0617__00nv**1)
v0618__00nx = (v0618__00nx*_00nw_coeff).reshape((1, 1))

# op _01d__linear_combination_eval
# LANG: _01dZ --> twist_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02170_twist_profile = _01d__constant+1*v02169__01dZ

# op _01eO_power_combination_eval
# LANG: _01eN, _01eG --> Re
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02187_Re = (v02186__01eN**1)*(v02188__01eG**-1)
v02187_Re = (v02187_Re*_01eO_coeff).reshape((1, 40, 30))

# op _01eQ_power_combination_eval
# LANG: _01eA, _01eJ --> mach_number
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02189_mach_number = (v02185__01eA**1)*(v02190__01eJ**-1)
v02189_mach_number = (v02189_mach_number*_01eQ_coeff).reshape((1, 40, 30))

# op _01hC_power_combination_eval
# LANG: _01hB --> _01hD
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02269__01hD = (v02268__01hB**1)
v02269__01hD = (v02269__01hD*_01hC_coeff).reshape((1, 40, 30))

# op _01t2_linear_combination_eval
# LANG: _01t1 --> twist_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02543_twist_profile = _01t2_constant+1*v02542__01t1

# op _01tR_power_combination_eval
# LANG: _01tQ, _01tJ --> Re
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02560_Re = (v02559__01tQ**1)*(v02561__01tJ**-1)
v02560_Re = (v02560_Re*_01tR_coeff).reshape((1, 40, 30))

# op _01tT_power_combination_eval
# LANG: _01tD, _01tM --> mach_number
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02562_mach_number = (v02558__01tD**1)*(v02563__01tM**-1)
v02562_mach_number = (v02562_mach_number*_01tT_coeff).reshape((1, 40, 30))

# op _01wF_power_combination_eval
# LANG: _01wE --> _01wG
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02642__01wG = (v02641__01wE**1)
v02642__01wG = (v02642__01wG*_01wF_coeff).reshape((1, 40, 30))

# op _003X reshape_eval
# LANG: _003W --> _003Y
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0117__003Y = v0116__003W.reshape((40, 1))

# op _004C_power_combination_eval
# LANG: _004B --> _004D
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0135__004D = (v0133__004B**0.5)
v0135__004D = (v0135__004D*_004C_coeff).reshape((1, 40, 30))

# op _004F expand_scalar_eval
# LANG: density --> _004G
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0242_density = v0242_density.reshape((1,))
v0130__004G = np.empty((1, 40, 30))
v0130__004G.fill(v0242_density.item())
v0242_density = v0242_density.reshape((1, 1))

# op _007f expand_array_eval
# LANG: chord_profile --> _chord
# SHAPES: (40,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0115_chord_profile = v0115_chord_profile.reshape((40,))
v0209__chord = np.einsum('b,ac->abc', v0115_chord_profile.reshape((40,)) ,np.ones((1, 30))).reshape((1, 40, 30))
v0115_chord_profile = v0115_chord_profile.reshape((40, 1))

# op _008B_power_combination_eval
# LANG: temperature --> _008C
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0249__008C = (v0237_temperature**1)
v0249__008C = (v0249__008C*_008B_coeff).reshape((1, 1))

# op _008v_power_combination_eval
# LANG: _008u --> _008w
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0246__008w = (v0245__008u**1)
v0246__008w = (v0246__008w*_008v_coeff).reshape((1, 1))

# op _008x_linear_combination_eval
# LANG: temperature --> _008y
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0248__008y = _008x_constant+1*v0237_temperature

# op _00i_ reshape_eval
# LANG: _00iZ --> _00j0
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0490__00j0 = v0489__00iZ.reshape((40, 1))

# op _00jF_power_combination_eval
# LANG: _00jE --> _00jG
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0508__00jG = (v0506__00jE**0.5)
v0508__00jG = (v0508__00jG*_00jF_coeff).reshape((1, 40, 30))

# op _00jI expand_scalar_eval
# LANG: density --> _00jJ
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0615_density = v0615_density.reshape((1,))
v0503__00jJ = np.empty((1, 40, 30))
v0503__00jJ.fill(v0615_density.item())
v0615_density = v0615_density.reshape((1, 1))

# op _00mi expand_array_eval
# LANG: chord_profile --> _chord
# SHAPES: (40,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0488_chord_profile = v0488_chord_profile.reshape((40,))
v0582__chord = np.einsum('b,ac->abc', v0488_chord_profile.reshape((40,)) ,np.ones((1, 30))).reshape((1, 40, 30))
v0488_chord_profile = v0488_chord_profile.reshape((40, 1))

# op _00nA_linear_combination_eval
# LANG: temperature --> _00nB
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0621__00nB = _00nA_constant+1*v0610_temperature

# op _00nE_power_combination_eval
# LANG: temperature --> _00nF
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0622__00nF = (v0610_temperature**1)
v0622__00nF = (v0622__00nF*_00nE_coeff).reshape((1, 1))

# op _00ny_power_combination_eval
# LANG: _00nx --> _00nz
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0619__00nz = (v0618__00nx**1)
v0619__00nz = (v0619__00nz*_00ny_coeff).reshape((1, 1))

# op _01eS reshape_eval
# LANG: Re --> Re_ml_input
# SHAPES: (1, 40, 30) --> (1200, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02191_Re_ml_input = v02187_Re.reshape((1200, 1))

# op _01eU reshape_eval
# LANG: mach_number --> mach_number_ml_input
# SHAPES: (1, 40, 30) --> (1200, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02192_mach_number_ml_input = v02189_mach_number.reshape((1200, 1))

# op _01hE_power_combination_eval
# LANG: _radius, _01hD --> _blade_solidity
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_pre_process_model
v02270__blade_solidity = (v02269__01hD**1)*(v02264__radius**-1)
v02270__blade_solidity = (v02270__blade_solidity*_01hE_coeff).reshape((1, 40, 30))

# op _01ha expand_array_eval
# LANG: twist_profile --> _pitch
# SHAPES: (40,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02170_twist_profile = v02170_twist_profile.reshape((40,))
v02258__pitch = np.einsum('b,ac->abc', v02170_twist_profile.reshape((40,)) ,np.ones((1, 30))).reshape((1, 40, 30))
v02170_twist_profile = v02170_twist_profile.reshape((40, 1))

# op _01tV reshape_eval
# LANG: Re --> Re_ml_input
# SHAPES: (1, 40, 30) --> (1200, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02564_Re_ml_input = v02560_Re.reshape((1200, 1))

# op _01tX reshape_eval
# LANG: mach_number --> mach_number_ml_input
# SHAPES: (1, 40, 30) --> (1200, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02565_mach_number_ml_input = v02562_mach_number.reshape((1200, 1))

# op _01wH_power_combination_eval
# LANG: _radius, _01wG --> _blade_solidity
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_pre_process_model
v02643__blade_solidity = (v02642__01wG**1)*(v02637__radius**-1)
v02643__blade_solidity = (v02643__blade_solidity*_01wH_coeff).reshape((1, 40, 30))

# op _01wd expand_array_eval
# LANG: twist_profile --> _pitch
# SHAPES: (40,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02543_twist_profile = v02543_twist_profile.reshape((40,))
v02631__pitch = np.einsum('b,ac->abc', v02543_twist_profile.reshape((40,)) ,np.ones((1, 30))).reshape((1, 40, 30))
v02543_twist_profile = v02543_twist_profile.reshape((40, 1))

# op _003Z_power_combination_eval
# LANG: chord_profile, _003Y --> _003_
# SHAPES: (40, 1), (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0118__003_ = (v0117__003Y**1)*(v0115_chord_profile**-1)
v0118__003_ = (v0118__003_*_003Z_coeff).reshape((40, 1))

# op _004N_power_combination_eval
# LANG: _004G, _004D --> _004O
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0131__004O = (v0130__004G**1)*(v0135__004D**1)
v0131__004O = (v0131__004O*_004N_coeff).reshape((1, 40, 30))

# op _007B_power_combination_eval
# LANG: _chord --> _007C
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0217__007C = (v0209__chord**1)
v0217__007C = (v0217__007C*_007B_coeff).reshape((1, 40, 30))

# op _008D_power_combination_eval
# LANG: _008C --> speed_of_sound
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0250_speed_of_sound = (v0249__008C**0.5)
v0250_speed_of_sound = (v0250_speed_of_sound*_008D_coeff).reshape((1, 1))

# op _008z_power_combination_eval
# LANG: _008w, _008y --> dynamic_viscosity
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.atmosphere_model
v0247_dynamic_viscosity = (v0246__008w**1)*(v0248__008y**-1)
v0247_dynamic_viscosity = (v0247_dynamic_viscosity*_008z_coeff).reshape((1, 1))

# op _00j1_power_combination_eval
# LANG: chord_profile, _00j0 --> _00j2
# SHAPES: (40, 1), (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0491__00j2 = (v0490__00j0**1)*(v0488_chord_profile**-1)
v0491__00j2 = (v0491__00j2*_00j1_coeff).reshape((40, 1))

# op _00jQ_power_combination_eval
# LANG: _00jJ, _00jG --> _00jR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0504__00jR = (v0503__00jJ**1)*(v0508__00jG**1)
v0504__00jR = (v0504__00jR*_00jQ_coeff).reshape((1, 40, 30))

# op _00mE_power_combination_eval
# LANG: _chord --> _00mF
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0590__00mF = (v0582__chord**1)
v0590__00mF = (v0590__00mF*_00mE_coeff).reshape((1, 40, 30))

# op _00nC_power_combination_eval
# LANG: _00nz, _00nB --> dynamic_viscosity
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0620_dynamic_viscosity = (v0619__00nz**1)*(v0621__00nB**-1)
v0620_dynamic_viscosity = (v0620_dynamic_viscosity*_00nC_coeff).reshape((1, 1))

# op _00nG_power_combination_eval
# LANG: _00nF --> speed_of_sound
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.atmosphere_model
v0623_speed_of_sound = (v0622__00nF**0.5)
v0623_speed_of_sound = (v0623_speed_of_sound*_00nG_coeff).reshape((1, 1))

# op _01kR_bracketed_implict_eval
# LANG: Re_ml_input, mach_number_ml_input, X_min, X_max, control_points, _hub_radius, _rotor_radius, _pitch, _radius, _blade_solidity, _axial_inflow_velocity, _tangential_inflow_velocity --> phi_distribution, alpha_ml_input, Cd, Cl
# SHAPES: (1200, 1), (1200, 1), (1200, 35), (1200, 35), (1200, 32), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30) --> (1, 40, 30), (1200, 1), (1200,), (1200,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.phi_bracketed_search_group
_01kR_bracketed.set_guess(initial_guess_v02301_phi_distribution)
_01kR_bracketed_out = _01kR_bracketed.solve(v02270__blade_solidity, v02271__axial_inflow_velocity, v02281__tangential_inflow_velocity, v02264__radius, v02251__rotor_radius, v02250__hub_radius, v02258__pitch, v02191_Re_ml_input, v02192_mach_number_ml_input, v02210_X_max, v02209_X_min, v02211_control_points)
v02301_phi_distribution = _01kR_bracketed_out[0]
v02302_alpha_ml_input = _01kR_bracketed_out[1]
v02303_Cd = _01kR_bracketed_out[2]
v02304_Cl = _01kR_bracketed_out[3]

# op _01zU_bracketed_implict_eval
# LANG: Re_ml_input, mach_number_ml_input, X_min, X_max, control_points, _hub_radius, _rotor_radius, _pitch, _radius, _blade_solidity, _axial_inflow_velocity, _tangential_inflow_velocity --> phi_distribution, alpha_ml_input, Cd, Cl
# SHAPES: (1200, 1), (1200, 1), (1200, 35), (1200, 35), (1200, 32), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30) --> (1, 40, 30), (1200, 1), (1200,), (1200,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.phi_bracketed_search_group
_01zU_bracketed.set_guess(initial_guess_v02674_phi_distribution)
_01zU_bracketed_out = _01zU_bracketed.solve(v02643__blade_solidity, v02644__axial_inflow_velocity, v02654__tangential_inflow_velocity, v02637__radius, v02624__rotor_radius, v02623__hub_radius, v02631__pitch, v02564_Re_ml_input, v02565_mach_number_ml_input, v02583_X_max, v02582_X_min, v02584_control_points)
v02674_phi_distribution = _01zU_bracketed_out[0]
v02675_alpha_ml_input = _01zU_bracketed_out[1]
v02676_Cd = _01zU_bracketed_out[2]
v02677_Cl = _01zU_bracketed_out[3]

# op _0040_arcsin_eval
# LANG: _003_ --> _0041
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0119__0041 = np.arcsin(v0118__003_)

# op _004I expand_scalar_eval
# LANG: dynamic_viscosity --> _004J
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0247_dynamic_viscosity = v0247_dynamic_viscosity.reshape((1,))
v0138__004J = np.empty((1, 40, 30))
v0138__004J.fill(v0247_dynamic_viscosity.item())
v0247_dynamic_viscosity = v0247_dynamic_viscosity.reshape((1, 1))

# op _004L expand_scalar_eval
# LANG: speed_of_sound --> _004M
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0250_speed_of_sound = v0250_speed_of_sound.reshape((1,))
v0140__004M = np.empty((1, 40, 30))
v0140__004M.fill(v0250_speed_of_sound.item())
v0250_speed_of_sound = v0250_speed_of_sound.reshape((1, 1))

# op _004P_power_combination_eval
# LANG: _004O, _chord --> _004Q
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0136__004Q = (v0131__004O**1)*(v0209__chord**1)
v0136__004Q = (v0136__004Q*_004P_coeff).reshape((1, 40, 30))

# op _007D_power_combination_eval
# LANG: _007C --> _007E
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0218__007E = (v0217__007C**1)
v0218__007E = (v0218__007E*_007D_coeff).reshape((1, 40, 30))

# op _00j3_arcsin_eval
# LANG: _00j2 --> _00j4
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0492__00j4 = np.arcsin(v0491__00j2)

# op _00jL expand_scalar_eval
# LANG: dynamic_viscosity --> _00jM
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0620_dynamic_viscosity = v0620_dynamic_viscosity.reshape((1,))
v0511__00jM = np.empty((1, 40, 30))
v0511__00jM.fill(v0620_dynamic_viscosity.item())
v0620_dynamic_viscosity = v0620_dynamic_viscosity.reshape((1, 1))

# op _00jO expand_scalar_eval
# LANG: speed_of_sound --> _00jP
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0623_speed_of_sound = v0623_speed_of_sound.reshape((1,))
v0513__00jP = np.empty((1, 40, 30))
v0513__00jP.fill(v0623_speed_of_sound.item())
v0623_speed_of_sound = v0623_speed_of_sound.reshape((1, 1))

# op _00jS_power_combination_eval
# LANG: _00jR, _chord --> _00jT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0509__00jT = (v0504__00jR**1)*(v0582__chord**1)
v0509__00jT = (v0509__00jT*_00jS_coeff).reshape((1, 40, 30))

# op _00mG_power_combination_eval
# LANG: _00mF --> _00mH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0591__00mH = (v0590__00mF**1)
v0591__00mH = (v0591__00mH*_00mG_coeff).reshape((1, 40, 30))

# op _0042_linear_combination_eval
# LANG: _0041 --> twist_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0120_twist_profile = _0042_constant+1*v0119__0041

# op _004R_power_combination_eval
# LANG: _004Q, _004J --> Re
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0137_Re = (v0136__004Q**1)*(v0138__004J**-1)
v0137_Re = (v0137_Re*_004R_coeff).reshape((1, 40, 30))

# op _004T_power_combination_eval
# LANG: _004D, _004M --> mach_number
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0139_mach_number = (v0135__004D**1)*(v0140__004M**-1)
v0139_mach_number = (v0139_mach_number*_004T_coeff).reshape((1, 40, 30))

# op _007F_power_combination_eval
# LANG: _007E --> _007G
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0219__007G = (v0218__007E**1)
v0219__007G = (v0219__007G*_007F_coeff).reshape((1, 40, 30))

# op _00j5_linear_combination_eval
# LANG: _00j4 --> twist_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0493_twist_profile = _00j5_constant+1*v0492__00j4

# op _00jU_power_combination_eval
# LANG: _00jT, _00jM --> Re
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0510_Re = (v0509__00jT**1)*(v0511__00jM**-1)
v0510_Re = (v0510_Re*_00jU_coeff).reshape((1, 40, 30))

# op _00jW_power_combination_eval
# LANG: _00jG, _00jP --> mach_number
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0512_mach_number = (v0508__00jG**1)*(v0513__00jP**-1)
v0512_mach_number = (v0512_mach_number*_00jW_coeff).reshape((1, 40, 30))

# op _00mI_power_combination_eval
# LANG: _00mH --> _00mJ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0592__00mJ = (v0591__00mH**1)
v0592__00mJ = (v0592__00mJ*_00mI_coeff).reshape((1, 40, 30))

# op _004V reshape_eval
# LANG: Re --> Re_ml_input
# SHAPES: (1, 40, 30) --> (1200, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0141_Re_ml_input = v0137_Re.reshape((1200, 1))

# op _004X reshape_eval
# LANG: mach_number --> mach_number_ml_input
# SHAPES: (1, 40, 30) --> (1200, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0142_mach_number_ml_input = v0139_mach_number.reshape((1200, 1))

# op _007H_power_combination_eval
# LANG: _radius, _007G --> _blade_solidity
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_pre_process_model
v0220__blade_solidity = (v0219__007G**1)*(v0214__radius**-1)
v0220__blade_solidity = (v0220__blade_solidity*_007H_coeff).reshape((1, 40, 30))

# op _007d expand_array_eval
# LANG: twist_profile --> _pitch
# SHAPES: (40,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0120_twist_profile = v0120_twist_profile.reshape((40,))
v0208__pitch = np.einsum('b,ac->abc', v0120_twist_profile.reshape((40,)) ,np.ones((1, 30))).reshape((1, 40, 30))
v0120_twist_profile = v0120_twist_profile.reshape((40, 1))

# op _00jY reshape_eval
# LANG: Re --> Re_ml_input
# SHAPES: (1, 40, 30) --> (1200, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0514_Re_ml_input = v0510_Re.reshape((1200, 1))

# op _00j_ reshape_eval
# LANG: mach_number --> mach_number_ml_input
# SHAPES: (1, 40, 30) --> (1200, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0515_mach_number_ml_input = v0512_mach_number.reshape((1200, 1))

# op _00mK_power_combination_eval
# LANG: _radius, _00mJ --> _blade_solidity
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_pre_process_model
v0593__blade_solidity = (v0592__00mJ**1)*(v0587__radius**-1)
v0593__blade_solidity = (v0593__blade_solidity*_00mK_coeff).reshape((1, 40, 30))

# op _00mg expand_array_eval
# LANG: twist_profile --> _pitch
# SHAPES: (40,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0493_twist_profile = v0493_twist_profile.reshape((40,))
v0581__pitch = np.einsum('b,ac->abc', v0493_twist_profile.reshape((40,)) ,np.ones((1, 30))).reshape((1, 40, 30))
v0493_twist_profile = v0493_twist_profile.reshape((40, 1))

# op _00aU_bracketed_implict_eval
# LANG: Re_ml_input, mach_number_ml_input, X_min, X_max, control_points, _hub_radius, _rotor_radius, _pitch, _radius, _blade_solidity, _axial_inflow_velocity, _tangential_inflow_velocity --> phi_distribution, alpha_ml_input, Cd, Cl
# SHAPES: (1200, 1), (1200, 1), (1200, 35), (1200, 35), (1200, 32), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30) --> (1, 40, 30), (1200, 1), (1200,), (1200,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.phi_bracketed_search_group
_00aU_bracketed.set_guess(initial_guess_v0251_phi_distribution)
_00aU_bracketed_out = _00aU_bracketed.solve(v0220__blade_solidity, v0221__axial_inflow_velocity, v0231__tangential_inflow_velocity, v0214__radius, v0201__rotor_radius, v0200__hub_radius, v0208__pitch, v0141_Re_ml_input, v0142_mach_number_ml_input, v0160_X_max, v0159_X_min, v0161_control_points)
v0251_phi_distribution = _00aU_bracketed_out[0]
v0252_alpha_ml_input = _00aU_bracketed_out[1]
v0253_Cd = _00aU_bracketed_out[2]
v0254_Cl = _00aU_bracketed_out[3]

# op _00pX_bracketed_implict_eval
# LANG: Re_ml_input, mach_number_ml_input, X_min, X_max, control_points, _hub_radius, _rotor_radius, _pitch, _radius, _blade_solidity, _axial_inflow_velocity, _tangential_inflow_velocity --> phi_distribution, alpha_ml_input, Cd, Cl
# SHAPES: (1200, 1), (1200, 1), (1200, 35), (1200, 35), (1200, 32), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30), (1, 40, 30) --> (1, 40, 30), (1200, 1), (1200,), (1200,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.phi_bracketed_search_group
_00pX_bracketed.set_guess(initial_guess_v0624_phi_distribution)
_00pX_bracketed_out = _00pX_bracketed.solve(v0593__blade_solidity, v0594__axial_inflow_velocity, v0604__tangential_inflow_velocity, v0587__radius, v0574__rotor_radius, v0573__hub_radius, v0581__pitch, v0514_Re_ml_input, v0515_mach_number_ml_input, v0533_X_max, v0532_X_min, v0534_control_points)
v0624_phi_distribution = _00pX_bracketed_out[0]
v0625_alpha_ml_input = _00pX_bracketed_out[1]
v0626_Cd = _00pX_bracketed_out[2]
v0627_Cl = _00pX_bracketed_out[3]

# op _01A2_linear_combination_eval
# LANG: _rotor_radius, _radius --> _01A3
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02678__01A3 = _01A2_constant+1*v02624__rotor_radius+-1*v02637__radius

# op _01Ac_linear_combination_eval
# LANG: _hub_radius, _radius --> _01Ad
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02688__01Ad = _01Ac_constant+1*v02637__radius+-1*v02623__hub_radius

# op _01k__linear_combination_eval
# LANG: _rotor_radius, _radius --> _01l0
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02305__01l0 = _01k__constant+1*v02251__rotor_radius+-1*v02264__radius

# op _01l9_linear_combination_eval
# LANG: _hub_radius, _radius --> _01la
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02315__01la = _01l9_constant+1*v02264__radius+-1*v02250__hub_radius

# op _01A4_power_combination_eval
# LANG: _01A3 --> _01A5
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02679__01A5 = (v02678__01A3**1)
v02679__01A5 = (v02679__01A5*_01A4_coeff).reshape((1, 40, 30))

# op _01Ae_power_combination_eval
# LANG: _01Ad --> _01Af
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02689__01Af = (v02688__01Ad**1)
v02689__01Af = (v02689__01Af*_01Ae_coeff).reshape((1, 40, 30))

# op _01l1_power_combination_eval
# LANG: _01l0 --> _01l2
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02306__01l2 = (v02305__01l0**1)
v02306__01l2 = (v02306__01l2*_01l1_coeff).reshape((1, 40, 30))

# op _01lb_power_combination_eval
# LANG: _01la --> _01lc
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02316__01lc = (v02315__01la**1)
v02316__01lc = (v02316__01lc*_01lb_coeff).reshape((1, 40, 30))

# op _01A6_power_combination_eval
# LANG: _01A5, _radius --> _01A7
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02680__01A7 = (v02679__01A5**1)*(v02637__radius**-1)
v02680__01A7 = (v02680__01A7*_01A6_coeff).reshape((1, 40, 30))

# op _01A8_sin_eval
# LANG: phi_distribution --> _01A9
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02682__01A9 = np.sin(v02674_phi_distribution)

# op _01Ag_power_combination_eval
# LANG: _01Af, _hub_radius --> _01Ah
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02690__01Ah = (v02689__01Af**1)*(v02623__hub_radius**-1)
v02690__01Ah = (v02690__01Ah*_01Ag_coeff).reshape((1, 40, 30))

# op _01Ai_sin_eval
# LANG: phi_distribution --> _01Aj
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02692__01Aj = np.sin(v02674_phi_distribution)

# op _01l3_power_combination_eval
# LANG: _01l2, _radius --> _01l4
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02307__01l4 = (v02306__01l2**1)*(v02264__radius**-1)
v02307__01l4 = (v02307__01l4*_01l3_coeff).reshape((1, 40, 30))

# op _01l5_sin_eval
# LANG: phi_distribution --> _01l6
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02309__01l6 = np.sin(v02301_phi_distribution)

# op _01ld_power_combination_eval
# LANG: _01lc, _hub_radius --> _01le
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02317__01le = (v02316__01lc**1)*(v02250__hub_radius**-1)
v02317__01le = (v02317__01le*_01ld_coeff).reshape((1, 40, 30))

# op _01lf_sin_eval
# LANG: phi_distribution --> _01lg
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02319__01lg = np.sin(v02301_phi_distribution)

# op _00b2_linear_combination_eval
# LANG: _rotor_radius, _radius --> _00b3
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0255__00b3 = _00b2_constant+1*v0201__rotor_radius+-1*v0214__radius

# op _00bc_linear_combination_eval
# LANG: _hub_radius, _radius --> _00bd
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0265__00bd = _00bc_constant+1*v0214__radius+-1*v0200__hub_radius

# op _00q5_linear_combination_eval
# LANG: _rotor_radius, _radius --> _00q6
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0628__00q6 = _00q5_constant+1*v0574__rotor_radius+-1*v0587__radius

# op _00qf_linear_combination_eval
# LANG: _hub_radius, _radius --> _00qg
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0638__00qg = _00qf_constant+1*v0587__radius+-1*v0573__hub_radius

# op _01Aa_power_combination_eval
# LANG: _01A7, _01A9 --> _01Ab
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02681__01Ab = (v02680__01A7**1)*(v02682__01A9**-1)
v02681__01Ab = (v02681__01Ab*_01Aa_coeff).reshape((1, 40, 30))

# op _01Ak_power_combination_eval
# LANG: _01Ah, _01Aj --> _01Al
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02691__01Al = (v02690__01Ah**1)*(v02692__01Aj**-1)
v02691__01Al = (v02691__01Al*_01Ak_coeff).reshape((1, 40, 30))

# op _01l7_power_combination_eval
# LANG: _01l4, _01l6 --> _01l8
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02308__01l8 = (v02307__01l4**1)*(v02309__01l6**-1)
v02308__01l8 = (v02308__01l8*_01l7_coeff).reshape((1, 40, 30))

# op _01lh_power_combination_eval
# LANG: _01le, _01lg --> _01li
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02318__01li = (v02317__01le**1)*(v02319__01lg**-1)
v02318__01li = (v02318__01li*_01lh_coeff).reshape((1, 40, 30))

# op _00C9_power_combination_eval
# LANG: rpm --> _00Ca
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0531_rpm = v0531_rpm.reshape((1,))
v01006__00Ca = (v0531_rpm**1)
v01006__00Ca = (v01006__00Ca*_00C9_coeff).reshape((1,))
v0531_rpm = v0531_rpm.reshape((1, 1))

# op _00VK_power_combination_eval
# LANG: rpm --> _00VL
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v0158_rpm = v0158_rpm.reshape((1,))
v01602__00VL = (v0158_rpm**1)
v01602__00VL = (v01602__00VL*_00VK_coeff).reshape((1,))
v0158_rpm = v0158_rpm.reshape((1, 1))

# op _00b4_power_combination_eval
# LANG: _00b3 --> _00b5
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0256__00b5 = (v0255__00b3**1)
v0256__00b5 = (v0256__00b5*_00b4_coeff).reshape((1, 40, 30))

# op _00be_power_combination_eval
# LANG: _00bd --> _00bf
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0266__00bf = (v0265__00bd**1)
v0266__00bf = (v0266__00bf*_00be_coeff).reshape((1, 40, 30))

# op _00q7_power_combination_eval
# LANG: _00q6 --> _00q8
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0629__00q8 = (v0628__00q6**1)
v0629__00q8 = (v0629__00q8*_00q7_coeff).reshape((1, 40, 30))

# op _00qh_power_combination_eval
# LANG: _00qg --> _00qi
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0639__00qi = (v0638__00qg**1)
v0639__00qi = (v0639__00qi*_00qh_coeff).reshape((1, 40, 30))

# op _01Am_linear_combination_eval
# LANG: _01Ab --> _01An
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02683__01An = _01Am_constant+-1*v02681__01Ab

# op _01Au_linear_combination_eval
# LANG: _01Al --> _01Av
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02693__01Av = _01Au_constant+-1*v02691__01Al

# op _01lj_linear_combination_eval
# LANG: _01l8 --> _01lk
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02310__01lk = _01lj_constant+-1*v02308__01l8

# op _01lr_linear_combination_eval
# LANG: _01li --> _01ls
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02320__01ls = _01lr_constant+-1*v02318__01li

# op _00Cb_power_combination_eval
# LANG: _00Ca --> _00Cc
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01007__00Cc = (v01006__00Ca**1)
v01007__00Cc = (v01007__00Cc*_00Cb_coeff).reshape((1,))

# op _00Q__power_combination_eval
# LANG: rotor_2_disk_in_plane_1 --> _00R0
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((3,))
v01446__00R0 = (v018_rotor_2_disk_in_plane_1**1)
v01446__00R0 = (v01446__00R0*_00Q__coeff).reshape((3,))
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((1, 3))

# op _00VM_power_combination_eval
# LANG: _00VL --> _00VN
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01603__00VN = (v01602__00VL**1)
v01603__00VN = (v01603__00VN*_00VM_coeff).reshape((1,))

# op _00b6_power_combination_eval
# LANG: _00b5, _radius --> _00b7
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0257__00b7 = (v0256__00b5**1)*(v0214__radius**-1)
v0257__00b7 = (v0257__00b7*_00b6_coeff).reshape((1, 40, 30))

# op _00b8_sin_eval
# LANG: phi_distribution --> _00b9
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0259__00b9 = np.sin(v0251_phi_distribution)

# op _00bg_power_combination_eval
# LANG: _00bf, _hub_radius --> _00bh
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0267__00bh = (v0266__00bf**1)*(v0200__hub_radius**-1)
v0267__00bh = (v0267__00bh*_00bg_coeff).reshape((1, 40, 30))

# op _00bi_sin_eval
# LANG: phi_distribution --> _00bj
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0269__00bj = np.sin(v0251_phi_distribution)

# op _00q9_power_combination_eval
# LANG: _00q8, _radius --> _00qa
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0630__00qa = (v0629__00q8**1)*(v0587__radius**-1)
v0630__00qa = (v0630__00qa*_00q9_coeff).reshape((1, 40, 30))

# op _00qb_sin_eval
# LANG: phi_distribution --> _00qc
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0632__00qc = np.sin(v0624_phi_distribution)

# op _00qj_power_combination_eval
# LANG: _00qi, _hub_radius --> _00qk
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0640__00qk = (v0639__00qi**1)*(v0573__hub_radius**-1)
v0640__00qk = (v0640__00qk*_00qj_coeff).reshape((1, 40, 30))

# op _00ql_sin_eval
# LANG: phi_distribution --> _00qm
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0642__00qm = np.sin(v0624_phi_distribution)

# op _00xp_power_combination_eval
# LANG: rotor_1_disk_in_plane_1 --> _00xq
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((3,))
v0850__00xq = (v08_rotor_1_disk_in_plane_1**1)
v0850__00xq = (v0850__00xq*_00xp_coeff).reshape((3,))
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((1, 3))

# op _01Ao exp_eval
# LANG: _01An --> _01Ap
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02684__01Ap = np.exp(v02683__01An)

# op _01Aw exp_eval
# LANG: _01Av --> _01Ax
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02694__01Ax = np.exp(v02693__01Av)

# op _01ll exp_eval
# LANG: _01lk --> _01lm
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02311__01lm = np.exp(v02310__01lk)

# op _01lt exp_eval
# LANG: _01ls --> _01lu
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02321__01lu = np.exp(v02320__01ls)

# op _00Cd_power_combination_eval
# LANG: _00Cc --> _00Ce
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01008__00Ce = (v01007__00Cc**1)
v01008__00Ce = (v01008__00Ce*_00Cd_coeff).reshape((1,))

# op _00R7 pnorm_eval
# LANG: _00R0 --> _00R8
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01447__00R8 = np.linalg.norm(v01446__00R0.flatten(), ord=2)

# op _00Rc pnorm_axis_eval
# LANG: rotor_2_blade_chord_length --> _00Rd
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01449__00Rd = np.sum(v024_rotor_2_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _00VO_power_combination_eval
# LANG: _00VN --> _00VP
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01604__00VP = (v01603__00VN**1)
v01604__00VP = (v01604__00VP*_00VO_coeff).reshape((1,))

# op _00ba_power_combination_eval
# LANG: _00b7, _00b9 --> _00bb
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0258__00bb = (v0257__00b7**1)*(v0259__00b9**-1)
v0258__00bb = (v0258__00bb*_00ba_coeff).reshape((1, 40, 30))

# op _00bk_power_combination_eval
# LANG: _00bh, _00bj --> _00bl
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0268__00bl = (v0267__00bh**1)*(v0269__00bj**-1)
v0268__00bl = (v0268__00bl*_00bk_coeff).reshape((1, 40, 30))

# op _00qd_power_combination_eval
# LANG: _00qa, _00qc --> _00qe
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0631__00qe = (v0630__00qa**1)*(v0632__00qc**-1)
v0631__00qe = (v0631__00qe*_00qd_coeff).reshape((1, 40, 30))

# op _00qn_power_combination_eval
# LANG: _00qk, _00qm --> _00qo
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0641__00qo = (v0640__00qk**1)*(v0642__00qm**-1)
v0641__00qo = (v0641__00qo*_00qn_coeff).reshape((1, 40, 30))

# op _00xC pnorm_axis_eval
# LANG: rotor_1_blade_chord_length --> _00xD
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0853__00xD = np.sum(v014_rotor_1_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _00xx pnorm_eval
# LANG: _00xq --> _00xy
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0851__00xy = np.linalg.norm(v0850__00xq.flatten(), ord=2)

# op _01Aq arccos_eval
# LANG: _01Ap --> _01Ar
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02685__01Ar = np.arccos(v02684__01Ap)

# op _01Ay arccos_eval
# LANG: _01Ax --> _01Az
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02695__01Az = np.arccos(v02694__01Ax)

# op _01ln arccos_eval
# LANG: _01lm --> _01lo
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02312__01lo = np.arccos(v02311__01lm)

# op _01lv arccos_eval
# LANG: _01lu --> _01lw
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02322__01lw = np.arccos(v02321__01lu)

# op _00CE expand_array_eval
# LANG: nondim_sectional_radius --> _00CF
# SHAPES: (40,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0998__00CF = np.einsum('d,abce->abcde', v0997_nondim_sectional_radius.reshape((40,)) ,np.ones((1, 2, 3, 11))).reshape((1, 2, 3, 40, 11))

# op _00CG expand_scalar_eval
# LANG: _00Ce --> _00CH
# SHAPES: (1,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01009__00CH = np.empty((1, 2, 3, 40, 11))
v01009__00CH.fill(v01008__00Ce.item())

# op _00R9_power_combination_eval
# LANG: _00R8 --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01448_propeller_radius = (v01447__00R8**1)
v01448_propeller_radius = (v01448_propeller_radius*_00R9_coeff).reshape((1,))

# op _00Re reshape_eval
# LANG: _00Rd --> _00Rf
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01450__00Rf = v01449__00Rd.reshape((40, 1))

# op _00We expand_array_eval
# LANG: nondim_sectional_radius --> _00Wf
# SHAPES: (40,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01594__00Wf = np.einsum('d,abce->abcde', v01593_nondim_sectional_radius.reshape((40,)) ,np.ones((1, 2, 3, 11))).reshape((1, 2, 3, 40, 11))

# op _00Wg expand_scalar_eval
# LANG: _00VP --> _00Wh
# SHAPES: (1,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01605__00Wh = np.empty((1, 2, 3, 40, 11))
v01605__00Wh.fill(v01604__00VP.item())

# op _00bm_linear_combination_eval
# LANG: _00bb --> _00bn
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0260__00bn = _00bm_constant+-1*v0258__00bb

# op _00bu_linear_combination_eval
# LANG: _00bl --> _00bv
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0270__00bv = _00bu_constant+-1*v0268__00bl

# op _00qp_linear_combination_eval
# LANG: _00qe --> _00qq
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0633__00qq = _00qp_constant+-1*v0631__00qe

# op _00qx_linear_combination_eval
# LANG: _00qo --> _00qy
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0643__00qy = _00qx_constant+-1*v0641__00qo

# op _00xE reshape_eval
# LANG: _00xD --> _00xF
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0854__00xF = v0853__00xD.reshape((40, 1))

# op _00xz_power_combination_eval
# LANG: _00xy --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0852_propeller_radius = (v0851__00xy**1)
v0852_propeller_radius = (v0852_propeller_radius*_00xz_coeff).reshape((1,))

# op _01AA_power_combination_eval
# LANG: _01Az --> _01AB
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02696__01AB = (v02695__01Az**1)
v02696__01AB = (v02696__01AB*_01AA_coeff).reshape((1, 40, 30))

# op _01As_power_combination_eval
# LANG: _01Ar --> _01At
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02686__01At = (v02685__01Ar**1)
v02686__01At = (v02686__01At*_01As_coeff).reshape((1, 40, 30))

# op _01B8_sin_eval
# LANG: phi_distribution --> _01B9
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02711__01B9 = np.sin(v02674_phi_distribution)

# op _01Bc_cos_eval
# LANG: phi_distribution --> _01Bd
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02714__01Bd = np.cos(v02674_phi_distribution)

# op _01lp_power_combination_eval
# LANG: _01lo --> _01lq
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02313__01lq = (v02312__01lo**1)
v02313__01lq = (v02313__01lq*_01lp_coeff).reshape((1, 40, 30))

# op _01lx_power_combination_eval
# LANG: _01lw --> _01ly
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02323__01ly = (v02322__01lw**1)
v02323__01ly = (v02323__01ly*_01lx_coeff).reshape((1, 40, 30))

# op _01m5_sin_eval
# LANG: phi_distribution --> _01m6
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02338__01m6 = np.sin(v02301_phi_distribution)

# op _01m9_cos_eval
# LANG: phi_distribution --> _01ma
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02341__01ma = np.cos(v02301_phi_distribution)

# op _00CI expand_scalar_eval
# LANG: propeller_radius --> _00CJ
# SHAPES: (1,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01018__00CJ = np.empty((1, 2, 3, 40, 11))
v01018__00CJ.fill(v0852_propeller_radius.item())

# op _00CS_decompose_eval
# LANG: _00CF --> _00CT
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01016__00CT = ((v0998__00CF.flatten())[src_indices__00CT__00CS]).reshape((1, 2, 3, 40, 10))

# op _00CU_decompose_eval
# LANG: _00CH --> _00CV
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01010__00CV = ((v01009__00CH.flatten())[src_indices__00CV__00CU]).reshape((1, 2, 3, 40, 10))

# op _00Rg_power_combination_eval
# LANG: _00Rf --> chord_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01451_chord_profile = (v01450__00Rf**1)
v01451_chord_profile = (v01451_chord_profile*_00Rg_coeff).reshape((40, 1))

# op _00Wi expand_scalar_eval
# LANG: propeller_radius --> _00Wj
# SHAPES: (1,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01614__00Wj = np.empty((1, 2, 3, 40, 11))
v01614__00Wj.fill(v01448_propeller_radius.item())

# op _00Ws_decompose_eval
# LANG: _00Wf --> _00Wt
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01612__00Wt = ((v01594__00Wf.flatten())[src_indices__00Wt__00Ws]).reshape((1, 2, 3, 40, 10))

# op _00Wu_decompose_eval
# LANG: _00Wh --> _00Wv
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01606__00Wv = ((v01605__00Wh.flatten())[src_indices__00Wv__00Wu]).reshape((1, 2, 3, 40, 10))

# op _00bo exp_eval
# LANG: _00bn --> _00bp
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0261__00bp = np.exp(v0260__00bn)

# op _00bw exp_eval
# LANG: _00bv --> _00bx
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0271__00bx = np.exp(v0270__00bv)

# op _00qr exp_eval
# LANG: _00qq --> _00qs
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0634__00qs = np.exp(v0633__00qq)

# op _00qz exp_eval
# LANG: _00qy --> _00qA
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0644__00qA = np.exp(v0643__00qy)

# op _00xG_power_combination_eval
# LANG: _00xF --> chord_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0855_chord_profile = (v0854__00xF**1)
v0855_chord_profile = (v0855_chord_profile*_00xG_coeff).reshape((40, 1))

# op _01AC_power_combination_eval
# LANG: _01At, _01AB --> prandtl_loss_factor
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.prandtl_loss_factor_model
v02687_prandtl_loss_factor = (v02686__01At**1)*(v02696__01AB**1)
v02687_prandtl_loss_factor = (v02687_prandtl_loss_factor*_01AC_coeff).reshape((1, 40, 30))

# op _01AZ_cos_eval
# LANG: phi_distribution --> _01A_
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02718__01A_ = np.cos(v02674_phi_distribution)

# op _01B2_sin_eval
# LANG: phi_distribution --> _01B3
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02721__01B3 = np.sin(v02674_phi_distribution)

# op _01Ba_power_combination_eval
# LANG: _01B9, Cl --> _01Bb
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02677_Cl = v02677_Cl.reshape((1, 40, 30))
v02710__01Bb = (v02677_Cl**1)*(v02711__01B9**1)
v02710__01Bb = (v02710__01Bb*_01Ba_coeff).reshape((1, 40, 30))
v02677_Cl = v02677_Cl.reshape((1200,))

# op _01Be_power_combination_eval
# LANG: _01Bd, Cd --> _01Bf
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02676_Cd = v02676_Cd.reshape((1, 40, 30))
v02713__01Bf = (v02676_Cd**1)*(v02714__01Bd**1)
v02713__01Bf = (v02713__01Bf*_01Be_coeff).reshape((1, 40, 30))
v02676_Cd = v02676_Cd.reshape((1200,))

# op _01Cj_power_combination_eval
# LANG: phi_distribution --> _01Ck
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02737__01Ck = (v02674_phi_distribution**1)
v02737__01Ck = (v02737__01Ck*_01Cj_coeff).reshape((1, 40, 30))

# op _01lW_cos_eval
# LANG: phi_distribution --> _01lX
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02345__01lX = np.cos(v02301_phi_distribution)

# op _01l__sin_eval
# LANG: phi_distribution --> _01m0
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02348__01m0 = np.sin(v02301_phi_distribution)

# op _01lz_power_combination_eval
# LANG: _01lq, _01ly --> prandtl_loss_factor
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.prandtl_loss_factor_model
v02314_prandtl_loss_factor = (v02313__01lq**1)*(v02323__01ly**1)
v02314_prandtl_loss_factor = (v02314_prandtl_loss_factor*_01lz_coeff).reshape((1, 40, 30))

# op _01m7_power_combination_eval
# LANG: _01m6, Cl --> _01m8
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02304_Cl = v02304_Cl.reshape((1, 40, 30))
v02337__01m8 = (v02304_Cl**1)*(v02338__01m6**1)
v02337__01m8 = (v02337__01m8*_01m7_coeff).reshape((1, 40, 30))
v02304_Cl = v02304_Cl.reshape((1200,))

# op _01mb_power_combination_eval
# LANG: _01ma, Cd --> _01mc
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02303_Cd = v02303_Cd.reshape((1, 40, 30))
v02340__01mc = (v02303_Cd**1)*(v02341__01ma**1)
v02340__01mc = (v02340__01mc*_01mb_coeff).reshape((1, 40, 30))
v02303_Cd = v02303_Cd.reshape((1200,))

# op _01ng_power_combination_eval
# LANG: phi_distribution --> _01nh
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02364__01nh = (v02301_phi_distribution**1)
v02364__01nh = (v02364__01nh*_01ng_coeff).reshape((1, 40, 30))

# op _00CM expand_array_eval
# LANG: chord_profile --> _00CN
# SHAPES: (40,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0855_chord_profile = v0855_chord_profile.reshape((40,))
v01012__00CN = np.einsum('d,abce->abcde', v0855_chord_profile.reshape((40,)) ,np.ones((1, 2, 3, 11))).reshape((1, 2, 3, 40, 11))
v0855_chord_profile = v0855_chord_profile.reshape((40, 1))

# op _00CW_decompose_eval
# LANG: _00CJ --> _00CX
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01019__00CX = ((v01018__00CJ.flatten())[src_indices__00CX__00CW]).reshape((1, 2, 3, 40, 10))

# op _00Dw_decompose_eval
# LANG: lam_var --> _00Dx
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01004__00Dx = ((v01003_lam_var.flatten())[src_indices__00Dx__00Dw]).reshape((1, 2, 3, 40, 10))

# op _00Dy_power_combination_eval
# LANG: _00CV, _00CT --> _00Dz
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01015__00Dz = (v01010__00CV**1)*(v01016__00CT**1)
v01015__00Dz = (v01015__00Dz*_00Dy_coeff).reshape((1, 2, 3, 40, 10))

# op _00Wm expand_array_eval
# LANG: chord_profile --> _00Wn
# SHAPES: (40,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01451_chord_profile = v01451_chord_profile.reshape((40,))
v01608__00Wn = np.einsum('d,abce->abcde', v01451_chord_profile.reshape((40,)) ,np.ones((1, 2, 3, 11))).reshape((1, 2, 3, 40, 11))
v01451_chord_profile = v01451_chord_profile.reshape((40, 1))

# op _00Ww_decompose_eval
# LANG: _00Wj --> _00Wx
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01615__00Wx = ((v01614__00Wj.flatten())[src_indices__00Wx__00Ww]).reshape((1, 2, 3, 40, 10))

# op _00X6_decompose_eval
# LANG: lam_var --> _00X7
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01600__00X7 = ((v01599_lam_var.flatten())[src_indices__00X7__00X6]).reshape((1, 2, 3, 40, 10))

# op _00X8_power_combination_eval
# LANG: _00Wv, _00Wt --> _00X9
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01611__00X9 = (v01606__00Wv**1)*(v01612__00Wt**1)
v01611__00X9 = (v01611__00X9*_00X8_coeff).reshape((1, 2, 3, 40, 10))

# op _00bq arccos_eval
# LANG: _00bp --> _00br
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0262__00br = np.arccos(v0261__00bp)

# op _00by arccos_eval
# LANG: _00bx --> _00bz
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0272__00bz = np.arccos(v0271__00bx)

# op _00qB arccos_eval
# LANG: _00qA --> _00qC
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0645__00qC = np.arccos(v0644__00qA)

# op _00qt arccos_eval
# LANG: _00qs --> _00qu
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0635__00qu = np.arccos(v0634__00qs)

# op _01B0_power_combination_eval
# LANG: _01A_, Cl --> _01B1
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02677_Cl = v02677_Cl.reshape((1, 40, 30))
v02717__01B1 = (v02677_Cl**1)*(v02718__01A_**1)
v02717__01B1 = (v02717__01B1*_01B0_coeff).reshape((1, 40, 30))
v02677_Cl = v02677_Cl.reshape((1200,))

# op _01B4_power_combination_eval
# LANG: _01B3, Cd --> _01B5
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02676_Cd = v02676_Cd.reshape((1, 40, 30))
v02720__01B5 = (v02676_Cd**1)*(v02721__01B3**1)
v02720__01B5 = (v02720__01B5*_01B4_coeff).reshape((1, 40, 30))
v02676_Cd = v02676_Cd.reshape((1200,))

# op _01BU_power_combination_eval
# LANG: prandtl_loss_factor --> _01BV
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02724__01BV = (v02687_prandtl_loss_factor**1)
v02724__01BV = (v02724__01BV*_01BU_coeff).reshape((1, 40, 30))

# op _01BW_sin_eval
# LANG: phi_distribution --> _01BX
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02726__01BX = np.sin(v02674_phi_distribution)

# op _01Bg_linear_combination_eval
# LANG: _01Bb, _01Bf --> _01Bh
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02712__01Bh = _01Bg_constant+1*v02710__01Bb+1*v02713__01Bf

# op _01Cb_power_combination_eval
# LANG: _tangential_inflow_velocity --> _01Cc
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02731__01Cc = (v02654__tangential_inflow_velocity**1)
v02731__01Cc = (v02731__01Cc*_01Cb_coeff).reshape((1, 40, 30))

# op _01Ch_power_combination_eval
# LANG: prandtl_loss_factor --> _01Ci
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02735__01Ci = (v02687_prandtl_loss_factor**1)
v02735__01Ci = (v02735__01Ci*_01Ch_coeff).reshape((1, 40, 30))

# op _01Cl_sin_eval
# LANG: _01Ck --> _01Cm
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02738__01Cm = np.sin(v02737__01Ck)

# op _01lY_power_combination_eval
# LANG: _01lX, Cl --> _01lZ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02304_Cl = v02304_Cl.reshape((1, 40, 30))
v02344__01lZ = (v02304_Cl**1)*(v02345__01lX**1)
v02344__01lZ = (v02344__01lZ*_01lY_coeff).reshape((1, 40, 30))
v02304_Cl = v02304_Cl.reshape((1200,))

# op _01m1_power_combination_eval
# LANG: _01m0, Cd --> _01m2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02303_Cd = v02303_Cd.reshape((1, 40, 30))
v02347__01m2 = (v02303_Cd**1)*(v02348__01m0**1)
v02347__01m2 = (v02347__01m2*_01m1_coeff).reshape((1, 40, 30))
v02303_Cd = v02303_Cd.reshape((1200,))

# op _01mR_power_combination_eval
# LANG: prandtl_loss_factor --> _01mS
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02351__01mS = (v02314_prandtl_loss_factor**1)
v02351__01mS = (v02351__01mS*_01mR_coeff).reshape((1, 40, 30))

# op _01mT_sin_eval
# LANG: phi_distribution --> _01mU
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02353__01mU = np.sin(v02301_phi_distribution)

# op _01md_linear_combination_eval
# LANG: _01m8, _01mc --> _01me
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02339__01me = _01md_constant+1*v02337__01m8+1*v02340__01mc

# op _01n8_power_combination_eval
# LANG: _tangential_inflow_velocity --> _01n9
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02358__01n9 = (v02281__tangential_inflow_velocity**1)
v02358__01n9 = (v02358__01n9*_01n8_coeff).reshape((1, 40, 30))

# op _01ne_power_combination_eval
# LANG: prandtl_loss_factor --> _01nf
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02362__01nf = (v02314_prandtl_loss_factor**1)
v02362__01nf = (v02362__01nf*_01ne_coeff).reshape((1, 40, 30))

# op _01ni_sin_eval
# LANG: _01nh --> _01nj
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02365__01nj = np.sin(v02364__01nh)

# op _00C__decompose_eval
# LANG: _00CN --> _00D0
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01013__00D0 = ((v01012__00CN.flatten())[src_indices__00D0__00C_]).reshape((1, 2, 3, 40, 10))

# op _00DA_power_combination_eval
# LANG: _00Dz, _00CX --> _00DB
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01017__00DB = (v01015__00Dz**1)*(v01019__00CX**1)
v01017__00DB = (v01017__00DB*_00DA_coeff).reshape((1, 2, 3, 40, 10))

# op _00DC_power_combination_eval
# LANG: _00Dx, _00CV --> _00DD
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01005__00DD = (v01004__00Dx**1)*(v01010__00CV**1)
v01005__00DD = (v01005__00DD*_00DC_coeff).reshape((1, 2, 3, 40, 10))

# op _00T0_power_combination_eval
# LANG: altitude --> _00T1
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01503__00T1 = (v01502_altitude**1)
v01503__00T1 = (v01503__00T1*_00T0_coeff).reshape((1,))

# op _00WA_decompose_eval
# LANG: _00Wn --> _00WB
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01609__00WB = ((v01608__00Wn.flatten())[src_indices__00WB__00WA]).reshape((1, 2, 3, 40, 10))

# op _00Xa_power_combination_eval
# LANG: _00X9, _00Wx --> _00Xb
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01613__00Xb = (v01611__00X9**1)*(v01615__00Wx**1)
v01613__00Xb = (v01613__00Xb*_00Xa_coeff).reshape((1, 2, 3, 40, 10))

# op _00Xc_power_combination_eval
# LANG: _00X7, _00Wv --> _00Xd
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01601__00Xd = (v01600__00X7**1)*(v01606__00Wv**1)
v01601__00Xd = (v01601__00Xd*_00Xc_coeff).reshape((1, 2, 3, 40, 10))

# op _00bA_power_combination_eval
# LANG: _00bz --> _00bB
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0273__00bB = (v0272__00bz**1)
v0273__00bB = (v0273__00bB*_00bA_coeff).reshape((1, 40, 30))

# op _00bs_power_combination_eval
# LANG: _00br --> _00bt
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0263__00bt = (v0262__00br**1)
v0263__00bt = (v0263__00bt*_00bs_coeff).reshape((1, 40, 30))

# op _00c8_sin_eval
# LANG: phi_distribution --> _00c9
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0288__00c9 = np.sin(v0251_phi_distribution)

# op _00cc_cos_eval
# LANG: phi_distribution --> _00cd
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0291__00cd = np.cos(v0251_phi_distribution)

# op _00qD_power_combination_eval
# LANG: _00qC --> _00qE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0646__00qE = (v0645__00qC**1)
v0646__00qE = (v0646__00qE*_00qD_coeff).reshape((1, 40, 30))

# op _00qv_power_combination_eval
# LANG: _00qu --> _00qw
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0636__00qw = (v0635__00qu**1)
v0636__00qw = (v0636__00qw*_00qv_coeff).reshape((1, 40, 30))

# op _00rb_sin_eval
# LANG: phi_distribution --> _00rc
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0661__00rc = np.sin(v0624_phi_distribution)

# op _00rf_cos_eval
# LANG: phi_distribution --> _00rg
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0664__00rg = np.cos(v0624_phi_distribution)

# op _00zq_power_combination_eval
# LANG: altitude --> _00zr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0907__00zr = (v0906_altitude**1)
v0907__00zr = (v0907__00zr*_00zq_coeff).reshape((1,))

# op _01B6_linear_combination_eval
# LANG: _01B1, _01B5 --> _01B7
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02719__01B7 = _01B6_constant+1*v02717__01B1+-1*v02720__01B5

# op _01BA_power_combination_eval
# LANG: prandtl_loss_factor --> _01BB
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02703__01BB = (v02687_prandtl_loss_factor**1)
v02703__01BB = (v02703__01BB*_01BA_coeff).reshape((1, 40, 30))

# op _01BC_sin_eval
# LANG: phi_distribution --> _01BD
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02705__01BD = np.sin(v02674_phi_distribution)

# op _01BY_power_combination_eval
# LANG: _01BV, _01BX --> _01BZ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02725__01BZ = (v02724__01BV**1)*(v02726__01BX**1)
v02725__01BZ = (v02725__01BZ*_01BY_coeff).reshape((1, 40, 30))

# op _01B__cos_eval
# LANG: phi_distribution --> _01C0
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02728__01C0 = np.cos(v02674_phi_distribution)

# op _01Cd_power_combination_eval
# LANG: _01Cc, _blade_solidity --> _01Ce
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02732__01Ce = (v02731__01Cc**1)*(v02643__blade_solidity**1)
v02732__01Ce = (v02732__01Ce*_01Cd_coeff).reshape((1, 40, 30))

# op _01Cn_power_combination_eval
# LANG: _01Ci, _01Cm --> _01Co
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02736__01Co = (v02735__01Ci**1)*(v02738__01Cm**1)
v02736__01Co = (v02736__01Co*_01Cn_coeff).reshape((1, 40, 30))

# op _01Cp_power_combination_eval
# LANG: _01Bh, _blade_solidity --> _01Cq
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02740__01Cq = (v02643__blade_solidity**1)*(v02712__01Bh**1)
v02740__01Cq = (v02740__01Cq*_01Cp_coeff).reshape((1, 40, 30))

# op _01m3_linear_combination_eval
# LANG: _01lZ, _01m2 --> _01m4
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02346__01m4 = _01m3_constant+1*v02344__01lZ+-1*v02347__01m2

# op _01mV_power_combination_eval
# LANG: _01mS, _01mU --> _01mW
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02352__01mW = (v02351__01mS**1)*(v02353__01mU**1)
v02352__01mW = (v02352__01mW*_01mV_coeff).reshape((1, 40, 30))

# op _01mX_cos_eval
# LANG: phi_distribution --> _01mY
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02355__01mY = np.cos(v02301_phi_distribution)

# op _01mx_power_combination_eval
# LANG: prandtl_loss_factor --> _01my
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02330__01my = (v02314_prandtl_loss_factor**1)
v02330__01my = (v02330__01my*_01mx_coeff).reshape((1, 40, 30))

# op _01mz_sin_eval
# LANG: phi_distribution --> _01mA
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02332__01mA = np.sin(v02301_phi_distribution)

# op _01na_power_combination_eval
# LANG: _01n9, _blade_solidity --> _01nb
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02359__01nb = (v02358__01n9**1)*(v02270__blade_solidity**1)
v02359__01nb = (v02359__01nb*_01na_coeff).reshape((1, 40, 30))

# op _01nk_power_combination_eval
# LANG: _01nf, _01nj --> _01nl
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02363__01nl = (v02362__01nf**1)*(v02365__01nj**1)
v02363__01nl = (v02363__01nl*_01nk_coeff).reshape((1, 40, 30))

# op _01nm_power_combination_eval
# LANG: _01me, _blade_solidity --> _01nn
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02367__01nn = (v02270__blade_solidity**1)*(v02339__01me**1)
v02367__01nn = (v02367__01nn*_01nm_coeff).reshape((1, 40, 30))

# op _00DE_power_combination_eval
# LANG: _00DD, _00D0 --> _00DF
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01011__00DF = (v01005__00DD**1)*(v01013__00D0**1)
v01011__00DF = (v01011__00DF*_00DE_coeff).reshape((1, 2, 3, 40, 10))

# op _00DG_power_combination_eval
# LANG: _00DB --> _00DH
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01020__00DH = (v01017__00DB**1)
v01020__00DH = (v01020__00DH*_00DG_coeff).reshape((1, 2, 3, 40, 10))

# op _00T2_linear_combination_eval
# LANG: _00T1 --> _00T3
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01504__00T3 = _00T2_constant+-1*v01503__00T1

# op _00Xe_power_combination_eval
# LANG: _00Xd, _00WB --> _00Xf
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01607__00Xf = (v01601__00Xd**1)*(v01609__00WB**1)
v01607__00Xf = (v01607__00Xf*_00Xe_coeff).reshape((1, 2, 3, 40, 10))

# op _00Xg_power_combination_eval
# LANG: _00Xb --> _00Xh
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01616__00Xh = (v01613__00Xb**1)
v01616__00Xh = (v01616__00Xh*_00Xg_coeff).reshape((1, 2, 3, 40, 10))

# op _00bC_power_combination_eval
# LANG: _00bt, _00bB --> prandtl_loss_factor
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.prandtl_loss_factor_model
v0264_prandtl_loss_factor = (v0263__00bt**1)*(v0273__00bB**1)
v0264_prandtl_loss_factor = (v0264_prandtl_loss_factor*_00bC_coeff).reshape((1, 40, 30))

# op _00bZ_cos_eval
# LANG: phi_distribution --> _00b_
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0295__00b_ = np.cos(v0251_phi_distribution)

# op _00c2_sin_eval
# LANG: phi_distribution --> _00c3
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0298__00c3 = np.sin(v0251_phi_distribution)

# op _00ca_power_combination_eval
# LANG: _00c9, Cl --> _00cb
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0254_Cl = v0254_Cl.reshape((1, 40, 30))
v0287__00cb = (v0254_Cl**1)*(v0288__00c9**1)
v0287__00cb = (v0287__00cb*_00ca_coeff).reshape((1, 40, 30))
v0254_Cl = v0254_Cl.reshape((1200,))

# op _00ce_power_combination_eval
# LANG: _00cd, Cd --> _00cf
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0253_Cd = v0253_Cd.reshape((1, 40, 30))
v0290__00cf = (v0253_Cd**1)*(v0291__00cd**1)
v0290__00cf = (v0290__00cf*_00ce_coeff).reshape((1, 40, 30))
v0253_Cd = v0253_Cd.reshape((1200,))

# op _00dj_power_combination_eval
# LANG: phi_distribution --> _00dk
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0314__00dk = (v0251_phi_distribution**1)
v0314__00dk = (v0314__00dk*_00dj_coeff).reshape((1, 40, 30))

# op _00qF_power_combination_eval
# LANG: _00qw, _00qE --> prandtl_loss_factor
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.prandtl_loss_factor_model
v0637_prandtl_loss_factor = (v0636__00qw**1)*(v0646__00qE**1)
v0637_prandtl_loss_factor = (v0637_prandtl_loss_factor*_00qF_coeff).reshape((1, 40, 30))

# op _00r1_cos_eval
# LANG: phi_distribution --> _00r2
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0668__00r2 = np.cos(v0624_phi_distribution)

# op _00r5_sin_eval
# LANG: phi_distribution --> _00r6
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0671__00r6 = np.sin(v0624_phi_distribution)

# op _00rd_power_combination_eval
# LANG: _00rc, Cl --> _00re
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0627_Cl = v0627_Cl.reshape((1, 40, 30))
v0660__00re = (v0627_Cl**1)*(v0661__00rc**1)
v0660__00re = (v0660__00re*_00rd_coeff).reshape((1, 40, 30))
v0627_Cl = v0627_Cl.reshape((1200,))

# op _00rh_power_combination_eval
# LANG: _00rg, Cd --> _00ri
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0626_Cd = v0626_Cd.reshape((1, 40, 30))
v0663__00ri = (v0626_Cd**1)*(v0664__00rg**1)
v0663__00ri = (v0663__00ri*_00rh_coeff).reshape((1, 40, 30))
v0626_Cd = v0626_Cd.reshape((1200,))

# op _00sm_power_combination_eval
# LANG: phi_distribution --> _00sn
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0687__00sn = (v0624_phi_distribution**1)
v0687__00sn = (v0687__00sn*_00sm_coeff).reshape((1, 40, 30))

# op _00zs_linear_combination_eval
# LANG: _00zr --> _00zt
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0908__00zt = _00zs_constant+-1*v0907__00zr

# op _01BE_power_combination_eval
# LANG: _01BB, _01BD --> _01BF
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02704__01BF = (v02703__01BB**1)*(v02705__01BD**1)
v02704__01BF = (v02704__01BF*_01BE_coeff).reshape((1, 40, 30))

# op _01BG_cos_eval
# LANG: phi_distribution --> _01BH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02707__01BH = np.cos(v02674_phi_distribution)

# op _01BQ_power_combination_eval
# LANG: _01B7, _blade_solidity --> _01BR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02716__01BR = (v02643__blade_solidity**1)*(v02719__01B7**1)
v02716__01BR = (v02716__01BR*_01BQ_coeff).reshape((1, 40, 30))

# op _01Bq_power_combination_eval
# LANG: prandtl_loss_factor --> _01Br
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02697__01Br = (v02687_prandtl_loss_factor**1)
v02697__01Br = (v02697__01Br*_01Bq_coeff).reshape((1, 40, 30))

# op _01Bu_sin_eval
# LANG: phi_distribution --> _01Bv
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02700__01Bv = np.sin(v02674_phi_distribution)

# op _01C1_power_combination_eval
# LANG: _01BZ, _01C0 --> _01C2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02727__01C2 = (v02725__01BZ**1)*(v02728__01C0**1)
v02727__01C2 = (v02727__01C2*_01C1_coeff).reshape((1, 40, 30))

# op _01C3_power_combination_eval
# LANG: _01Bh, _blade_solidity --> _01C4
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02730__01C4 = (v02643__blade_solidity**1)*(v02712__01Bh**1)
v02730__01C4 = (v02730__01C4*_01C3_coeff).reshape((1, 40, 30))

# op _01Cf_power_combination_eval
# LANG: _01Bh, _01Ce --> _01Cg
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02733__01Cg = (v02732__01Ce**1)*(v02712__01Bh**1)
v02733__01Cg = (v02733__01Cg*_01Cf_coeff).reshape((1, 40, 30))

# op _01Cr_linear_combination_eval
# LANG: _01Co, _01Cq --> _01Cs
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02739__01Cs = _01Cr_constant+1*v02736__01Co+1*v02740__01Cq

# op _01mB_power_combination_eval
# LANG: _01my, _01mA --> _01mC
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02331__01mC = (v02330__01my**1)*(v02332__01mA**1)
v02331__01mC = (v02331__01mC*_01mB_coeff).reshape((1, 40, 30))

# op _01mD_cos_eval
# LANG: phi_distribution --> _01mE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02334__01mE = np.cos(v02301_phi_distribution)

# op _01mN_power_combination_eval
# LANG: _01m4, _blade_solidity --> _01mO
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02343__01mO = (v02270__blade_solidity**1)*(v02346__01m4**1)
v02343__01mO = (v02343__01mO*_01mN_coeff).reshape((1, 40, 30))

# op _01mZ_power_combination_eval
# LANG: _01mW, _01mY --> _01m_
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02354__01m_ = (v02352__01mW**1)*(v02355__01mY**1)
v02354__01m_ = (v02354__01m_*_01mZ_coeff).reshape((1, 40, 30))

# op _01mn_power_combination_eval
# LANG: prandtl_loss_factor --> _01mo
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02324__01mo = (v02314_prandtl_loss_factor**1)
v02324__01mo = (v02324__01mo*_01mn_coeff).reshape((1, 40, 30))

# op _01mr_sin_eval
# LANG: phi_distribution --> _01ms
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02327__01ms = np.sin(v02301_phi_distribution)

# op _01n0_power_combination_eval
# LANG: _01me, _blade_solidity --> _01n1
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02357__01n1 = (v02270__blade_solidity**1)*(v02339__01me**1)
v02357__01n1 = (v02357__01n1*_01n0_coeff).reshape((1, 40, 30))

# op _01nc_power_combination_eval
# LANG: _01me, _01nb --> _01nd
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02360__01nd = (v02359__01nb**1)*(v02339__01me**1)
v02360__01nd = (v02360__01nd*_01nc_coeff).reshape((1, 40, 30))

# op _01no_linear_combination_eval
# LANG: _01nl, _01nn --> _01np
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02366__01np = _01no_constant+1*v02363__01nl+1*v02367__01nn

# op _00DI_power_combination_eval
# LANG: _00DF, _00DH --> _00DJ
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01014__00DJ = (v01011__00DF**1)*(v01020__00DH**-1)
v01014__00DJ = (v01014__00DJ*_00DI_coeff).reshape((1, 2, 3, 40, 10))

# op _00T4_power_combination_eval
# LANG: _00T3 --> _00T5
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01505__00T5 = (v01504__00T3**1)
v01505__00T5 = (v01505__00T5*_00T4_coeff).reshape((1,))

# op _00Xi_power_combination_eval
# LANG: _00Xf, _00Xh --> _00Xj
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01610__00Xj = (v01607__00Xf**1)*(v01616__00Xh**-1)
v01610__00Xj = (v01610__00Xj*_00Xi_coeff).reshape((1, 2, 3, 40, 10))

# op _00c0_power_combination_eval
# LANG: _00b_, Cl --> _00c1
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0254_Cl = v0254_Cl.reshape((1, 40, 30))
v0294__00c1 = (v0254_Cl**1)*(v0295__00b_**1)
v0294__00c1 = (v0294__00c1*_00c0_coeff).reshape((1, 40, 30))
v0254_Cl = v0254_Cl.reshape((1200,))

# op _00c4_power_combination_eval
# LANG: _00c3, Cd --> _00c5
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0253_Cd = v0253_Cd.reshape((1, 40, 30))
v0297__00c5 = (v0253_Cd**1)*(v0298__00c3**1)
v0297__00c5 = (v0297__00c5*_00c4_coeff).reshape((1, 40, 30))
v0253_Cd = v0253_Cd.reshape((1200,))

# op _00cU_power_combination_eval
# LANG: prandtl_loss_factor --> _00cV
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0301__00cV = (v0264_prandtl_loss_factor**1)
v0301__00cV = (v0301__00cV*_00cU_coeff).reshape((1, 40, 30))

# op _00cW_sin_eval
# LANG: phi_distribution --> _00cX
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0303__00cX = np.sin(v0251_phi_distribution)

# op _00cg_linear_combination_eval
# LANG: _00cb, _00cf --> _00ch
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0289__00ch = _00cg_constant+1*v0287__00cb+1*v0290__00cf

# op _00db_power_combination_eval
# LANG: _tangential_inflow_velocity --> _00dc
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0308__00dc = (v0231__tangential_inflow_velocity**1)
v0308__00dc = (v0308__00dc*_00db_coeff).reshape((1, 40, 30))

# op _00dh_power_combination_eval
# LANG: prandtl_loss_factor --> _00di
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0312__00di = (v0264_prandtl_loss_factor**1)
v0312__00di = (v0312__00di*_00dh_coeff).reshape((1, 40, 30))

# op _00dl_sin_eval
# LANG: _00dk --> _00dm
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0315__00dm = np.sin(v0314__00dk)

# op _00r3_power_combination_eval
# LANG: _00r2, Cl --> _00r4
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0627_Cl = v0627_Cl.reshape((1, 40, 30))
v0667__00r4 = (v0627_Cl**1)*(v0668__00r2**1)
v0667__00r4 = (v0667__00r4*_00r3_coeff).reshape((1, 40, 30))
v0627_Cl = v0627_Cl.reshape((1200,))

# op _00r7_power_combination_eval
# LANG: _00r6, Cd --> _00r8
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0626_Cd = v0626_Cd.reshape((1, 40, 30))
v0670__00r8 = (v0626_Cd**1)*(v0671__00r6**1)
v0670__00r8 = (v0670__00r8*_00r7_coeff).reshape((1, 40, 30))
v0626_Cd = v0626_Cd.reshape((1200,))

# op _00rX_power_combination_eval
# LANG: prandtl_loss_factor --> _00rY
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0674__00rY = (v0637_prandtl_loss_factor**1)
v0674__00rY = (v0674__00rY*_00rX_coeff).reshape((1, 40, 30))

# op _00rZ_sin_eval
# LANG: phi_distribution --> _00r_
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0676__00r_ = np.sin(v0624_phi_distribution)

# op _00rj_linear_combination_eval
# LANG: _00re, _00ri --> _00rk
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0662__00rk = _00rj_constant+1*v0660__00re+1*v0663__00ri

# op _00se_power_combination_eval
# LANG: _tangential_inflow_velocity --> _00sf
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0681__00sf = (v0604__tangential_inflow_velocity**1)
v0681__00sf = (v0681__00sf*_00se_coeff).reshape((1, 40, 30))

# op _00sk_power_combination_eval
# LANG: prandtl_loss_factor --> _00sl
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0685__00sl = (v0637_prandtl_loss_factor**1)
v0685__00sl = (v0685__00sl*_00sk_coeff).reshape((1, 40, 30))

# op _00so_sin_eval
# LANG: _00sn --> _00sp
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0688__00sp = np.sin(v0687__00sn)

# op _00zu_power_combination_eval
# LANG: _00zt --> _00zv
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0909__00zv = (v0908__00zt**1)
v0909__00zv = (v0909__00zv*_00zu_coeff).reshape((1,))

# op _01BI_power_combination_eval
# LANG: _01BF, _01BH --> _01BJ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02706__01BJ = (v02704__01BF**1)*(v02707__01BH**1)
v02706__01BJ = (v02706__01BJ*_01BI_coeff).reshape((1, 40, 30))

# op _01BK_power_combination_eval
# LANG: _01Bh, _blade_solidity --> _01BL
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02709__01BL = (v02643__blade_solidity**1)*(v02712__01Bh**1)
v02709__01BL = (v02709__01BL*_01BK_coeff).reshape((1, 40, 30))

# op _01BS_power_combination_eval
# LANG: _01BR, _tangential_inflow_velocity --> _01BT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02722__01BT = (v02716__01BR**1)*(v02654__tangential_inflow_velocity**1)
v02722__01BT = (v02722__01BT*_01BS_coeff).reshape((1, 40, 30))

# op _01Bs_power_combination_eval
# LANG: _01Br, _tangential_inflow_velocity --> _01Bt
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02698__01Bt = (v02697__01Br**1)*(v02654__tangential_inflow_velocity**1)
v02698__01Bt = (v02698__01Bt*_01Bs_coeff).reshape((1, 40, 30))

# op _01Bw_power_combination_eval
# LANG: _01Bv --> _01Bx
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02701__01Bx = (v02700__01Bv**2)
v02701__01Bx = (v02701__01Bx*_01Bw_coeff).reshape((1, 40, 30))

# op _01C5_linear_combination_eval
# LANG: _01C2, _01C4 --> _01C6
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02729__01C6 = _01C5_constant+1*v02727__01C2+1*v02730__01C4

# op _01Ct_power_combination_eval
# LANG: _01Cg, _01Cs --> _ut
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02734__ut = (v02733__01Cg**1)*(v02739__01Cs**-1)
v02734__ut = (v02734__ut*_01Ct_coeff).reshape((1, 40, 30))

# op _01K8 expand_scalar_eval
# LANG: Vx --> _01K9
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02977__01K9 = np.empty((1, 1))
v02977__01K9.fill(v02074_u.item())

# op _01Kb expand_scalar_eval
# LANG: Vy --> _01Kc
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02979__01Kc = np.empty((1, 1))
v02979__01Kc.fill(v02079_v.item())

# op _01Kd expand_scalar_eval
# LANG: Vz --> _01Ke
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02980__01Ke = np.empty((1, 1))
v02980__01Ke.fill(v02083_w.item())

# op _01mF_power_combination_eval
# LANG: _01mC, _01mE --> _01mG
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02333__01mG = (v02331__01mC**1)*(v02334__01mE**1)
v02333__01mG = (v02333__01mG*_01mF_coeff).reshape((1, 40, 30))

# op _01mH_power_combination_eval
# LANG: _01me, _blade_solidity --> _01mI
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02336__01mI = (v02270__blade_solidity**1)*(v02339__01me**1)
v02336__01mI = (v02336__01mI*_01mH_coeff).reshape((1, 40, 30))

# op _01mP_power_combination_eval
# LANG: _01mO, _tangential_inflow_velocity --> _01mQ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02349__01mQ = (v02343__01mO**1)*(v02281__tangential_inflow_velocity**1)
v02349__01mQ = (v02349__01mQ*_01mP_coeff).reshape((1, 40, 30))

# op _01mp_power_combination_eval
# LANG: _01mo, _tangential_inflow_velocity --> _01mq
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02325__01mq = (v02324__01mo**1)*(v02281__tangential_inflow_velocity**1)
v02325__01mq = (v02325__01mq*_01mp_coeff).reshape((1, 40, 30))

# op _01mt_power_combination_eval
# LANG: _01ms --> _01mu
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02328__01mu = (v02327__01ms**2)
v02328__01mu = (v02328__01mu*_01mt_coeff).reshape((1, 40, 30))

# op _01n2_linear_combination_eval
# LANG: _01m_, _01n1 --> _01n3
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02356__01n3 = _01n2_constant+1*v02354__01m_+1*v02357__01n1

# op _01nq_power_combination_eval
# LANG: _01nd, _01np --> _ut
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02361__ut = (v02360__01nd**1)*(v02366__01np**-1)
v02361__ut = (v02361__ut*_01nq_coeff).reshape((1, 40, 30))

# op _020a expand_scalar_eval
# LANG: Vx --> _020b
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03491__020b = np.empty((1, 1))
v03491__020b.fill(v02074_u.item())

# op _020d expand_scalar_eval
# LANG: Vy --> _020e
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03493__020e = np.empty((1, 1))
v03493__020e.fill(v02079_v.item())

# op _020f expand_scalar_eval
# LANG: Vz --> _020g
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03494__020g = np.empty((1, 1))
v03494__020g.fill(v02083_w.item())

# op _000I_sparsematmat_eval
# LANG: design_geometry --> _000J
# SHAPES: (32500, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v021__000J = _000I_sparsematmat_eval_mat@v05_design_geometry

# op _000o_sparsematmat_eval
# LANG: design_geometry --> _000p
# SHAPES: (32500, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v011__000p = _000o_sparsematmat_eval_mat@v05_design_geometry

# op _00D4_decompose_eval
# LANG: phi --> _00D5
# SHAPES: (1, 40, 30) --> (1, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0993__00D5 = ((v0624_phi_distribution.flatten())[src_indices__00D5__00D4]).reshape((1, 40, 1))

# op _00Fq_bessel_eval
# LANG: _00DJ --> _00Fr
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01100__00Fr=_00Fq_bessel_eval(0,v01014__00DJ)

# op _00Fs_bessel_eval
# LANG: _00DJ --> _00Ft
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01102__00Ft=_00Fs_bessel_eval(1,v01014__00DJ)

# op _00T6_linear_combination_eval
# LANG: _00T5 --> temperature
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01506_temperature = _00T6_constant+1*v01505__00T5

# op _00WF_decompose_eval
# LANG: phi --> _00WG
# SHAPES: (1, 40, 30) --> (1, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01589__00WG = ((v0251_phi_distribution.flatten())[src_indices__00WG__00WF]).reshape((1, 40, 1))

# op _00Z0_bessel_eval
# LANG: _00Xj --> _00Z1
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01696__00Z1=_00Z0_bessel_eval(0,v01610__00Xj)

# op _00Z2_bessel_eval
# LANG: _00Xj --> _00Z3
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01698__00Z3=_00Z2_bessel_eval(1,v01610__00Xj)

# op _00c6_linear_combination_eval
# LANG: _00c1, _00c5 --> _00c7
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0296__00c7 = _00c6_constant+1*v0294__00c1+-1*v0297__00c5

# op _00cY_power_combination_eval
# LANG: _00cV, _00cX --> _00cZ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0302__00cZ = (v0301__00cV**1)*(v0303__00cX**1)
v0302__00cZ = (v0302__00cZ*_00cY_coeff).reshape((1, 40, 30))

# op _00c__cos_eval
# LANG: phi_distribution --> _00d0
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0305__00d0 = np.cos(v0251_phi_distribution)

# op _00dd_power_combination_eval
# LANG: _00dc, _blade_solidity --> _00de
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0309__00de = (v0308__00dc**1)*(v0220__blade_solidity**1)
v0309__00de = (v0309__00de*_00dd_coeff).reshape((1, 40, 30))

# op _00dn_power_combination_eval
# LANG: _00di, _00dm --> _00do
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0313__00do = (v0312__00di**1)*(v0315__00dm**1)
v0313__00do = (v0313__00do*_00dn_coeff).reshape((1, 40, 30))

# op _00dp_power_combination_eval
# LANG: _00ch, _blade_solidity --> _00dq
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0317__00dq = (v0220__blade_solidity**1)*(v0289__00ch**1)
v0317__00dq = (v0317__00dq*_00dp_coeff).reshape((1, 40, 30))

# op _00r9_linear_combination_eval
# LANG: _00r4, _00r8 --> _00ra
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0669__00ra = _00r9_constant+1*v0667__00r4+-1*v0670__00r8

# op _00s0_power_combination_eval
# LANG: _00rY, _00r_ --> _00s1
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0675__00s1 = (v0674__00rY**1)*(v0676__00r_**1)
v0675__00s1 = (v0675__00s1*_00s0_coeff).reshape((1, 40, 30))

# op _00s2_cos_eval
# LANG: phi_distribution --> _00s3
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0678__00s3 = np.cos(v0624_phi_distribution)

# op _00sg_power_combination_eval
# LANG: _00sf, _blade_solidity --> _00sh
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0682__00sh = (v0681__00sf**1)*(v0593__blade_solidity**1)
v0682__00sh = (v0682__00sh*_00sg_coeff).reshape((1, 40, 30))

# op _00sq_power_combination_eval
# LANG: _00sl, _00sp --> _00sr
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0686__00sr = (v0685__00sl**1)*(v0688__00sp**1)
v0686__00sr = (v0686__00sr*_00sq_coeff).reshape((1, 40, 30))

# op _00ss_power_combination_eval
# LANG: _00rk, _blade_solidity --> _00st
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0690__00st = (v0593__blade_solidity**1)*(v0662__00rk**1)
v0690__00st = (v0690__00st*_00ss_coeff).reshape((1, 40, 30))

# op _00zw_linear_combination_eval
# LANG: _00zv --> temperature
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0910_temperature = _00zw_constant+1*v0909__00zv

# op _01AT expand_scalar_eval
# LANG: density --> _01AU
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02665_density = v02665_density.reshape((1,))
v02743__01AU = np.empty((1, 40, 30))
v02743__01AU.fill(v02665_density.item())
v02665_density = v02665_density.reshape((1, 1))

# op _01BM_linear_combination_eval
# LANG: _01BJ, _01BL --> _01BN
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02708__01BN = _01BM_constant+1*v02706__01BJ+1*v02709__01BL

# op _01By_power_combination_eval
# LANG: _01Bt, _01Bx --> _01Bz
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02699__01Bz = (v02698__01Bt**1)*(v02701__01Bx**1)
v02699__01Bz = (v02699__01Bz*_01By_coeff).reshape((1, 40, 30))

# op _01C7_power_combination_eval
# LANG: _01BT, _01C6 --> _01C8
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02723__01C8 = (v02722__01BT**1)*(v02729__01C6**-1)
v02723__01C8 = (v02723__01C8*_01C7_coeff).reshape((1, 40, 30))

# op _01Cv_power_combination_eval
# LANG: _radius --> _01Cw
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02741__01Cw = (v02637__radius**1)
v02741__01Cw = (v02741__01Cw*_01Cv_coeff).reshape((1, 40, 30))

# op _01E3_power_combination_eval
# LANG: _ut --> _01E4
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02803__01E4 = (v02734__ut**1)
v02803__01E4 = (v02803__01E4*_01E3_coeff).reshape((1, 40, 30))

# op _01Ka_indexed_passthrough_eval
# LANG: _01K9, _01Kc, _01Ke --> V_aircraft
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02978_V_aircraft__temp[i_v02977__01K9__01Ka_indexed_passthrough_eval] = v02977__01K9.flatten()
v02978_V_aircraft = v02978_V_aircraft__temp.copy()
v02978_V_aircraft__temp[i_v02979__01Kc__01Ka_indexed_passthrough_eval] = v02979__01Kc.flatten()
v02978_V_aircraft = v02978_V_aircraft__temp.copy()
v02978_V_aircraft__temp[i_v02980__01Ke__01Ka_indexed_passthrough_eval] = v02980__01Ke.flatten()
v02978_V_aircraft = v02978_V_aircraft__temp.copy()

# op _01lQ expand_scalar_eval
# LANG: density --> _01lR
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02292_density = v02292_density.reshape((1,))
v02370__01lR = np.empty((1, 40, 30))
v02370__01lR.fill(v02292_density.item())
v02292_density = v02292_density.reshape((1, 1))

# op _01mJ_linear_combination_eval
# LANG: _01mG, _01mI --> _01mK
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02335__01mK = _01mJ_constant+1*v02333__01mG+1*v02336__01mI

# op _01mv_power_combination_eval
# LANG: _01mq, _01mu --> _01mw
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02326__01mw = (v02325__01mq**1)*(v02328__01mu**1)
v02326__01mw = (v02326__01mw*_01mv_coeff).reshape((1, 40, 30))

# op _01n4_power_combination_eval
# LANG: _01mQ, _01n3 --> _01n5
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02350__01n5 = (v02349__01mQ**1)*(v02356__01n3**-1)
v02350__01n5 = (v02350__01n5*_01n4_coeff).reshape((1, 40, 30))

# op _01ns_power_combination_eval
# LANG: _radius --> _01nt
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02368__01nt = (v02264__radius**1)
v02368__01nt = (v02368__01nt*_01ns_coeff).reshape((1, 40, 30))

# op _01p0_power_combination_eval
# LANG: _ut --> _01p1
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02430__01p1 = (v02361__ut**1)
v02430__01p1 = (v02430__01p1*_01p0_coeff).reshape((1, 40, 30))

# op _020c_indexed_passthrough_eval
# LANG: _020b, _020e, _020g --> V_aircraft
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03492_V_aircraft__temp[i_v03491__020b__020c_indexed_passthrough_eval] = v03491__020b.flatten()
v03492_V_aircraft = v03492_V_aircraft__temp.copy()
v03492_V_aircraft__temp[i_v03493__020e__020c_indexed_passthrough_eval] = v03493__020e.flatten()
v03492_V_aircraft = v03492_V_aircraft__temp.copy()
v03492_V_aircraft__temp[i_v03494__020g__020c_indexed_passthrough_eval] = v03494__020g.flatten()
v03492_V_aircraft = v03492_V_aircraft__temp.copy()

# op _000K reshape_eval
# LANG: _000J --> rotor_2_disk_origin
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v022_rotor_2_disk_origin = v021__000J.reshape((1, 3))

# op _000q reshape_eval
# LANG: _000p --> rotor_1_disk_origin
# SHAPES: (1, 3) --> (1, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v012_rotor_1_disk_origin = v011__000p.reshape((1, 3))

# op _00D6 reshape_eval
# LANG: _00D5 --> _00D7
# SHAPES: (1, 40, 1) --> (1, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0994__00D7 = v0993__00D5.reshape((1, 40))

# op _00FC_bessel_eval
# LANG: _00DJ --> _00FD
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01106__00FD=_00FC_bessel_eval(1,v01014__00DJ)

# op _00Fm_bessel_eval
# LANG: _00DJ --> _00Fn
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01097__00Fn=_00Fm_bessel_eval(1,v01014__00DJ)

# op _00Fu_power_combination_eval
# LANG: _00Fr, _00Ft --> _00Fv
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01101__00Fv = (v01100__00Fr**1)*(v01102__00Ft**1)
v01101__00Fv = (v01101__00Fv*_00Fu_coeff).reshape((1, 2, 3, 40, 10))

# op _00Fw_bessel_eval
# LANG: _00DJ --> _00Fx
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01104__00Fx=_00Fw_bessel_eval(1,v01014__00DJ)

# op _00T8_power_combination_eval
# LANG: temperature --> _00T9
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01507__00T9 = (v01506_temperature**1)
v01507__00T9 = (v01507__00T9*_00T8_coeff).reshape((1,))

# op _00WH reshape_eval
# LANG: _00WG --> _00WI
# SHAPES: (1, 40, 1) --> (1, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01590__00WI = v01589__00WG.reshape((1, 40))

# op _00YX_bessel_eval
# LANG: _00Xj --> _00YY
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01693__00YY=_00YX_bessel_eval(1,v01610__00Xj)

# op _00Z4_power_combination_eval
# LANG: _00Z1, _00Z3 --> _00Z5
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01697__00Z5 = (v01696__00Z1**1)*(v01698__00Z3**1)
v01697__00Z5 = (v01697__00Z5*_00Z4_coeff).reshape((1, 2, 3, 40, 10))

# op _00Z6_bessel_eval
# LANG: _00Xj --> _00Z7
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01700__00Z7=_00Z6_bessel_eval(1,v01610__00Xj)

# op _00Zc_bessel_eval
# LANG: _00Xj --> _00Zd
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01702__00Zd=_00Zc_bessel_eval(1,v01610__00Xj)

# op _00cQ_power_combination_eval
# LANG: _00c7, _blade_solidity --> _00cR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0293__00cR = (v0220__blade_solidity**1)*(v0296__00c7**1)
v0293__00cR = (v0293__00cR*_00cQ_coeff).reshape((1, 40, 30))

# op _00d1_power_combination_eval
# LANG: _00cZ, _00d0 --> _00d2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0304__00d2 = (v0302__00cZ**1)*(v0305__00d0**1)
v0304__00d2 = (v0304__00d2*_00d1_coeff).reshape((1, 40, 30))

# op _00d3_power_combination_eval
# LANG: _00ch, _blade_solidity --> _00d4
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0307__00d4 = (v0220__blade_solidity**1)*(v0289__00ch**1)
v0307__00d4 = (v0307__00d4*_00d3_coeff).reshape((1, 40, 30))

# op _00df_power_combination_eval
# LANG: _00ch, _00de --> _00dg
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0310__00dg = (v0309__00de**1)*(v0289__00ch**1)
v0310__00dg = (v0310__00dg*_00df_coeff).reshape((1, 40, 30))

# op _00dr_linear_combination_eval
# LANG: _00do, _00dq --> _00ds
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0316__00ds = _00dr_constant+1*v0313__00do+1*v0317__00dq

# op _00rT_power_combination_eval
# LANG: _00ra, _blade_solidity --> _00rU
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0666__00rU = (v0593__blade_solidity**1)*(v0669__00ra**1)
v0666__00rU = (v0666__00rU*_00rT_coeff).reshape((1, 40, 30))

# op _00s4_power_combination_eval
# LANG: _00s1, _00s3 --> _00s5
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0677__00s5 = (v0675__00s1**1)*(v0678__00s3**1)
v0677__00s5 = (v0677__00s5*_00s4_coeff).reshape((1, 40, 30))

# op _00s6_power_combination_eval
# LANG: _00rk, _blade_solidity --> _00s7
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0680__00s7 = (v0593__blade_solidity**1)*(v0662__00rk**1)
v0680__00s7 = (v0680__00s7*_00s6_coeff).reshape((1, 40, 30))

# op _00si_power_combination_eval
# LANG: _00rk, _00sh --> _00sj
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0683__00sj = (v0682__00sh**1)*(v0662__00rk**1)
v0683__00sj = (v0683__00sj*_00si_coeff).reshape((1, 40, 30))

# op _00su_linear_combination_eval
# LANG: _00sr, _00st --> _00sv
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0689__00sv = _00su_constant+1*v0686__00sr+1*v0690__00st

# op _00zy_power_combination_eval
# LANG: temperature --> _00zz
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0911__00zz = (v0910_temperature**1)
v0911__00zz = (v0911__00zz*_00zy_coeff).reshape((1,))

# op _01BO_power_combination_eval
# LANG: _01Bz, _01BN --> _ux
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02702__ux = (v02699__01Bz**1)*(v02708__01BN**-1)
v02702__ux = (v02702__ux*_01BO_coeff).reshape((1, 40, 30))

# op _01C9_linear_combination_eval
# LANG: _01C8, _axial_inflow_velocity --> _ux_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02715__ux_2 = _01C9_constant+1*v02644__axial_inflow_velocity+1*v02723__01C8

# op _01Cx_power_combination_eval
# LANG: _01Cw, _01AU --> _01Cy
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02742__01Cy = (v02741__01Cw**1)*(v02743__01AU**1)
v02742__01Cy = (v02742__01Cy*_01Cx_coeff).reshape((1, 40, 30))

# op _01DW_power_combination_eval
# LANG: Cd --> _01DX
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02676_Cd = v02676_Cd.reshape((1, 40, 30))
v02796__01DX = (v02676_Cd**1)
v02796__01DX = (v02796__01DX*_01DW_coeff).reshape((1, 40, 30))
v02676_Cd = v02676_Cd.reshape((1200,))

# op _01E5_linear_combination_eval
# LANG: _01E4, _tangential_inflow_velocity --> _01E6
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02802__01E6 = _01E5_constant+1*v02654__tangential_inflow_velocity+-1*v02803__01E4

# op _01Kf expand_array_eval
# LANG: V_aircraft --> _01Kg
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02987__01Kg = np.einsum('ab,c->abc', v02978_V_aircraft.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _01Kl expand_array_eval
# LANG: time_vectors --> _01Km
# SHAPES: (2,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02993__01Km = np.einsum('c,ab->abc', v02992_time_vectors.reshape((2,)) ,np.ones((1, 3))).reshape((1, 3, 2))

# op _01fN_power_combination_eval
# LANG: propeller_radius --> _01fO
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02242__01fO = (v02172_propeller_radius**1)
v02242__01fO = (v02242__01fO*_01fN_coeff).reshape((1,))

# op _01mL_power_combination_eval
# LANG: _01mw, _01mK --> _ux
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02329__ux = (v02326__01mw**1)*(v02335__01mK**-1)
v02329__ux = (v02329__ux*_01mL_coeff).reshape((1, 40, 30))

# op _01n6_linear_combination_eval
# LANG: _01n5, _axial_inflow_velocity --> _ux_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02342__ux_2 = _01n6_constant+1*v02271__axial_inflow_velocity+1*v02350__01n5

# op _01nu_power_combination_eval
# LANG: _01nt, _01lR --> _01nv
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02369__01nv = (v02368__01nt**1)*(v02370__01lR**1)
v02369__01nv = (v02369__01nv*_01nu_coeff).reshape((1, 40, 30))

# op _01oT_power_combination_eval
# LANG: Cd --> _01oU
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02303_Cd = v02303_Cd.reshape((1, 40, 30))
v02423__01oU = (v02303_Cd**1)
v02423__01oU = (v02423__01oU*_01oT_coeff).reshape((1, 40, 30))
v02303_Cd = v02303_Cd.reshape((1200,))

# op _01p2_linear_combination_eval
# LANG: _01p1, _tangential_inflow_velocity --> _01p3
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02429__01p3 = _01p2_constant+1*v02281__tangential_inflow_velocity+-1*v02430__01p1

# op _01uQ_power_combination_eval
# LANG: propeller_radius --> _01uR
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02615__01uR = (v02545_propeller_radius**1)
v02615__01uR = (v02615__01uR*_01uQ_coeff).reshape((1,))

# op _020h expand_array_eval
# LANG: V_aircraft --> _020i
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03501__020i = np.einsum('ab,c->abc', v03492_V_aircraft.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _020n expand_array_eval
# LANG: time_vectors --> _020o
# SHAPES: (2,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03507__020o = np.einsum('c,ab->abc', v03506_time_vectors.reshape((2,)) ,np.ones((1, 3))).reshape((1, 3, 2))

# op _00D8 expand_array_eval
# LANG: _00D7 --> _00D9
# SHAPES: (1, 40) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0995__00D9 = np.einsum('ad,bce->abcde', v0994__00D7.reshape((1, 40)) ,np.ones((2, 3, 11))).reshape((1, 2, 3, 40, 11))

# op _00FE_power_combination_eval
# LANG: _00FD --> _00FF
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01107__00FF = (v01106__00FD**2)
v01107__00FF = (v01107__00FF*_00FE_coeff).reshape((1, 2, 3, 40, 10))

# op _00FG_bessel_eval
# LANG: _00DJ --> _00FH
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01109__00FH=_00FG_bessel_eval(0,v01014__00DJ)

# op _00FM_bessel_eval
# LANG: _00DJ --> _00FN
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01111__00FN=_00FM_bessel_eval(0,v01014__00DJ)

# op _00FO_bessel_eval
# LANG: _00DJ --> _00FP
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01113__00FP=_00FO_bessel_eval(0,v01014__00DJ)

# op _00Fo_power_combination_eval
# LANG: _00Fn --> _00Fp
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01098__00Fp = (v01097__00Fn**3)
v01098__00Fp = (v01098__00Fp*_00Fo_coeff).reshape((1, 2, 3, 40, 10))

# op _00Fy_power_combination_eval
# LANG: _00Fv, _00Fx --> _00Fz
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01103__00Fz = (v01101__00Fv**1)*(v01104__00Fx**1)
v01103__00Fz = (v01103__00Fz*_00Fy_coeff).reshape((1, 2, 3, 40, 10))

# op _00Ta_power_combination_eval
# LANG: _00T9 --> _00Tb
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01508__00Tb = (v01507__00T9**5.258643795229161)
v01508__00Tb = (v01508__00Tb*_00Ta_coeff).reshape((1,))

# op _00WJ expand_array_eval
# LANG: _00WI --> _00WK
# SHAPES: (1, 40) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01591__00WK = np.einsum('ad,bce->abcde', v01590__00WI.reshape((1, 40)) ,np.ones((2, 3, 11))).reshape((1, 2, 3, 40, 11))

# op _00YZ_power_combination_eval
# LANG: _00YY --> _00Y_
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01694__00Y_ = (v01693__00YY**3)
v01694__00Y_ = (v01694__00Y_*_00YZ_coeff).reshape((1, 2, 3, 40, 10))

# op _00Z8_power_combination_eval
# LANG: _00Z5, _00Z7 --> _00Z9
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01699__00Z9 = (v01697__00Z5**1)*(v01700__00Z7**1)
v01699__00Z9 = (v01699__00Z9*_00Z8_coeff).reshape((1, 2, 3, 40, 10))

# op _00Ze_power_combination_eval
# LANG: _00Zd --> _00Zf
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01703__00Zf = (v01702__00Zd**2)
v01703__00Zf = (v01703__00Zf*_00Ze_coeff).reshape((1, 2, 3, 40, 10))

# op _00Zg_bessel_eval
# LANG: _00Xj --> _00Zh
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01705__00Zh=_00Zg_bessel_eval(0,v01610__00Xj)

# op _00Zm_bessel_eval
# LANG: _00Xj --> _00Zn
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01707__00Zn=_00Zm_bessel_eval(0,v01610__00Xj)

# op _00Zo_bessel_eval
# LANG: _00Xj --> _00Zp
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01709__00Zp=_00Zo_bessel_eval(0,v01610__00Xj)

# op _00cS_power_combination_eval
# LANG: _00cR, _tangential_inflow_velocity --> _00cT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0299__00cT = (v0293__00cR**1)*(v0231__tangential_inflow_velocity**1)
v0299__00cT = (v0299__00cT*_00cS_coeff).reshape((1, 40, 30))

# op _00d5_linear_combination_eval
# LANG: _00d2, _00d4 --> _00d6
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0306__00d6 = _00d5_constant+1*v0304__00d2+1*v0307__00d4

# op _00dt_power_combination_eval
# LANG: _00dg, _00ds --> _ut
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0311__ut = (v0310__00dg**1)*(v0316__00ds**-1)
v0311__ut = (v0311__ut*_00dt_coeff).reshape((1, 40, 30))

# op _00rV_power_combination_eval
# LANG: _00rU, _tangential_inflow_velocity --> _00rW
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0672__00rW = (v0666__00rU**1)*(v0604__tangential_inflow_velocity**1)
v0672__00rW = (v0672__00rW*_00rV_coeff).reshape((1, 40, 30))

# op _00s8_linear_combination_eval
# LANG: _00s5, _00s7 --> _00s9
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0679__00s9 = _00s8_constant+1*v0677__00s5+1*v0680__00s7

# op _00sw_power_combination_eval
# LANG: _00sj, _00sv --> _ut
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0684__ut = (v0683__00sj**1)*(v0689__00sv**-1)
v0684__ut = (v0684__ut*_00sw_coeff).reshape((1, 40, 30))

# op _00zA_power_combination_eval
# LANG: _00zz --> _00zB
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0912__00zB = (v0911__00zz**5.258643795229161)
v0912__00zB = (v0912__00zB*_00zA_coeff).reshape((1,))

# op _01CB_linear_combination_eval
# LANG: _ux, _axial_inflow_velocity --> _01CC
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02746__01CC = _01CB_constant+1*v02702__ux+-1*v02644__axial_inflow_velocity

# op _01Cz_power_combination_eval
# LANG: _ux, _01Cy --> _01CA
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02744__01CA = (v02742__01Cy**1)*(v02702__ux**1)
v02744__01CA = (v02744__01CA*_01Cz_coeff).reshape((1, 40, 30))

# op _01DY_power_combination_eval
# LANG: _01DX --> _01DZ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02797__01DZ = (v02796__01DX**1)
v02797__01DZ = (v02797__01DZ*_01DY_coeff).reshape((1, 40, 30))

# op _01E1_power_combination_eval
# LANG: _ux_2 --> _01E2
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02800__01E2 = (v02715__ux_2**2)
v02800__01E2 = (v02800__01E2*_01E1_coeff).reshape((1, 40, 30))

# op _01E7_power_combination_eval
# LANG: _01E6 --> _01E8
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02804__01E8 = (v02802__01E6**2)
v02804__01E8 = (v02804__01E8*_01E7_coeff).reshape((1, 40, 30))

# op _01Ht_power_combination_eval
# LANG: rotor_1_disk_origin --> origin
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((3,))
v02899_origin = (v012_rotor_1_disk_origin**1)
v02899_origin = (v02899_origin*_01Ht_coeff).reshape((3,))
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((1, 3))

# op _01Ki expand_array_eval
# LANG: aircraft_location --> _01Kj
# SHAPES: (3, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02982__01Kj = np.einsum('bc,a->abc', v02981_aircraft_location.reshape((3, 2)) ,np.ones((1,))).reshape((1, 3, 2))

# op _01Kp_decompose_eval
# LANG: _01Kg --> _01Kq, _01Ky, _01KF
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02988__01Kq = ((v02987__01Kg.flatten())[src_indices__01Kq__01Kp]).reshape((1, 1, 2))
v02989__01Ky = ((v02987__01Kg.flatten())[src_indices__01Ky__01Kp]).reshape((1, 1, 2))
v02990__01KF = ((v02987__01Kg.flatten())[src_indices__01KF__01Kp]).reshape((1, 1, 2))

# op _01Kr_decompose_eval
# LANG: _01Km --> _01Ks, _01Kz, _01KG
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02994__01Ks = ((v02993__01Km.flatten())[src_indices__01Ks__01Kr]).reshape((1, 1, 2))
v02995__01Kz = ((v02993__01Km.flatten())[src_indices__01Kz__01Kr]).reshape((1, 1, 2))
v02996__01KG = ((v02993__01Km.flatten())[src_indices__01KG__01Kr]).reshape((1, 1, 2))

# op _01Yv_power_combination_eval
# LANG: rotor_2_disk_origin --> origin
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((3,))
v03415_origin = (v022_rotor_2_disk_origin**1)
v03415_origin = (v03415_origin*_01Yv_coeff).reshape((3,))
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((1, 3))

# op _01fP_linear_combination_eval
# LANG: _01fO, propeller_radius --> _01fQ
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02241__01fQ = _01fP_constant+1*v02172_propeller_radius+-1*v02242__01fO

# op _01nw_power_combination_eval
# LANG: _ux, _01nv --> _01nx
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02371__01nx = (v02369__01nv**1)*(v02329__ux**1)
v02371__01nx = (v02371__01nx*_01nw_coeff).reshape((1, 40, 30))

# op _01ny_linear_combination_eval
# LANG: _ux, _axial_inflow_velocity --> _01nz
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02373__01nz = _01ny_constant+1*v02329__ux+-1*v02271__axial_inflow_velocity

# op _01oV_power_combination_eval
# LANG: _01oU --> _01oW
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02424__01oW = (v02423__01oU**1)
v02424__01oW = (v02424__01oW*_01oV_coeff).reshape((1, 40, 30))

# op _01oZ_power_combination_eval
# LANG: _ux_2 --> _01o_
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02427__01o_ = (v02342__ux_2**2)
v02427__01o_ = (v02427__01o_*_01oZ_coeff).reshape((1, 40, 30))

# op _01p4_power_combination_eval
# LANG: _01p3 --> _01p5
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02431__01p5 = (v02429__01p3**2)
v02431__01p5 = (v02431__01p5*_01p4_coeff).reshape((1, 40, 30))

# op _01uS_linear_combination_eval
# LANG: _01uR, propeller_radius --> _01uT
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02614__01uT = _01uS_constant+1*v02545_propeller_radius+-1*v02615__01uR

# op _020k expand_array_eval
# LANG: aircraft_location --> _020l
# SHAPES: (3, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03496__020l = np.einsum('bc,a->abc', v03495_aircraft_location.reshape((3, 2)) ,np.ones((1,))).reshape((1, 3, 2))

# op _020r_decompose_eval
# LANG: _020i --> _020s, _020A, _020H
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03502__020s = ((v03501__020i.flatten())[src_indices__020s__020r]).reshape((1, 1, 2))
v03503__020A = ((v03501__020i.flatten())[src_indices__020A__020r]).reshape((1, 1, 2))
v03504__020H = ((v03501__020i.flatten())[src_indices__020H__020r]).reshape((1, 1, 2))

# op _020t_decompose_eval
# LANG: _020o --> _020u, _020B, _020I
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03508__020u = ((v03507__020o.flatten())[src_indices__020u__020t]).reshape((1, 1, 2))
v03509__020B = ((v03507__020o.flatten())[src_indices__020B__020t]).reshape((1, 1, 2))
v03510__020I = ((v03507__020o.flatten())[src_indices__020I__020t]).reshape((1, 1, 2))

# op _00A4 expand_scalar_eval
# LANG: Vx --> _00A5
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0924__00A5 = np.empty((1, 1))
v0924__00A5.fill(v033_u.item())

# op _00A7 expand_scalar_eval
# LANG: Vy --> _00A8
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0926__00A8 = np.empty((1, 1))
v0926__00A8.fill(v034_v.item())

# op _00A9 expand_scalar_eval
# LANG: Vz --> _00Aa
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0927__00Aa = np.empty((1, 1))
v0927__00Aa.fill(v035_w.item())

# op _00Da_power_combination_eval
# LANG: _00D9, _00CF --> lambda_test
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0996_lambda_test = (v0995__00D9**1)*(v0998__00CF**1)
v0996_lambda_test = (v0996_lambda_test*_00Da_coeff).reshape((1, 2, 3, 40, 11))

# op _00FA_linear_combination_eval
# LANG: _00Fp, _00Fz --> _00FB
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01099__00FB = _00FA_constant+1*v01098__00Fp+1*v01103__00Fz

# op _00FI_power_combination_eval
# LANG: _00FF, _00FH --> _00FJ
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01108__00FJ = (v01107__00FF**1)*(v01109__00FH**1)
v01108__00FJ = (v01108__00FJ*_00FI_coeff).reshape((1, 2, 3, 40, 10))

# op _00FQ_power_combination_eval
# LANG: _00FN, _00FP --> _00FR
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01112__00FR = (v01111__00FN**1)*(v01113__00FP**1)
v01112__00FR = (v01112__00FR*_00FQ_coeff).reshape((1, 2, 3, 40, 10))

# op _00FS_bessel_eval
# LANG: _00DJ --> _00FT
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01115__00FT=_00FS_bessel_eval(1,v01014__00DJ)

# op _00FY_bessel_eval
# LANG: _00DJ --> _00FZ
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01117__00FZ=_00FY_bessel_eval(0,v01014__00DJ)

# op _00TF expand_scalar_eval
# LANG: Vx --> _00TG
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01520__00TG = np.empty((1, 1))
v01520__00TG.fill(v033_u.item())

# op _00TI expand_scalar_eval
# LANG: Vy --> _00TJ
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01522__00TJ = np.empty((1, 1))
v01522__00TJ.fill(v034_v.item())

# op _00TK expand_scalar_eval
# LANG: Vz --> _00TL
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01523__00TL = np.empty((1, 1))
v01523__00TL.fill(v035_w.item())

# op _00Tc_power_combination_eval
# LANG: _00Tb --> pressure
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01509_pressure = (v01508__00Tb**1)
v01509_pressure = (v01509_pressure*_00Tc_coeff).reshape((1,))

# op _00WL_power_combination_eval
# LANG: _00WK, _00Wf --> lambda_test
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01592_lambda_test = (v01591__00WK**1)*(v01594__00Wf**1)
v01592_lambda_test = (v01592_lambda_test*_00WL_coeff).reshape((1, 2, 3, 40, 11))

# op _00Za_linear_combination_eval
# LANG: _00Y_, _00Z9 --> _00Zb
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01695__00Zb = _00Za_constant+1*v01694__00Y_+1*v01699__00Z9

# op _00Zi_power_combination_eval
# LANG: _00Zf, _00Zh --> _00Zj
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01704__00Zj = (v01703__00Zf**1)*(v01705__00Zh**1)
v01704__00Zj = (v01704__00Zj*_00Zi_coeff).reshape((1, 2, 3, 40, 10))

# op _00Zq_power_combination_eval
# LANG: _00Zn, _00Zp --> _00Zr
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01708__00Zr = (v01707__00Zn**1)*(v01709__00Zp**1)
v01708__00Zr = (v01708__00Zr*_00Zq_coeff).reshape((1, 2, 3, 40, 10))

# op _00Zs_bessel_eval
# LANG: _00Xj --> _00Zt
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01711__00Zt=_00Zs_bessel_eval(1,v01610__00Xj)

# op _00Zy_bessel_eval
# LANG: _00Xj --> _00Zz
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01713__00Zz=_00Zy_bessel_eval(0,v01610__00Xj)

# op _00cA_power_combination_eval
# LANG: prandtl_loss_factor --> _00cB
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0280__00cB = (v0264_prandtl_loss_factor**1)
v0280__00cB = (v0280__00cB*_00cA_coeff).reshape((1, 40, 30))

# op _00cC_sin_eval
# LANG: phi_distribution --> _00cD
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0282__00cD = np.sin(v0251_phi_distribution)

# op _00d7_power_combination_eval
# LANG: _00cT, _00d6 --> _00d8
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0300__00d8 = (v0299__00cT**1)*(v0306__00d6**-1)
v0300__00d8 = (v0300__00d8*_00d7_coeff).reshape((1, 40, 30))

# op _00f3_power_combination_eval
# LANG: _ut --> _00f4
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0380__00f4 = (v0311__ut**1)
v0380__00f4 = (v0380__00f4*_00f3_coeff).reshape((1, 40, 30))

# op _00rD_power_combination_eval
# LANG: prandtl_loss_factor --> _00rE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0653__00rE = (v0637_prandtl_loss_factor**1)
v0653__00rE = (v0653__00rE*_00rD_coeff).reshape((1, 40, 30))

# op _00rF_sin_eval
# LANG: phi_distribution --> _00rG
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0655__00rG = np.sin(v0624_phi_distribution)

# op _00sa_power_combination_eval
# LANG: _00rW, _00s9 --> _00sb
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0673__00sb = (v0672__00rW**1)*(v0679__00s9**-1)
v0673__00sb = (v0673__00sb*_00sa_coeff).reshape((1, 40, 30))

# op _00u6_power_combination_eval
# LANG: _ut --> _00u7
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0753__00u7 = (v0684__ut**1)
v0753__00u7 = (v0753__00u7*_00u6_coeff).reshape((1, 40, 30))

# op _00zC_power_combination_eval
# LANG: _00zB --> pressure
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0913_pressure = (v0912__00zB**1)
v0913_pressure = (v0913_pressure*_00zC_coeff).reshape((1,))

# op _01CD_power_combination_eval
# LANG: _01CA, _01CC --> _01CE
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02745__01CE = (v02744__01CA**1)*(v02746__01CC**1)
v02745__01CE = (v02745__01CE*_01CD_coeff).reshape((1, 40, 30))

# op _01D__power_combination_eval
# LANG: _01AU, _01DZ --> _01E0
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02798__01E0 = (v02797__01DZ**1)*(v02743__01AU**1)
v02798__01E0 = (v02798__01E0*_01D__coeff).reshape((1, 40, 30))

# op _01E9_linear_combination_eval
# LANG: _01E2, _01E8 --> _01Ea
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02801__01Ea = _01E9_constant+1*v02800__01E2+1*v02804__01E8

# op _01KA_power_combination_eval
# LANG: _01Ky, _01Kz --> _01KB
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02998__01KB = (v02989__01Ky**1)*(v02995__01Kz**1)
v02998__01KB = (v02998__01KB*_01KA_coeff).reshape((1, 1, 2))

# op _01KS expand_array_eval
# LANG: origin --> _01KT
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03005__01KT = np.einsum('b,ac->abc', v02899_origin.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _01Kn_decompose_eval
# LANG: _01Kj --> _01Ko, _01Kx, _01KE
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02983__01Ko = ((v02982__01Kj.flatten())[src_indices__01Ko__01Kn]).reshape((1, 1, 2))
v02984__01Kx = ((v02982__01Kj.flatten())[src_indices__01Kx__01Kn]).reshape((1, 1, 2))
v02985__01KE = ((v02982__01Kj.flatten())[src_indices__01KE__01Kn]).reshape((1, 1, 2))

# op _01Kt_power_combination_eval
# LANG: _01Kq, _01Ks --> _01Ku
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02991__01Ku = (v02988__01Kq**1)*(v02994__01Ks**1)
v02991__01Ku = (v02991__01Ku*_01Kt_coeff).reshape((1, 1, 2))

# op _01fR_power_combination_eval
# LANG: _01fQ --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02243_dr = (v02241__01fQ**1)
v02243_dr = (v02243_dr*_01fR_coeff).reshape((1,))

# op _01nA_power_combination_eval
# LANG: _01nx, _01nz --> _01nB
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02372__01nB = (v02371__01nx**1)*(v02373__01nz**1)
v02372__01nB = (v02372__01nB*_01nA_coeff).reshape((1, 40, 30))

# op _01oX_power_combination_eval
# LANG: _01lR, _01oW --> _01oY
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02425__01oY = (v02424__01oW**1)*(v02370__01lR**1)
v02425__01oY = (v02425__01oY*_01oX_coeff).reshape((1, 40, 30))

# op _01p6_linear_combination_eval
# LANG: _01o_, _01p5 --> _01p7
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02428__01p7 = _01p6_constant+1*v02427__01o_+1*v02431__01p5

# op _01uU_power_combination_eval
# LANG: _01uT --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02616_dr = (v02614__01uT**1)
v02616_dr = (v02616_dr*_01uU_coeff).reshape((1,))

# op _020C_power_combination_eval
# LANG: _020A, _020B --> _020D
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03512__020D = (v03503__020A**1)*(v03509__020B**1)
v03512__020D = (v03512__020D*_020C_coeff).reshape((1, 1, 2))

# op _020U expand_array_eval
# LANG: origin --> _020V
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03519__020V = np.einsum('b,ac->abc', v03415_origin.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _020p_decompose_eval
# LANG: _020l --> _020q, _020z, _020G
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03497__020q = ((v03496__020l.flatten())[src_indices__020q__020p]).reshape((1, 1, 2))
v03498__020z = ((v03496__020l.flatten())[src_indices__020z__020p]).reshape((1, 1, 2))
v03499__020G = ((v03496__020l.flatten())[src_indices__020G__020p]).reshape((1, 1, 2))

# op _020v_power_combination_eval
# LANG: _020s, _020u --> _020w
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03505__020w = (v03502__020s**1)*(v03508__020u**1)
v03505__020w = (v03505__020w*_020v_coeff).reshape((1, 1, 2))

# op _00A6_indexed_passthrough_eval
# LANG: _00A5, _00A8, _00Aa --> V_aircraft
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0925_V_aircraft__temp[i_v0924__00A5__00A6_indexed_passthrough_eval] = v0924__00A5.flatten()
v0925_V_aircraft = v0925_V_aircraft__temp.copy()
v0925_V_aircraft__temp[i_v0926__00A8__00A6_indexed_passthrough_eval] = v0926__00A8.flatten()
v0925_V_aircraft = v0925_V_aircraft__temp.copy()
v0925_V_aircraft__temp[i_v0927__00Aa__00A6_indexed_passthrough_eval] = v0927__00Aa.flatten()
v0925_V_aircraft = v0925_V_aircraft__temp.copy()

# op _00DM_bessel_eval
# LANG: _00DJ --> _00DN
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01023__00DN=_00DM_bessel_eval(1,v01014__00DJ)

# op _00DS_bessel_eval
# LANG: _00DJ --> _00DT
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01026__00DT=_00DS_bessel_eval(1,v01014__00DJ)

# op _00De_decompose_eval
# LANG: lambda_test --> _00Df
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01081__00Df = ((v0996_lambda_test.flatten())[src_indices__00Df__00De]).reshape((1, 2, 3, 40, 10))

# op _00Er_bessel_eval
# LANG: _00DJ --> _00Es
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01045__00Es=_00Er_bessel_eval(1,v01014__00DJ)

# op _00Ex_bessel_eval
# LANG: _00DJ --> _00Ey
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01048__00Ey=_00Ex_bessel_eval(0,v01014__00DJ)

# op _00FK_linear_combination_eval
# LANG: _00FB, _00FJ --> _00FL
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01105__00FL = _00FK_constant+1*v01099__00FB+1*v01108__00FJ

# op _00FU_power_combination_eval
# LANG: _00FR, _00FT --> _00FV
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01114__00FV = (v01112__00FR**1)*(v01115__00FT**1)
v01114__00FV = (v01114__00FV*_00FU_coeff).reshape((1, 2, 3, 40, 10))

# op _00F__power_combination_eval
# LANG: _00FZ --> _00G0
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01118__00G0 = (v01117__00FZ**2)
v01118__00G0 = (v01118__00G0*_00F__coeff).reshape((1, 2, 3, 40, 10))

# op _00G1_bessel_eval
# LANG: _00DJ --> _00G2
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01120__00G2=_00G1_bessel_eval(1,v01014__00DJ)

# op _00G7_bessel_eval
# LANG: _00DJ --> _00G8
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01122__00G8=_00G7_bessel_eval(0,v01014__00DJ)

# op _00G9_bessel_eval
# LANG: _00DJ --> _00Ga
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01124__00Ga=_00G9_bessel_eval(1,v01014__00DJ)

# op _00TH_indexed_passthrough_eval
# LANG: _00TG, _00TJ, _00TL --> V_aircraft
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01521_V_aircraft__temp[i_v01520__00TG__00TH_indexed_passthrough_eval] = v01520__00TG.flatten()
v01521_V_aircraft = v01521_V_aircraft__temp.copy()
v01521_V_aircraft__temp[i_v01522__00TJ__00TH_indexed_passthrough_eval] = v01522__00TJ.flatten()
v01521_V_aircraft = v01521_V_aircraft__temp.copy()
v01521_V_aircraft__temp[i_v01523__00TL__00TH_indexed_passthrough_eval] = v01523__00TL.flatten()
v01521_V_aircraft = v01521_V_aircraft__temp.copy()

# op _00Te_power_combination_eval
# LANG: pressure --> _00Tf
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01510__00Tf = (v01509_pressure**1)
v01510__00Tf = (v01510__00Tf*_00Te_coeff).reshape((1,))

# op _00WP_decompose_eval
# LANG: lambda_test --> _00WQ
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01677__00WQ = ((v01592_lambda_test.flatten())[src_indices__00WQ__00WP]).reshape((1, 2, 3, 40, 10))

# op _00Xm_bessel_eval
# LANG: _00Xj --> _00Xn
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01619__00Xn=_00Xm_bessel_eval(1,v01610__00Xj)

# op _00Xs_bessel_eval
# LANG: _00Xj --> _00Xt
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01622__00Xt=_00Xs_bessel_eval(1,v01610__00Xj)

# op _00Y1_bessel_eval
# LANG: _00Xj --> _00Y2
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01641__00Y2=_00Y1_bessel_eval(1,v01610__00Xj)

# op _00Y7_bessel_eval
# LANG: _00Xj --> _00Y8
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01644__00Y8=_00Y7_bessel_eval(0,v01610__00Xj)

# op _00ZA_power_combination_eval
# LANG: _00Zz --> _00ZB
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01714__00ZB = (v01713__00Zz**2)
v01714__00ZB = (v01714__00ZB*_00ZA_coeff).reshape((1, 2, 3, 40, 10))

# op _00ZC_bessel_eval
# LANG: _00Xj --> _00ZD
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01716__00ZD=_00ZC_bessel_eval(1,v01610__00Xj)

# op _00ZI_bessel_eval
# LANG: _00Xj --> _00ZJ
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01718__00ZJ=_00ZI_bessel_eval(0,v01610__00Xj)

# op _00ZK_bessel_eval
# LANG: _00Xj --> _00ZL
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01720__00ZL=_00ZK_bessel_eval(1,v01610__00Xj)

# op _00Zk_linear_combination_eval
# LANG: _00Zb, _00Zj --> _00Zl
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01701__00Zl = _00Zk_constant+1*v01695__00Zb+1*v01704__00Zj

# op _00Zu_power_combination_eval
# LANG: _00Zr, _00Zt --> _00Zv
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01710__00Zv = (v01708__00Zr**1)*(v01711__00Zt**1)
v01710__00Zv = (v01710__00Zv*_00Zu_coeff).reshape((1, 2, 3, 40, 10))

# op _00cE_power_combination_eval
# LANG: _00cB, _00cD --> _00cF
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0281__00cF = (v0280__00cB**1)*(v0282__00cD**1)
v0281__00cF = (v0281__00cF*_00cE_coeff).reshape((1, 40, 30))

# op _00cG_cos_eval
# LANG: phi_distribution --> _00cH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0284__00cH = np.cos(v0251_phi_distribution)

# op _00cq_power_combination_eval
# LANG: prandtl_loss_factor --> _00cr
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0274__00cr = (v0264_prandtl_loss_factor**1)
v0274__00cr = (v0274__00cr*_00cq_coeff).reshape((1, 40, 30))

# op _00cu_sin_eval
# LANG: phi_distribution --> _00cv
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0277__00cv = np.sin(v0251_phi_distribution)

# op _00d9_linear_combination_eval
# LANG: _00d8, _axial_inflow_velocity --> _ux_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0292__ux_2 = _00d9_constant+1*v0221__axial_inflow_velocity+1*v0300__00d8

# op _00eW_power_combination_eval
# LANG: Cd --> _00eX
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0253_Cd = v0253_Cd.reshape((1, 40, 30))
v0373__00eX = (v0253_Cd**1)
v0373__00eX = (v0373__00eX*_00eW_coeff).reshape((1, 40, 30))
v0253_Cd = v0253_Cd.reshape((1200,))

# op _00f5_linear_combination_eval
# LANG: _00f4, _tangential_inflow_velocity --> _00f6
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0379__00f6 = _00f5_constant+1*v0231__tangential_inflow_velocity+-1*v0380__00f4

# op _00rH_power_combination_eval
# LANG: _00rE, _00rG --> _00rI
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0654__00rI = (v0653__00rE**1)*(v0655__00rG**1)
v0654__00rI = (v0654__00rI*_00rH_coeff).reshape((1, 40, 30))

# op _00rJ_cos_eval
# LANG: phi_distribution --> _00rK
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0657__00rK = np.cos(v0624_phi_distribution)

# op _00rt_power_combination_eval
# LANG: prandtl_loss_factor --> _00ru
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0647__00ru = (v0637_prandtl_loss_factor**1)
v0647__00ru = (v0647__00ru*_00rt_coeff).reshape((1, 40, 30))

# op _00rx_sin_eval
# LANG: phi_distribution --> _00ry
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0650__00ry = np.sin(v0624_phi_distribution)

# op _00sc_linear_combination_eval
# LANG: _00sb, _axial_inflow_velocity --> _ux_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0665__ux_2 = _00sc_constant+1*v0594__axial_inflow_velocity+1*v0673__00sb

# op _00tZ_power_combination_eval
# LANG: Cd --> _00t_
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0626_Cd = v0626_Cd.reshape((1, 40, 30))
v0746__00t_ = (v0626_Cd**1)
v0746__00t_ = (v0746__00t_*_00tZ_coeff).reshape((1, 40, 30))
v0626_Cd = v0626_Cd.reshape((1200,))

# op _00u8_linear_combination_eval
# LANG: _00u7, _tangential_inflow_velocity --> _00u9
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0752__00u9 = _00u8_constant+1*v0604__tangential_inflow_velocity+-1*v0753__00u7

# op _00zE_power_combination_eval
# LANG: pressure --> _00zF
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0914__00zF = (v0913_pressure**1)
v0914__00zF = (v0914__00zF*_00zE_coeff).reshape((1,))

# op _01CF_power_combination_eval
# LANG: _01CE, prandtl_loss_factor --> _01CG
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02747__01CG = (v02745__01CE**1)*(v02687_prandtl_loss_factor**1)
v02747__01CG = (v02747__01CG*_01CF_coeff).reshape((1, 40, 30))

# op _01Eb_power_combination_eval
# LANG: _01E0, _01Ea --> _01Ec
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02799__01Ec = (v02798__01E0**1)*(v02801__01Ea**1)
v02799__01Ec = (v02799__01Ec*_01Eb_coeff).reshape((1, 40, 30))

# op _01KC_linear_combination_eval
# LANG: _01Kx, _01KB --> aircraft_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02997_aircraft_y_pos = _01KC_constant+1*v02984__01Kx+1*v02998__01KB

# op _01KH_power_combination_eval
# LANG: _01KF, _01KG --> _01KI
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03000__01KI = (v02990__01KF**1)*(v02996__01KG**1)
v03000__01KI = (v03000__01KI*_01KH_coeff).reshape((1, 1, 2))

# op _01KU_decompose_eval
# LANG: _01KT --> _01KV, _01K_, _01L4
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03006__01KV = ((v03005__01KT.flatten())[src_indices__01KV__01KU]).reshape((1, 1, 2))
v03007__01K_ = ((v03005__01KT.flatten())[src_indices__01K___01KU]).reshape((1, 1, 2))
v03008__01L4 = ((v03005__01KT.flatten())[src_indices__01L4__01KU]).reshape((1, 1, 2))

# op _01Kv_linear_combination_eval
# LANG: _01Ko, _01Ku --> aircraft_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02986_aircraft_x_pos = _01Kv_constant+1*v02983__01Ko+1*v02991__01Ku

# op _01gZ expand_scalar_eval
# LANG: dr --> _dr
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_core_inputs_model
v02252__dr = np.empty((1, 40, 30))
v02252__dr.fill(v02243_dr.item())

# op _01nC_power_combination_eval
# LANG: _01nB, prandtl_loss_factor --> _01nD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02374__01nD = (v02372__01nB**1)*(v02314_prandtl_loss_factor**1)
v02374__01nD = (v02374__01nD*_01nC_coeff).reshape((1, 40, 30))

# op _01p8_power_combination_eval
# LANG: _01oY, _01p7 --> _01p9
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02426__01p9 = (v02425__01oY**1)*(v02428__01p7**1)
v02426__01p9 = (v02426__01p9*_01p8_coeff).reshape((1, 40, 30))

# op _01w1 expand_scalar_eval
# LANG: dr --> _dr
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_core_inputs_model
v02625__dr = np.empty((1, 40, 30))
v02625__dr.fill(v02616_dr.item())

# op _020E_linear_combination_eval
# LANG: _020z, _020D --> aircraft_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03511_aircraft_y_pos = _020E_constant+1*v03498__020z+1*v03512__020D

# op _020J_power_combination_eval
# LANG: _020H, _020I --> _020K
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03514__020K = (v03504__020H**1)*(v03510__020I**1)
v03514__020K = (v03514__020K*_020J_coeff).reshape((1, 1, 2))

# op _020W_decompose_eval
# LANG: _020V --> _020X, _0211, _0216
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03520__020X = ((v03519__020V.flatten())[src_indices__020X__020W]).reshape((1, 1, 2))
v03521__0211 = ((v03519__020V.flatten())[src_indices__0211__020W]).reshape((1, 1, 2))
v03522__0216 = ((v03519__020V.flatten())[src_indices__0216__020W]).reshape((1, 1, 2))

# op _020x_linear_combination_eval
# LANG: _020q, _020w --> aircraft_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03500_aircraft_x_pos = _020x_constant+1*v03497__020q+1*v03505__020w

# op _005Q_power_combination_eval
# LANG: propeller_radius --> _005R
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0192__005R = (v0122_propeller_radius**1)
v0192__005R = (v0192__005R*_005Q_coeff).reshape((1,))

# op _00Ab expand_array_eval
# LANG: V_aircraft --> _00Ac
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0934__00Ac = np.einsum('ab,c->abc', v0925_V_aircraft.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _00Ah expand_array_eval
# LANG: time_vectors --> _00Ai
# SHAPES: (2,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0940__00Ai = np.einsum('c,ab->abc', v0939_time_vectors.reshape((2,)) ,np.ones((1, 3))).reshape((1, 3, 2))

# op _00DK_bessel_eval
# LANG: _00DJ --> _00DL
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01021__00DL=_00DK_bessel_eval(0,v01014__00DJ)

# op _00DO_power_combination_eval
# LANG: _00DN --> _00DP
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01024__00DP = (v01023__00DN**2)
v01024__00DP = (v01024__00DP*_00DO_coeff).reshape((1, 2, 3, 40, 10))

# op _00DU_power_combination_eval
# LANG: _00DT --> _00DV
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01027__00DV = (v01026__00DT**2)
v01027__00DV = (v01027__00DV*_00DU_coeff).reshape((1, 2, 3, 40, 10))

# op _00DW_bessel_eval
# LANG: _00DJ --> _00DX
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01029__00DX=_00DW_bessel_eval(1,v01014__00DJ)

# op _00E1_bessel_eval
# LANG: _00DJ --> _00E2
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01031__00E2=_00E1_bessel_eval(0,v01014__00DJ)

# op _00E3_bessel_eval
# LANG: _00DJ --> _00E4
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01033__00E4=_00E3_bessel_eval(1,v01014__00DJ)

# op _00EB_bessel_eval
# LANG: _00DJ --> _00EC
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01051__00EC=_00EB_bessel_eval(1,v01014__00DJ)

# op _00EH_bessel_eval
# LANG: _00DJ --> _00EI
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01053__00EI=_00EH_bessel_eval(1,v01014__00DJ)

# op _00Ep_bessel_eval
# LANG: _00DJ --> _00Eq
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01043__00Eq=_00Ep_bessel_eval(0,v01014__00DJ)

# op _00Et_power_combination_eval
# LANG: _00Es --> _00Eu
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01046__00Eu = (v01045__00Es**2)
v01046__00Eu = (v01046__00Eu*_00Et_coeff).reshape((1, 2, 3, 40, 10))

# op _00Ez_power_combination_eval
# LANG: _00Ey --> _00EA
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01049__00EA = (v01048__00Ey**2)
v01049__00EA = (v01049__00EA*_00Ez_coeff).reshape((1, 2, 3, 40, 10))

# op _00FW_linear_combination_eval
# LANG: _00FL, _00FV --> _00FX
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01110__00FX = _00FW_constant+1*v01105__00FL+1*v01114__00FV

# op _00G3_power_combination_eval
# LANG: _00G0, _00G2 --> _00G4
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01119__00G4 = (v01118__00G0**1)*(v01120__00G2**1)
v01119__00G4 = (v01119__00G4*_00G3_coeff).reshape((1, 2, 3, 40, 10))

# op _00Gb_power_combination_eval
# LANG: _00G8, _00Ga --> _00Gc
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01123__00Gc = (v01122__00G8**1)*(v01124__00Ga**1)
v01123__00Gc = (v01123__00Gc*_00Gb_coeff).reshape((1, 2, 3, 40, 10))

# op _00Gd_bessel_eval
# LANG: _00DJ --> _00Ge
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01126__00Ge=_00Gd_bessel_eval(1,v01014__00DJ)

# op _00Gj_bessel_eval
# LANG: _00DJ --> _00Gk
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01128__00Gk=_00Gj_bessel_eval(0,v01014__00DJ)

# op _00Gl_bessel_eval
# LANG: _00DJ --> _00Gm
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01130__00Gm=_00Gl_bessel_eval(1,v01014__00DJ)

# op _00H0_power_combination_eval
# LANG: _00CV, _00Df --> _00H1
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01082__00H1 = (v01081__00Df**1)*(v01010__00CV**1)
v01082__00H1 = (v01082__00H1*_00H0_coeff).reshape((1, 2, 3, 40, 10))

# op _00Ha_power_combination_eval
# LANG: _00CV, _00CT --> _00Hb
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01076__00Hb = (v01010__00CV**1)*(v01016__00CT**1)
v01076__00Hb = (v01076__00Hb*_00Ha_coeff).reshape((1, 2, 3, 40, 10))

# op _00TM expand_array_eval
# LANG: V_aircraft --> _00TN
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01530__00TN = np.einsum('ab,c->abc', v01521_V_aircraft.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _00TS expand_array_eval
# LANG: time_vectors --> _00TT
# SHAPES: (2,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01536__00TT = np.einsum('c,ab->abc', v01535_time_vectors.reshape((2,)) ,np.ones((1, 3))).reshape((1, 3, 2))

# op _00Tg_power_combination_eval
# LANG: temperature, _00Tf --> density
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01511_density = (v01510__00Tf**1)*(v01506_temperature**-1)
v01511_density = (v01511_density*_00Tg_coeff).reshape((1,))

# op _00XC_bessel_eval
# LANG: _00Xj --> _00XD
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01627__00XD=_00XC_bessel_eval(0,v01610__00Xj)

# op _00XE_bessel_eval
# LANG: _00Xj --> _00XF
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01629__00XF=_00XE_bessel_eval(1,v01610__00Xj)

# op _00X__bessel_eval
# LANG: _00Xj --> _00Y0
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01639__00Y0=_00X__bessel_eval(0,v01610__00Xj)

# op _00Xk_bessel_eval
# LANG: _00Xj --> _00Xl
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01617__00Xl=_00Xk_bessel_eval(0,v01610__00Xj)

# op _00Xo_power_combination_eval
# LANG: _00Xn --> _00Xp
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01620__00Xp = (v01619__00Xn**2)
v01620__00Xp = (v01620__00Xp*_00Xo_coeff).reshape((1, 2, 3, 40, 10))

# op _00Xu_power_combination_eval
# LANG: _00Xt --> _00Xv
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01623__00Xv = (v01622__00Xt**2)
v01623__00Xv = (v01623__00Xv*_00Xu_coeff).reshape((1, 2, 3, 40, 10))

# op _00Xw_bessel_eval
# LANG: _00Xj --> _00Xx
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01625__00Xx=_00Xw_bessel_eval(1,v01610__00Xj)

# op _00Y3_power_combination_eval
# LANG: _00Y2 --> _00Y4
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01642__00Y4 = (v01641__00Y2**2)
v01642__00Y4 = (v01642__00Y4*_00Y3_coeff).reshape((1, 2, 3, 40, 10))

# op _00Y9_power_combination_eval
# LANG: _00Y8 --> _00Ya
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01645__00Ya = (v01644__00Y8**2)
v01645__00Ya = (v01645__00Ya*_00Y9_coeff).reshape((1, 2, 3, 40, 10))

# op _00Yb_bessel_eval
# LANG: _00Xj --> _00Yc
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01647__00Yc=_00Yb_bessel_eval(1,v01610__00Xj)

# op _00Yh_bessel_eval
# LANG: _00Xj --> _00Yi
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01649__00Yi=_00Yh_bessel_eval(1,v01610__00Xj)

# op _00ZE_power_combination_eval
# LANG: _00ZB, _00ZD --> _00ZF
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01715__00ZF = (v01714__00ZB**1)*(v01716__00ZD**1)
v01715__00ZF = (v01715__00ZF*_00ZE_coeff).reshape((1, 2, 3, 40, 10))

# op _00ZM_power_combination_eval
# LANG: _00ZJ, _00ZL --> _00ZN
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01719__00ZN = (v01718__00ZJ**1)*(v01720__00ZL**1)
v01719__00ZN = (v01719__00ZN*_00ZM_coeff).reshape((1, 2, 3, 40, 10))

# op _00ZO_bessel_eval
# LANG: _00Xj --> _00ZP
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01722__00ZP=_00ZO_bessel_eval(1,v01610__00Xj)

# op _00ZU_bessel_eval
# LANG: _00Xj --> _00ZV
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01724__00ZV=_00ZU_bessel_eval(0,v01610__00Xj)

# op _00ZW_bessel_eval
# LANG: _00Xj --> _00ZX
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01726__00ZX=_00ZW_bessel_eval(1,v01610__00Xj)

# op _00Zw_linear_combination_eval
# LANG: _00Zl, _00Zv --> _00Zx
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01706__00Zx = _00Zw_constant+1*v01701__00Zl+1*v01710__00Zv

# op _00_B_power_combination_eval
# LANG: _00Wv, _00WQ --> _00_C
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01678__00_C = (v01677__00WQ**1)*(v01606__00Wv**1)
v01678__00_C = (v01678__00_C*_00_B_coeff).reshape((1, 2, 3, 40, 10))

# op _00_L_power_combination_eval
# LANG: _00Wv, _00Wt --> _00_M
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01672__00_M = (v01606__00Wv**1)*(v01612__00Wt**1)
v01672__00_M = (v01672__00_M*_00_L_coeff).reshape((1, 2, 3, 40, 10))

# op _00bT expand_scalar_eval
# LANG: density --> _00bU
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0242_density = v0242_density.reshape((1,))
v0320__00bU = np.empty((1, 40, 30))
v0320__00bU.fill(v0242_density.item())
v0242_density = v0242_density.reshape((1, 1))

# op _00cI_power_combination_eval
# LANG: _00cF, _00cH --> _00cJ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0283__00cJ = (v0281__00cF**1)*(v0284__00cH**1)
v0283__00cJ = (v0283__00cJ*_00cI_coeff).reshape((1, 40, 30))

# op _00cK_power_combination_eval
# LANG: _00ch, _blade_solidity --> _00cL
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0286__00cL = (v0220__blade_solidity**1)*(v0289__00ch**1)
v0286__00cL = (v0286__00cL*_00cK_coeff).reshape((1, 40, 30))

# op _00cs_power_combination_eval
# LANG: _00cr, _tangential_inflow_velocity --> _00ct
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0275__00ct = (v0274__00cr**1)*(v0231__tangential_inflow_velocity**1)
v0275__00ct = (v0275__00ct*_00cs_coeff).reshape((1, 40, 30))

# op _00cw_power_combination_eval
# LANG: _00cv --> _00cx
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0278__00cx = (v0277__00cv**2)
v0278__00cx = (v0278__00cx*_00cw_coeff).reshape((1, 40, 30))

# op _00eY_power_combination_eval
# LANG: _00eX --> _00eZ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0374__00eZ = (v0373__00eX**1)
v0374__00eZ = (v0374__00eZ*_00eY_coeff).reshape((1, 40, 30))

# op _00f1_power_combination_eval
# LANG: _ux_2 --> _00f2
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0377__00f2 = (v0292__ux_2**2)
v0377__00f2 = (v0377__00f2*_00f1_coeff).reshape((1, 40, 30))

# op _00f7_power_combination_eval
# LANG: _00f6 --> _00f8
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0381__00f8 = (v0379__00f6**2)
v0381__00f8 = (v0381__00f8*_00f7_coeff).reshape((1, 40, 30))

# op _00kT_power_combination_eval
# LANG: propeller_radius --> _00kU
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0565__00kU = (v0495_propeller_radius**1)
v0565__00kU = (v0565__00kU*_00kT_coeff).reshape((1,))

# op _00qW expand_scalar_eval
# LANG: density --> _00qX
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0615_density = v0615_density.reshape((1,))
v0693__00qX = np.empty((1, 40, 30))
v0693__00qX.fill(v0615_density.item())
v0615_density = v0615_density.reshape((1, 1))

# op _00rL_power_combination_eval
# LANG: _00rI, _00rK --> _00rM
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0656__00rM = (v0654__00rI**1)*(v0657__00rK**1)
v0656__00rM = (v0656__00rM*_00rL_coeff).reshape((1, 40, 30))

# op _00rN_power_combination_eval
# LANG: _00rk, _blade_solidity --> _00rO
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0659__00rO = (v0593__blade_solidity**1)*(v0662__00rk**1)
v0659__00rO = (v0659__00rO*_00rN_coeff).reshape((1, 40, 30))

# op _00rv_power_combination_eval
# LANG: _00ru, _tangential_inflow_velocity --> _00rw
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0648__00rw = (v0647__00ru**1)*(v0604__tangential_inflow_velocity**1)
v0648__00rw = (v0648__00rw*_00rv_coeff).reshape((1, 40, 30))

# op _00rz_power_combination_eval
# LANG: _00ry --> _00rA
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0651__00rA = (v0650__00ry**2)
v0651__00rA = (v0651__00rA*_00rz_coeff).reshape((1, 40, 30))

# op _00u0_power_combination_eval
# LANG: _00t_ --> _00u1
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0747__00u1 = (v0746__00t_**1)
v0747__00u1 = (v0747__00u1*_00u0_coeff).reshape((1, 40, 30))

# op _00u4_power_combination_eval
# LANG: _ux_2 --> _00u5
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0750__00u5 = (v0665__ux_2**2)
v0750__00u5 = (v0750__00u5*_00u4_coeff).reshape((1, 40, 30))

# op _00ua_power_combination_eval
# LANG: _00u9 --> _00ub
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0754__00ub = (v0752__00u9**2)
v0754__00ub = (v0754__00ub*_00ua_coeff).reshape((1, 40, 30))

# op _00zG_power_combination_eval
# LANG: temperature, _00zF --> density
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0915_density = (v0914__00zF**1)*(v0910_temperature**-1)
v0915_density = (v0915_density*_00zG_coeff).reshape((1,))

# op _01CH_power_combination_eval
# LANG: _01CG, _dr --> _local_thrust
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02748__local_thrust = (v02747__01CG**1)*(v02625__dr**1)
v02748__local_thrust = (v02748__local_thrust*_01CH_coeff).reshape((1, 40, 30))

# op _01Ed_power_combination_eval
# LANG: _01Ec, _chord --> _01Ee
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02805__01Ee = (v02799__01Ec**1)*(v02632__chord**1)
v02805__01Ee = (v02805__01Ee*_01Ed_coeff).reshape((1, 40, 30))

# op _01KJ_linear_combination_eval
# LANG: _01KE, _01KI --> aircraft_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v02999_aircraft_z_pos = _01KJ_constant+1*v02985__01KE+1*v03000__01KI

# op _01KL expand_array_eval
# LANG: init_obs_x_loc --> _01KM
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03002__01KM = np.einsum('c,ab->abc', v03001_init_obs_x_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _01KN expand_array_eval
# LANG: init_obs_y_loc --> _01KO
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03010__01KO = np.einsum('c,ab->abc', v03009_init_obs_y_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _01KW_linear_combination_eval
# LANG: aircraft_x_pos, _01KV --> _01KX
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03004__01KX = _01KW_constant+1*v02986_aircraft_x_pos+1*v03006__01KV

# op _01L0_linear_combination_eval
# LANG: aircraft_y_pos, _01K_ --> _01L1
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03012__01L1 = _01L0_constant+1*v02997_aircraft_y_pos+1*v03007__01K_

# op _01nE_power_combination_eval
# LANG: _01nD, _dr --> _local_thrust
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02375__local_thrust = (v02374__01nD**1)*(v02252__dr**1)
v02375__local_thrust = (v02375__local_thrust*_01nE_coeff).reshape((1, 40, 30))

# op _01pa_power_combination_eval
# LANG: _01p9, _chord --> _01pb
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02432__01pb = (v02426__01p9**1)*(v02259__chord**1)
v02432__01pb = (v02432__01pb*_01pa_coeff).reshape((1, 40, 30))

# op _020L_linear_combination_eval
# LANG: _020G, _020K --> aircraft_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03513_aircraft_z_pos = _020L_constant+1*v03499__020G+1*v03514__020K

# op _020N expand_array_eval
# LANG: init_obs_x_loc --> _020O
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03516__020O = np.einsum('c,ab->abc', v03515_init_obs_x_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _020P expand_array_eval
# LANG: init_obs_y_loc --> _020Q
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03524__020Q = np.einsum('c,ab->abc', v03523_init_obs_y_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _020Y_linear_combination_eval
# LANG: aircraft_x_pos, _020X --> _020Z
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03518__020Z = _020Y_constant+1*v03500_aircraft_x_pos+1*v03520__020X

# op _0212_linear_combination_eval
# LANG: aircraft_y_pos, _0211 --> _0213
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03526__0213 = _0212_constant+1*v03511_aircraft_y_pos+1*v03521__0211

# op _005S_linear_combination_eval
# LANG: _005R, propeller_radius --> _005T
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0191__005T = _005S_constant+1*v0122_propeller_radius+-1*v0192__005R

# op _00Ae expand_array_eval
# LANG: aircraft_location --> _00Af
# SHAPES: (3, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0929__00Af = np.einsum('bc,a->abc', v0928_aircraft_location.reshape((3, 2)) ,np.ones((1,))).reshape((1, 3, 2))

# op _00Al_decompose_eval
# LANG: _00Ac --> _00Am, _00Au, _00AB
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0935__00Am = ((v0934__00Ac.flatten())[src_indices__00Am__00Al]).reshape((1, 1, 2))
v0936__00Au = ((v0934__00Ac.flatten())[src_indices__00Au__00Al]).reshape((1, 1, 2))
v0937__00AB = ((v0934__00Ac.flatten())[src_indices__00AB__00Al]).reshape((1, 1, 2))

# op _00An_decompose_eval
# LANG: _00Ai --> _00Ao, _00Av, _00AC
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0941__00Ao = ((v0940__00Ai.flatten())[src_indices__00Ao__00An]).reshape((1, 1, 2))
v0942__00Av = ((v0940__00Ai.flatten())[src_indices__00Av__00An]).reshape((1, 1, 2))
v0943__00AC = ((v0940__00Ai.flatten())[src_indices__00AC__00An]).reshape((1, 1, 2))

# op _00CO expand_scalar_eval
# LANG: density --> _00CP
# SHAPES: (1,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01073__00CP = np.empty((1, 2, 3, 40, 11))
v01073__00CP.fill(v0915_density.item())

# op _00DQ_power_combination_eval
# LANG: _00DL, _00DP --> _00DR
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01022__00DR = (v01021__00DL**1)*(v01024__00DP**1)
v01022__00DR = (v01022__00DR*_00DQ_coeff).reshape((1, 2, 3, 40, 10))

# op _00DY_power_combination_eval
# LANG: _00DV, _00DX --> _00DZ
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01028__00DZ = (v01027__00DV**1)*(v01029__00DX**1)
v01028__00DZ = (v01028__00DZ*_00DY_coeff).reshape((1, 2, 3, 40, 10))

# op _00E5_power_combination_eval
# LANG: _00E2, _00E4 --> _00E6
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01032__00E6 = (v01031__00E2**1)*(v01033__00E4**1)
v01032__00E6 = (v01032__00E6*_00E5_coeff).reshape((1, 2, 3, 40, 10))

# op _00E7_bessel_eval
# LANG: _00DJ --> _00E8
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01035__00E8=_00E7_bessel_eval(0,v01014__00DJ)

# op _00ED_power_combination_eval
# LANG: _00EA, _00EC --> _00EE
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01050__00EE = (v01049__00EA**1)*(v01051__00EC**1)
v01050__00EE = (v01050__00EE*_00ED_coeff).reshape((1, 2, 3, 40, 10))

# op _00EJ_power_combination_eval
# LANG: _00EI --> _00EK
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01054__00EK = (v01053__00EI**2)
v01054__00EK = (v01054__00EK*_00EJ_coeff).reshape((1, 2, 3, 40, 10))

# op _00EL_bessel_eval
# LANG: _00DJ --> _00EM
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01056__00EM=_00EL_bessel_eval(1,v01014__00DJ)

# op _00ET_bessel_eval
# LANG: _00DJ --> _00EU
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01060__00EU=_00ET_bessel_eval(1,v01014__00DJ)

# op _00Ed_bessel_eval
# LANG: _00DJ --> _00Ee
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01037__00Ee=_00Ed_bessel_eval(1,v01014__00DJ)

# op _00Ef_bessel_eval
# LANG: _00DJ --> _00Eg
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01039__00Eg=_00Ef_bessel_eval(0,v01014__00DJ)

# op _00Ev_power_combination_eval
# LANG: _00Eq, _00Eu --> _00Ew
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01044__00Ew = (v01043__00Eq**1)*(v01046__00Eu**1)
v01044__00Ew = (v01044__00Ew*_00Ev_coeff).reshape((1, 2, 3, 40, 10))

# op _00G5_linear_combination_eval
# LANG: _00FX, _00G4 --> _00G6
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01116__00G6 = _00G5_constant+1*v01110__00FX+1*v01119__00G4

# op _00Gf_power_combination_eval
# LANG: _00Gc, _00Ge --> _00Gg
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01125__00Gg = (v01123__00Gc**1)*(v01126__00Ge**1)
v01125__00Gg = (v01125__00Gg*_00Gf_coeff).reshape((1, 2, 3, 40, 10))

# op _00Gn_power_combination_eval
# LANG: _00Gk, _00Gm --> _00Go
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01129__00Go = (v01128__00Gk**1)*(v01130__00Gm**1)
v01129__00Go = (v01129__00Go*_00Gn_coeff).reshape((1, 2, 3, 40, 10))

# op _00Gp_bessel_eval
# LANG: _00DJ --> _00Gq
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01132__00Gq=_00Gp_bessel_eval(1,v01014__00DJ)

# op _00Gx_bessel_eval
# LANG: _00DJ --> _00Gy
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01136__00Gy=_00Gx_bessel_eval(1,v01014__00DJ)

# op _00H2_power_combination_eval
# LANG: _00CX, _00H1 --> _00H3
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01083__00H3 = (v01082__00H1**1)*(v01019__00CX**1)
v01083__00H3 = (v01083__00H3*_00H2_coeff).reshape((1, 2, 3, 40, 10))

# op _00Hc_power_combination_eval
# LANG: _00CX, _00Hb --> _00Hd
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01077__00Hd = (v01076__00Hb**1)*(v01019__00CX**1)
v01077__00Hd = (v01077__00Hd*_00Hc_coeff).reshape((1, 2, 3, 40, 10))

# op _00R2_power_combination_eval
# LANG: rotor_2_disk_origin --> origin
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((3,))
v01445_origin = (v022_rotor_2_disk_origin**1)
v01445_origin = (v01445_origin*_00R2_coeff).reshape((3,))
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((1, 3))

# op _00R5_power_combination_eval
# LANG: rotor_2_disk_in_plane_2 --> _00R6
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((3,))
v01464__00R6 = (v020_rotor_2_disk_in_plane_2**1)
v01464__00R6 = (v01464__00R6*_00R5_coeff).reshape((3,))
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((1, 3))

# op _00TP expand_array_eval
# LANG: aircraft_location --> _00TQ
# SHAPES: (3, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01525__00TQ = np.einsum('bc,a->abc', v01524_aircraft_location.reshape((3, 2)) ,np.ones((1,))).reshape((1, 3, 2))

# op _00TW_decompose_eval
# LANG: _00TN --> _00TX, _00U4, _00Ub
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01531__00TX = ((v01530__00TN.flatten())[src_indices__00TX__00TW]).reshape((1, 1, 2))
v01532__00U4 = ((v01530__00TN.flatten())[src_indices__00U4__00TW]).reshape((1, 1, 2))
v01533__00Ub = ((v01530__00TN.flatten())[src_indices__00Ub__00TW]).reshape((1, 1, 2))

# op _00TY_decompose_eval
# LANG: _00TT --> _00TZ, _00U5, _00Uc
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01537__00TZ = ((v01536__00TT.flatten())[src_indices__00TZ__00TY]).reshape((1, 1, 2))
v01538__00U5 = ((v01536__00TT.flatten())[src_indices__00U5__00TY]).reshape((1, 1, 2))
v01539__00Uc = ((v01536__00TT.flatten())[src_indices__00Uc__00TY]).reshape((1, 1, 2))

# op _00Wo expand_scalar_eval
# LANG: density --> _00Wp
# SHAPES: (1,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01669__00Wp = np.empty((1, 2, 3, 40, 11))
v01669__00Wp.fill(v01511_density.item())

# op _00XG_power_combination_eval
# LANG: _00XD, _00XF --> _00XH
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01628__00XH = (v01627__00XD**1)*(v01629__00XF**1)
v01628__00XH = (v01628__00XH*_00XG_coeff).reshape((1, 2, 3, 40, 10))

# op _00XI_bessel_eval
# LANG: _00Xj --> _00XJ
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01631__00XJ=_00XI_bessel_eval(0,v01610__00Xj)

# op _00XO_bessel_eval
# LANG: _00Xj --> _00XP
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01633__00XP=_00XO_bessel_eval(1,v01610__00Xj)

# op _00XQ_bessel_eval
# LANG: _00Xj --> _00XR
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01635__00XR=_00XQ_bessel_eval(0,v01610__00Xj)

# op _00Xq_power_combination_eval
# LANG: _00Xl, _00Xp --> _00Xr
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01618__00Xr = (v01617__00Xl**1)*(v01620__00Xp**1)
v01618__00Xr = (v01618__00Xr*_00Xq_coeff).reshape((1, 2, 3, 40, 10))

# op _00Xy_power_combination_eval
# LANG: _00Xv, _00Xx --> _00Xz
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01624__00Xz = (v01623__00Xv**1)*(v01625__00Xx**1)
v01624__00Xz = (v01624__00Xz*_00Xy_coeff).reshape((1, 2, 3, 40, 10))

# op _00Y5_power_combination_eval
# LANG: _00Y0, _00Y4 --> _00Y6
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01640__00Y6 = (v01639__00Y0**1)*(v01642__00Y4**1)
v01640__00Y6 = (v01640__00Y6*_00Y5_coeff).reshape((1, 2, 3, 40, 10))

# op _00Yd_power_combination_eval
# LANG: _00Ya, _00Yc --> _00Ye
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01646__00Ye = (v01645__00Ya**1)*(v01647__00Yc**1)
v01646__00Ye = (v01646__00Ye*_00Yd_coeff).reshape((1, 2, 3, 40, 10))

# op _00Yj_power_combination_eval
# LANG: _00Yi --> _00Yk
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01650__00Yk = (v01649__00Yi**2)
v01650__00Yk = (v01650__00Yk*_00Yj_coeff).reshape((1, 2, 3, 40, 10))

# op _00Yl_bessel_eval
# LANG: _00Xj --> _00Ym
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01652__00Ym=_00Yl_bessel_eval(1,v01610__00Xj)

# op _00Yt_bessel_eval
# LANG: _00Xj --> _00Yu
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01656__00Yu=_00Yt_bessel_eval(1,v01610__00Xj)

# op _00ZG_linear_combination_eval
# LANG: _00Zx, _00ZF --> _00ZH
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01712__00ZH = _00ZG_constant+1*v01706__00Zx+1*v01715__00ZF

# op _00ZQ_power_combination_eval
# LANG: _00ZN, _00ZP --> _00ZR
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01721__00ZR = (v01719__00ZN**1)*(v01722__00ZP**1)
v01721__00ZR = (v01721__00ZR*_00ZQ_coeff).reshape((1, 2, 3, 40, 10))

# op _00ZY_power_combination_eval
# LANG: _00ZV, _00ZX --> _00ZZ
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01725__00ZZ = (v01724__00ZV**1)*(v01726__00ZX**1)
v01725__00ZZ = (v01725__00ZZ*_00ZY_coeff).reshape((1, 2, 3, 40, 10))

# op _00Z__bessel_eval
# LANG: _00Xj --> _00_0
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01728__00_0=_00Z__bessel_eval(1,v01610__00Xj)

# op _00_7_bessel_eval
# LANG: _00Xj --> _00_8
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01732__00_8=_00_7_bessel_eval(1,v01610__00Xj)

# op _00_D_power_combination_eval
# LANG: _00Wx, _00_C --> _00_E
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01679__00_E = (v01678__00_C**1)*(v01615__00Wx**1)
v01679__00_E = (v01679__00_E*_00_D_coeff).reshape((1, 2, 3, 40, 10))

# op _00_N_power_combination_eval
# LANG: _00Wx, _00_M --> _00_O
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01673__00_O = (v01672__00_M**1)*(v01615__00Wx**1)
v01673__00_O = (v01673__00_O*_00_N_coeff).reshape((1, 2, 3, 40, 10))

# op _00cM_linear_combination_eval
# LANG: _00cJ, _00cL --> _00cN
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0285__00cN = _00cM_constant+1*v0283__00cJ+1*v0286__00cL

# op _00cy_power_combination_eval
# LANG: _00ct, _00cx --> _00cz
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0276__00cz = (v0275__00ct**1)*(v0278__00cx**1)
v0276__00cz = (v0276__00cz*_00cy_coeff).reshape((1, 40, 30))

# op _00dv_power_combination_eval
# LANG: _radius --> _00dw
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0318__00dw = (v0214__radius**1)
v0318__00dw = (v0318__00dw*_00dv_coeff).reshape((1, 40, 30))

# op _00e__power_combination_eval
# LANG: _00bU, _00eZ --> _00f0
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0375__00f0 = (v0374__00eZ**1)*(v0320__00bU**1)
v0375__00f0 = (v0375__00f0*_00e__coeff).reshape((1, 40, 30))

# op _00f9_linear_combination_eval
# LANG: _00f2, _00f8 --> _00fa
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0378__00fa = _00f9_constant+1*v0377__00f2+1*v0381__00f8

# op _00kV_linear_combination_eval
# LANG: _00kU, propeller_radius --> _00kW
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0564__00kW = _00kV_constant+1*v0495_propeller_radius+-1*v0565__00kU

# op _00rB_power_combination_eval
# LANG: _00rw, _00rA --> _00rC
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0649__00rC = (v0648__00rw**1)*(v0651__00rA**1)
v0649__00rC = (v0649__00rC*_00rB_coeff).reshape((1, 40, 30))

# op _00rP_linear_combination_eval
# LANG: _00rM, _00rO --> _00rQ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0658__00rQ = _00rP_constant+1*v0656__00rM+1*v0659__00rO

# op _00sy_power_combination_eval
# LANG: _radius --> _00sz
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0691__00sz = (v0587__radius**1)
v0691__00sz = (v0691__00sz*_00sy_coeff).reshape((1, 40, 30))

# op _00u2_power_combination_eval
# LANG: _00qX, _00u1 --> _00u3
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0748__00u3 = (v0747__00u1**1)*(v0693__00qX**1)
v0748__00u3 = (v0748__00u3*_00u2_coeff).reshape((1, 40, 30))

# op _00uc_linear_combination_eval
# LANG: _00u5, _00ub --> _00ud
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0751__00ud = _00uc_constant+1*v0750__00u5+1*v0754__00ub

# op _00xs_power_combination_eval
# LANG: rotor_1_disk_origin --> origin
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((3,))
v0849_origin = (v012_rotor_1_disk_origin**1)
v0849_origin = (v0849_origin*_00xs_coeff).reshape((3,))
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((1, 3))

# op _00xv_power_combination_eval
# LANG: rotor_1_disk_in_plane_2 --> _00xw
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((3,))
v0868__00xw = (v010_rotor_1_disk_in_plane_2**1)
v0868__00xw = (v0868__00xw*_00xv_coeff).reshape((3,))
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((1, 3))

# op _01Ef_power_combination_eval
# LANG: _01Ee, _dr --> _dD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02806__dD = (v02805__01Ee**1)*(v02625__dr**1)
v02806__dD = (v02806__dD*_01Ef_coeff).reshape((1, 40, 30))

# op _01He_power_combination_eval
# LANG: _local_thrust --> _dT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02749__dT = (v02748__local_thrust**1)
v02749__dT = (v02749__dT*_01He_coeff).reshape((1, 40, 30))

# op _01Ju_power_combination_eval
# LANG: altitude --> _01Jv
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02960__01Jv = (v02959_altitude**1)
v02960__01Jv = (v02960__01Jv*_01Ju_coeff).reshape((1,))

# op _01KP expand_array_eval
# LANG: init_obs_z_loc --> _01KQ
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03014__01KQ = np.einsum('c,ab->abc', v03013_init_obs_z_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _01KY_linear_combination_eval
# LANG: _01KM, _01KX --> rel_obs_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03003_rel_obs_x_pos = _01KY_constant+1*v03002__01KM+-1*v03004__01KX

# op _01L2_linear_combination_eval
# LANG: _01KO, _01L1 --> rel_obs_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03011_rel_obs_y_pos = _01L2_constant+1*v03010__01KO+-1*v03012__01L1

# op _01L5_linear_combination_eval
# LANG: aircraft_z_pos, _01L4 --> _01L6
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03016__01L6 = _01L5_constant+1*v02999_aircraft_z_pos+1*v03008__01L4

# op _01_w_power_combination_eval
# LANG: altitude --> _01_x
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03474__01_x = (v02959_altitude**1)
v03474__01_x = (v03474__01_x*_01_w_coeff).reshape((1,))

# op _01pc_power_combination_eval
# LANG: _01pb, _dr --> _dD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02433__dD = (v02432__01pb**1)*(v02252__dr**1)
v02433__dD = (v02433__dD*_01pc_coeff).reshape((1, 40, 30))

# op _01sb_power_combination_eval
# LANG: _local_thrust --> _dT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02376__dT = (v02375__local_thrust**1)
v02376__dT = (v02376__dT*_01sb_coeff).reshape((1, 40, 30))

# op _020R expand_array_eval
# LANG: init_obs_z_loc --> _020S
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03528__020S = np.einsum('c,ab->abc', v03527_init_obs_z_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _020__linear_combination_eval
# LANG: _020O, _020Z --> rel_obs_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03517_rel_obs_x_pos = _020__constant+1*v03516__020O+-1*v03518__020Z

# op _0214_linear_combination_eval
# LANG: _020Q, _0213 --> rel_obs_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03525_rel_obs_y_pos = _0214_constant+1*v03524__020Q+-1*v03526__0213

# op _0217_linear_combination_eval
# LANG: aircraft_z_pos, _0216 --> _0218
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03530__0218 = _0217_constant+1*v03513_aircraft_z_pos+1*v03522__0216

# op _005U_power_combination_eval
# LANG: _005T --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v0193_dr = (v0191__005T**1)
v0193_dr = (v0193_dr*_005U_coeff).reshape((1,))

# op _00AO expand_array_eval
# LANG: origin --> _00AP
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0952__00AP = np.einsum('b,ac->abc', v0849_origin.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _00Aj_decompose_eval
# LANG: _00Af --> _00Ak, _00At, _00AA
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0930__00Ak = ((v0929__00Af.flatten())[src_indices__00Ak__00Aj]).reshape((1, 1, 2))
v0931__00At = ((v0929__00Af.flatten())[src_indices__00At__00Aj]).reshape((1, 1, 2))
v0932__00AA = ((v0929__00Af.flatten())[src_indices__00AA__00Aj]).reshape((1, 1, 2))

# op _00Ap_power_combination_eval
# LANG: _00Am, _00Ao --> _00Aq
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0938__00Aq = (v0935__00Am**1)*(v0941__00Ao**1)
v0938__00Aq = (v0938__00Aq*_00Ap_coeff).reshape((1, 1, 2))

# op _00Aw_power_combination_eval
# LANG: _00Au, _00Av --> _00Ax
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0945__00Ax = (v0936__00Au**1)*(v0942__00Av**1)
v0945__00Ax = (v0945__00Ax*_00Aw_coeff).reshape((1, 1, 2))

# op _00D1_decompose_eval
# LANG: _00CP --> _00D2
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01074__00D2 = ((v01073__00CP.flatten())[src_indices__00D2__00D1]).reshape((1, 2, 3, 40, 10))

# op _00D__linear_combination_eval
# LANG: _00DR, _00DZ --> _00E0
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01025__00E0 = _00D__constant+1*v01022__00DR+-1*v01028__00DZ

# op _00E9_power_combination_eval
# LANG: _00E6, _00E8 --> _00Ea
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01034__00Ea = (v01032__00E6**1)*(v01035__00E8**1)
v01034__00Ea = (v01034__00Ea*_00E9_coeff).reshape((1, 2, 3, 40, 10))

# op _00EF_linear_combination_eval
# LANG: _00Ew, _00EE --> _00EG
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01047__00EG = _00EF_constant+1*v01044__00Ew+1*v01050__00EE

# op _00EN_power_combination_eval
# LANG: _00EK, _00EM --> _00EO
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01055__00EO = (v01054__00EK**1)*(v01056__00EM**1)
v01055__00EO = (v01055__00EO*_00EN_coeff).reshape((1, 2, 3, 40, 10))

# op _00ER_bessel_eval
# LANG: _00DJ --> _00ES
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01058__00ES=_00ER_bessel_eval(0,v01014__00DJ)

# op _00EV_power_combination_eval
# LANG: _00EU --> _00EW
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01061__00EW = (v01060__00EU**2)
v01061__00EW = (v01061__00EW*_00EV_coeff).reshape((1, 2, 3, 40, 10))

# op _00Eh_power_combination_eval
# LANG: _00Ee, _00Eg --> _00Ei
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01038__00Ei = (v01037__00Ee**1)*(v01039__00Eg**1)
v01038__00Ei = (v01038__00Ei*_00Eh_coeff).reshape((1, 2, 3, 40, 10))

# op _00Ej_bessel_eval
# LANG: _00DJ --> _00Ek
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01041__00Ek=_00Ej_bessel_eval(1,v01014__00DJ)

# op _00F2_bessel_eval
# LANG: _00DJ --> _00F3
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01063__00F3=_00F2_bessel_eval(1,v01014__00DJ)

# op _00F4_bessel_eval
# LANG: _00DJ --> _00F5
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01065__00F5=_00F4_bessel_eval(0,v01014__00DJ)

# op _00Fa_bessel_eval
# LANG: _00DJ --> _00Fb
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01068__00Fb=_00Fa_bessel_eval(0,v01014__00DJ)

# op _00Fc_bessel_eval
# LANG: _00DJ --> _00Fd
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01070__00Fd=_00Fc_bessel_eval(1,v01014__00DJ)

# op _00GH_bessel_eval
# LANG: _00DJ --> _00GI
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01140__00GI=_00GH_bessel_eval(1,v01014__00DJ)

# op _00GJ_bessel_eval
# LANG: _00DJ --> _00GK
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01142__00GK=_00GJ_bessel_eval(0,v01014__00DJ)

# op _00GP_bessel_eval
# LANG: _00DJ --> _00GQ
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01145__00GQ=_00GP_bessel_eval(0,v01014__00DJ)

# op _00GR_bessel_eval
# LANG: _00DJ --> _00GS
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01147__00GS=_00GR_bessel_eval(1,v01014__00DJ)

# op _00Gh_linear_combination_eval
# LANG: _00G6, _00Gg --> _00Gi
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01121__00Gi = _00Gh_constant+1*v01116__00G6+-1*v01125__00Gg

# op _00Gr_power_combination_eval
# LANG: _00Go, _00Gq --> _00Gs
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01131__00Gs = (v01129__00Go**1)*(v01132__00Gq**1)
v01131__00Gs = (v01131__00Gs*_00Gr_coeff).reshape((1, 2, 3, 40, 10))

# op _00Gv_bessel_eval
# LANG: _00DJ --> _00Gw
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01134__00Gw=_00Gv_bessel_eval(1,v01014__00DJ)

# op _00Gz_power_combination_eval
# LANG: _00Gy --> _00GA
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01137__00GA = (v01136__00Gy**2)
v01137__00GA = (v01137__00GA*_00Gz_coeff).reshape((1, 2, 3, 40, 10))

# op _00H4_power_combination_eval
# LANG: _00Dx, _00H3 --> _00H5
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01084__00H5 = (v01083__00H3**1)*(v01004__00Dx**-1)
v01084__00H5 = (v01084__00H5*_00H4_coeff).reshape((1, 2, 3, 40, 10))

# op _00He_linear_combination_eval
# LANG: _00Hd --> _00Hf
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01078__00Hf = _00He_constant+1*v01077__00Hd

# op _00RF cross_product_eval
# LANG: _00R0, _00R6 --> _00RG
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01465__00RG = np.cross(v01464__00R6, v01446__00R0, axisa = 0, axisb = 0, axisc = 0)

# op _00RW_power_combination_eval
# LANG: propeller_radius --> _00RX
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01469__00RX = (v01448_propeller_radius**1)
v01469__00RX = (v01469__00RX*_00RW_coeff).reshape((1,))

# op _00TU_decompose_eval
# LANG: _00TQ --> _00TV, _00U3, _00Ua
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01526__00TV = ((v01525__00TQ.flatten())[src_indices__00TV__00TU]).reshape((1, 1, 2))
v01527__00U3 = ((v01525__00TQ.flatten())[src_indices__00U3__00TU]).reshape((1, 1, 2))
v01528__00Ua = ((v01525__00TQ.flatten())[src_indices__00Ua__00TU]).reshape((1, 1, 2))

# op _00T__power_combination_eval
# LANG: _00TX, _00TZ --> _00U0
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01534__00U0 = (v01531__00TX**1)*(v01537__00TZ**1)
v01534__00U0 = (v01534__00U0*_00T__coeff).reshape((1, 1, 2))

# op _00U6_power_combination_eval
# LANG: _00U4, _00U5 --> _00U7
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01541__00U7 = (v01532__00U4**1)*(v01538__00U5**1)
v01541__00U7 = (v01541__00U7*_00U6_coeff).reshape((1, 1, 2))

# op _00Uo expand_array_eval
# LANG: origin --> _00Up
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01548__00Up = np.einsum('b,ac->abc', v01445_origin.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _00WC_decompose_eval
# LANG: _00Wp --> _00WD
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01670__00WD = ((v01669__00Wp.flatten())[src_indices__00WD__00WC]).reshape((1, 2, 3, 40, 10))

# op _00XA_linear_combination_eval
# LANG: _00Xr, _00Xz --> _00XB
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01621__00XB = _00XA_constant+1*v01618__00Xr+-1*v01624__00Xz

# op _00XK_power_combination_eval
# LANG: _00XH, _00XJ --> _00XL
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01630__00XL = (v01628__00XH**1)*(v01631__00XJ**1)
v01630__00XL = (v01630__00XL*_00XK_coeff).reshape((1, 2, 3, 40, 10))

# op _00XS_power_combination_eval
# LANG: _00XP, _00XR --> _00XT
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01634__00XT = (v01633__00XP**1)*(v01635__00XR**1)
v01634__00XT = (v01634__00XT*_00XS_coeff).reshape((1, 2, 3, 40, 10))

# op _00XU_bessel_eval
# LANG: _00Xj --> _00XV
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01637__00XV=_00XU_bessel_eval(1,v01610__00Xj)

# op _00YD_bessel_eval
# LANG: _00Xj --> _00YE
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01659__00YE=_00YD_bessel_eval(1,v01610__00Xj)

# op _00YF_bessel_eval
# LANG: _00Xj --> _00YG
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01661__00YG=_00YF_bessel_eval(0,v01610__00Xj)

# op _00YL_bessel_eval
# LANG: _00Xj --> _00YM
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01664__00YM=_00YL_bessel_eval(0,v01610__00Xj)

# op _00YN_bessel_eval
# LANG: _00Xj --> _00YO
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01666__00YO=_00YN_bessel_eval(1,v01610__00Xj)

# op _00Yf_linear_combination_eval
# LANG: _00Y6, _00Ye --> _00Yg
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01643__00Yg = _00Yf_constant+1*v01640__00Y6+1*v01646__00Ye

# op _00Yn_power_combination_eval
# LANG: _00Yk, _00Ym --> _00Yo
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01651__00Yo = (v01650__00Yk**1)*(v01652__00Ym**1)
v01651__00Yo = (v01651__00Yo*_00Yn_coeff).reshape((1, 2, 3, 40, 10))

# op _00Yr_bessel_eval
# LANG: _00Xj --> _00Ys
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01654__00Ys=_00Yr_bessel_eval(0,v01610__00Xj)

# op _00Yv_power_combination_eval
# LANG: _00Yu --> _00Yw
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01657__00Yw = (v01656__00Yu**2)
v01657__00Yw = (v01657__00Yw*_00Yv_coeff).reshape((1, 2, 3, 40, 10))

# op _00ZS_linear_combination_eval
# LANG: _00ZH, _00ZR --> _00ZT
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01717__00ZT = _00ZS_constant+1*v01712__00ZH+-1*v01721__00ZR

# op _00_1_power_combination_eval
# LANG: _00ZZ, _00_0 --> _00_2
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01727__00_2 = (v01725__00ZZ**1)*(v01728__00_0**1)
v01727__00_2 = (v01727__00_2*_00_1_coeff).reshape((1, 2, 3, 40, 10))

# op _00_5_bessel_eval
# LANG: _00Xj --> _00_6
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01730__00_6=_00_5_bessel_eval(1,v01610__00Xj)

# op _00_9_power_combination_eval
# LANG: _00_8 --> _00_a
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01733__00_a = (v01732__00_8**2)
v01733__00_a = (v01733__00_a*_00_9_coeff).reshape((1, 2, 3, 40, 10))

# op _00_F_power_combination_eval
# LANG: _00X7, _00_E --> _00_G
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01680__00_G = (v01679__00_E**1)*(v01600__00X7**-1)
v01680__00_G = (v01680__00_G*_00_F_coeff).reshape((1, 2, 3, 40, 10))

# op _00_P_linear_combination_eval
# LANG: _00_O --> _00_Q
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01674__00_Q = _00_P_constant+1*v01673__00_O

# op _00_h_bessel_eval
# LANG: _00Xj --> _00_i
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01736__00_i=_00_h_bessel_eval(1,v01610__00Xj)

# op _00_j_bessel_eval
# LANG: _00Xj --> _00_k
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01738__00_k=_00_j_bessel_eval(0,v01610__00Xj)

# op _00_p_bessel_eval
# LANG: _00Xj --> _00_q
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01741__00_q=_00_p_bessel_eval(0,v01610__00Xj)

# op _00_r_bessel_eval
# LANG: _00Xj --> _00_s
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01743__00_s=_00_r_bessel_eval(1,v01610__00Xj)

# op _00cO_power_combination_eval
# LANG: _00cz, _00cN --> _ux
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0279__ux = (v0276__00cz**1)*(v0285__00cN**-1)
v0279__ux = (v0279__ux*_00cO_coeff).reshape((1, 40, 30))

# op _00dx_power_combination_eval
# LANG: _00dw, _00bU --> _00dy
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0319__00dy = (v0318__00dw**1)*(v0320__00bU**1)
v0319__00dy = (v0319__00dy*_00dx_coeff).reshape((1, 40, 30))

# op _00fb_power_combination_eval
# LANG: _00f0, _00fa --> _00fc
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0376__00fc = (v0375__00f0**1)*(v0378__00fa**1)
v0376__00fc = (v0376__00fc*_00fb_coeff).reshape((1, 40, 30))

# op _00kX_power_combination_eval
# LANG: _00kW --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v0566_dr = (v0564__00kW**1)
v0566_dr = (v0566_dr*_00kX_coeff).reshape((1,))

# op _00rR_power_combination_eval
# LANG: _00rC, _00rQ --> _ux
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0652__ux = (v0649__00rC**1)*(v0658__00rQ**-1)
v0652__ux = (v0652__ux*_00rR_coeff).reshape((1, 40, 30))

# op _00sA_power_combination_eval
# LANG: _00sz, _00qX --> _00sB
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0692__00sB = (v0691__00sz**1)*(v0693__00qX**1)
v0692__00sB = (v0692__00sB*_00sA_coeff).reshape((1, 40, 30))

# op _00ue_power_combination_eval
# LANG: _00u3, _00ud --> _00uf
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0749__00uf = (v0748__00u3**1)*(v0751__00ud**1)
v0749__00uf = (v0749__00uf*_00ue_coeff).reshape((1, 40, 30))

# op _00y4 cross_product_eval
# LANG: _00xq, _00xw --> _00y5
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0869__00y5 = np.cross(v0868__00xw, v0850__00xq, axisa = 0, axisb = 0, axisc = 0)

# op _00yl_power_combination_eval
# LANG: propeller_radius --> _00ym
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0873__00ym = (v0852_propeller_radius**1)
v0873__00ym = (v0873__00ym*_00yl_coeff).reshape((1,))

# op _01Jw_linear_combination_eval
# LANG: _01Jv --> _01Jx
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02961__01Jx = _01Jw_constant+-1*v02960__01Jv

# op _01L7_linear_combination_eval
# LANG: _01KQ, _01L6 --> rel_obs_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03015_rel_obs_z_pos = _01L7_constant+1*v03014__01KQ+-1*v03016__01L6

# op _01Lb_power_combination_eval
# LANG: rel_obs_x_pos --> _01Lc
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03018__01Lc = (v03003_rel_obs_x_pos**2)
v03018__01Lc = (v03018__01Lc*_01Lb_coeff).reshape((1, 1, 2))

# op _01Ld_power_combination_eval
# LANG: rel_obs_y_pos --> _01Le
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03020__01Le = (v03011_rel_obs_y_pos**2)
v03020__01Le = (v03020__01Le*_01Ld_coeff).reshape((1, 1, 2))

# op _01M2 expand_array_eval
# LANG: _dD --> _01M3
# SHAPES: (1, 40, 30) --> (1, 3, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03042__01M3 = np.einsum('acd,b->abcd', v02806__dD.reshape((1, 40, 30)) ,np.ones((3,))).reshape((1, 3, 40, 30))

# op _01M5 expand_array_eval
# LANG: _dT --> _01M6
# SHAPES: (1, 40, 30) --> (1, 3, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03044__01M6 = np.einsum('acd,b->abcd', v02749__dT.reshape((1, 40, 30)) ,np.ones((3,))).reshape((1, 3, 40, 30))

# op _01_y_linear_combination_eval
# LANG: _01_x --> _01_z
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03475__01_z = _01_y_constant+-1*v03474__01_x

# op _0219_linear_combination_eval
# LANG: _020S, _0218 --> rel_obs_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03529_rel_obs_z_pos = _0219_constant+1*v03528__020S+-1*v03530__0218

# op _021d_power_combination_eval
# LANG: rel_obs_x_pos --> _021e
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03532__021e = (v03517_rel_obs_x_pos**2)
v03532__021e = (v03532__021e*_021d_coeff).reshape((1, 1, 2))

# op _021f_power_combination_eval
# LANG: rel_obs_y_pos --> _021g
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03534__021g = (v03525_rel_obs_y_pos**2)
v03534__021g = (v03534__021g*_021f_coeff).reshape((1, 1, 2))

# op _0224 expand_array_eval
# LANG: _dD --> _0225
# SHAPES: (1, 40, 30) --> (1, 3, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03556__0225 = np.einsum('acd,b->abcd', v02433__dD.reshape((1, 40, 30)) ,np.ones((3,))).reshape((1, 3, 40, 30))

# op _0227 expand_array_eval
# LANG: _dT --> _0228
# SHAPES: (1, 40, 30) --> (1, 3, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03558__0228 = np.einsum('acd,b->abcd', v02376__dT.reshape((1, 40, 30)) ,np.ones((3,))).reshape((1, 3, 40, 30))

# op _0071 expand_scalar_eval
# LANG: dr --> _dr
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_core_inputs_model
v0202__dr = np.empty((1, 40, 30))
v0202__dr.fill(v0193_dr.item())

# op _00AD_power_combination_eval
# LANG: _00AB, _00AC --> _00AE
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0947__00AE = (v0937__00AB**1)*(v0943__00AC**1)
v0947__00AE = (v0947__00AE*_00AD_coeff).reshape((1, 1, 2))

# op _00AQ_decompose_eval
# LANG: _00AP --> _00AR, _00AW, _00B0
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0953__00AR = ((v0952__00AP.flatten())[src_indices__00AR__00AQ]).reshape((1, 1, 2))
v0954__00AW = ((v0952__00AP.flatten())[src_indices__00AW__00AQ]).reshape((1, 1, 2))
v0955__00B0 = ((v0952__00AP.flatten())[src_indices__00B0__00AQ]).reshape((1, 1, 2))

# op _00Ar_linear_combination_eval
# LANG: _00Ak, _00Aq --> aircraft_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0933_aircraft_x_pos = _00Ar_constant+1*v0930__00Ak+1*v0938__00Aq

# op _00Ay_linear_combination_eval
# LANG: _00At, _00Ax --> aircraft_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0944_aircraft_y_pos = _00Ay_constant+1*v0931__00At+1*v0945__00Ax

# op _00EP_linear_combination_eval
# LANG: _00EG, _00EO --> _00EQ
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01052__00EQ = _00EP_constant+1*v01047__00EG+-1*v01055__00EO

# op _00EX_power_combination_eval
# LANG: _00ES, _00EW --> _00EY
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01059__00EY = (v01058__00ES**1)*(v01061__00EW**1)
v01059__00EY = (v01059__00EY*_00EX_coeff).reshape((1, 2, 3, 40, 10))

# op _00Eb_linear_combination_eval
# LANG: _00E0, _00Ea --> _00Ec
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01030__00Ec = _00Eb_constant+1*v01025__00E0+1*v01034__00Ea

# op _00El_power_combination_eval
# LANG: _00Ei, _00Ek --> _00Em
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01040__00Em = (v01038__00Ei**1)*(v01041__00Ek**1)
v01040__00Em = (v01040__00Em*_00El_coeff).reshape((1, 2, 3, 40, 10))

# op _00F6_linear_combination_eval
# LANG: _00F3, _00F5 --> _00F7
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01064__00F7 = _00F6_constant+1*v01063__00F3+1*v01065__00F5

# op _00Fe_linear_combination_eval
# LANG: _00Fb, _00Fd --> _00Ff
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01069__00Ff = _00Fe_constant+1*v01068__00Fb+-1*v01070__00Fd

# op _00GB_power_combination_eval
# LANG: _00Gw, _00GA --> _00GC
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01135__00GC = (v01134__00Gw**1)*(v01137__00GA**1)
v01135__00GC = (v01135__00GC*_00GB_coeff).reshape((1, 2, 3, 40, 10))

# op _00GL_linear_combination_eval
# LANG: _00GI, _00GK --> _00GM
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01141__00GM = _00GL_constant+1*v01140__00GI+1*v01142__00GK

# op _00GT_linear_combination_eval
# LANG: _00GQ, _00GS --> _00GU
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01146__00GU = _00GT_constant+1*v01145__00GQ+-1*v01147__00GS

# op _00Gt_linear_combination_eval
# LANG: _00Gi, _00Gs --> _00Gu
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01127__00Gu = _00Gt_constant+1*v01121__00Gi+-1*v01131__00Gs

# op _00H6_power_combination_eval
# LANG: _00H5 --> _00H7
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01085__00H7 = (v01084__00H5**1)
v01085__00H7 = (v01085__00H7*_00H6_coeff).reshape((1, 2, 3, 40, 10))

# op _00Hg_power_combination_eval
# LANG: _00D2, _00Hf --> _00Hh
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01075__00Hh = (v01074__00D2**1)*(v01078__00Hf**1)
v01075__00Hh = (v01075__00Hh*_00Hg_coeff).reshape((1, 2, 3, 40, 10))

# op _00RB_cos_eval
# LANG: theta --> _00RC
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v01461__00RC = np.cos(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00RH pnorm_eval
# LANG: _00RG --> _00RI
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01467__00RI = np.linalg.norm(v01465__00RG.flatten(), ord=2)

# op _00RY_power_combination_eval
# LANG: _00RX --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01470_dr = (v01469__00RX**1)
v01470_dr = (v01470_dr*_00RY_coeff).reshape((1,))

# op _00Rk_linear_combination_eval
# LANG: theta --> _00Rl
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v01452__00Rl = _00Rk_constant+1*v042_theta
v042_theta = v042_theta.reshape((1,))

# op _00Rm_linear_combination_eval
# LANG: theta --> _00Rn
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v01454__00Rn = _00Rm_constant+1*v042_theta
v042_theta = v042_theta.reshape((1,))

# op _00Rt_sin_eval
# LANG: theta --> _00Ru
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v01457__00Ru = np.sin(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00Rx_sin_eval
# LANG: theta --> _00Ry
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v01459__00Ry = np.sin(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00U1_linear_combination_eval
# LANG: _00TV, _00U0 --> aircraft_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01529_aircraft_x_pos = _00U1_constant+1*v01526__00TV+1*v01534__00U0

# op _00U8_linear_combination_eval
# LANG: _00U3, _00U7 --> aircraft_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01540_aircraft_y_pos = _00U8_constant+1*v01527__00U3+1*v01541__00U7

# op _00Ud_power_combination_eval
# LANG: _00Ub, _00Uc --> _00Ue
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01543__00Ue = (v01533__00Ub**1)*(v01539__00Uc**1)
v01543__00Ue = (v01543__00Ue*_00Ud_coeff).reshape((1, 1, 2))

# op _00Uq_decompose_eval
# LANG: _00Up --> _00Ur, _00Uw, _00UB
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01549__00Ur = ((v01548__00Up.flatten())[src_indices__00Ur__00Uq]).reshape((1, 1, 2))
v01550__00Uw = ((v01548__00Up.flatten())[src_indices__00Uw__00Uq]).reshape((1, 1, 2))
v01551__00UB = ((v01548__00Up.flatten())[src_indices__00UB__00Uq]).reshape((1, 1, 2))

# op _00XM_linear_combination_eval
# LANG: _00XB, _00XL --> _00XN
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01626__00XN = _00XM_constant+1*v01621__00XB+1*v01630__00XL

# op _00XW_power_combination_eval
# LANG: _00XT, _00XV --> _00XX
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01636__00XX = (v01634__00XT**1)*(v01637__00XV**1)
v01636__00XX = (v01636__00XX*_00XW_coeff).reshape((1, 2, 3, 40, 10))

# op _00YH_linear_combination_eval
# LANG: _00YE, _00YG --> _00YI
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01660__00YI = _00YH_constant+1*v01659__00YE+1*v01661__00YG

# op _00YP_linear_combination_eval
# LANG: _00YM, _00YO --> _00YQ
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01665__00YQ = _00YP_constant+1*v01664__00YM+-1*v01666__00YO

# op _00Yp_linear_combination_eval
# LANG: _00Yg, _00Yo --> _00Yq
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01648__00Yq = _00Yp_constant+1*v01643__00Yg+-1*v01651__00Yo

# op _00Yx_power_combination_eval
# LANG: _00Ys, _00Yw --> _00Yy
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01655__00Yy = (v01654__00Ys**1)*(v01657__00Yw**1)
v01655__00Yy = (v01655__00Yy*_00Yx_coeff).reshape((1, 2, 3, 40, 10))

# op _00_3_linear_combination_eval
# LANG: _00ZT, _00_2 --> _00_4
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01723__00_4 = _00_3_constant+1*v01717__00ZT+-1*v01727__00_2

# op _00_H_power_combination_eval
# LANG: _00_G --> _00_I
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01681__00_I = (v01680__00_G**1)
v01681__00_I = (v01681__00_I*_00_H_coeff).reshape((1, 2, 3, 40, 10))

# op _00_R_power_combination_eval
# LANG: _00WD, _00_Q --> _00_S
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01671__00_S = (v01670__00WD**1)*(v01674__00_Q**1)
v01671__00_S = (v01671__00_S*_00_R_coeff).reshape((1, 2, 3, 40, 10))

# op _00_b_power_combination_eval
# LANG: _00_6, _00_a --> _00_c
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01731__00_c = (v01730__00_6**1)*(v01733__00_a**1)
v01731__00_c = (v01731__00_c*_00_b_coeff).reshape((1, 2, 3, 40, 10))

# op _00_l_linear_combination_eval
# LANG: _00_i, _00_k --> _00_m
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01737__00_m = _00_l_constant+1*v01736__00_i+1*v01738__00_k

# op _00_t_linear_combination_eval
# LANG: _00_q, _00_s --> _00_u
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01742__00_u = _00_t_constant+1*v01741__00_q+-1*v01743__00_s

# op _00dB_linear_combination_eval
# LANG: _ux, _axial_inflow_velocity --> _00dC
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0323__00dC = _00dB_constant+1*v0279__ux+-1*v0221__axial_inflow_velocity

# op _00dz_power_combination_eval
# LANG: _ux, _00dy --> _00dA
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0321__00dA = (v0319__00dy**1)*(v0279__ux**1)
v0321__00dA = (v0321__00dA*_00dz_coeff).reshape((1, 40, 30))

# op _00fd_power_combination_eval
# LANG: _00fc, _chord --> _00fe
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0382__00fe = (v0376__00fc**1)*(v0209__chord**1)
v0382__00fe = (v0382__00fe*_00fd_coeff).reshape((1, 40, 30))

# op _00m4 expand_scalar_eval
# LANG: dr --> _dr
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_core_inputs_model
v0575__dr = np.empty((1, 40, 30))
v0575__dr.fill(v0566_dr.item())

# op _00sC_power_combination_eval
# LANG: _ux, _00sB --> _00sD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0694__00sD = (v0692__00sB**1)*(v0652__ux**1)
v0694__00sD = (v0694__00sD*_00sC_coeff).reshape((1, 40, 30))

# op _00sE_linear_combination_eval
# LANG: _ux, _axial_inflow_velocity --> _00sF
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0696__00sF = _00sE_constant+1*v0652__ux+-1*v0594__axial_inflow_velocity

# op _00ug_power_combination_eval
# LANG: _00uf, _chord --> _00uh
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0755__00uh = (v0749__00uf**1)*(v0582__chord**1)
v0755__00uh = (v0755__00uh*_00ug_coeff).reshape((1, 40, 30))

# op _00xK_linear_combination_eval
# LANG: theta --> _00xL
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v0856__00xL = _00xK_constant+1*v042_theta
v042_theta = v042_theta.reshape((1,))

# op _00xM_linear_combination_eval
# LANG: theta --> _00xN
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v0858__00xN = _00xM_constant+1*v042_theta
v042_theta = v042_theta.reshape((1,))

# op _00xT_sin_eval
# LANG: theta --> _00xU
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v0861__00xU = np.sin(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00xX_sin_eval
# LANG: theta --> _00xY
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v0863__00xY = np.sin(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00y0_cos_eval
# LANG: theta --> _00y1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v0865__00y1 = np.cos(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00y6 pnorm_eval
# LANG: _00y5 --> _00y7
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0871__00y7 = np.linalg.norm(v0869__00y5.flatten(), ord=2)

# op _00yn_power_combination_eval
# LANG: _00ym --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0874_dr = (v0873__00ym**1)
v0874_dr = (v0874_dr*_00yn_coeff).reshape((1,))

# op _01Jy_power_combination_eval
# LANG: _01Jx --> _01Jz
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02962__01Jz = (v02961__01Jx**1)
v02962__01Jz = (v02962__01Jz*_01Jy_coeff).reshape((1,))

# op _01Lf_linear_combination_eval
# LANG: _01Lc, _01Le --> _01Lg
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03019__01Lg = _01Lf_constant+1*v03018__01Lc+1*v03020__01Le

# op _01Lh_power_combination_eval
# LANG: rel_obs_z_pos --> _01Li
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03022__01Li = (v03015_rel_obs_z_pos**2)
v03022__01Li = (v03022__01Li*_01Lh_coeff).reshape((1, 1, 2))

# op _01M7_single_tensor_sum_with_axis_eval
# LANG: _01M3 --> aaa
# SHAPES: (1, 3, 40, 30) --> (1, 3, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03043_aaa = np.sum(v03042__01M3, axis = (2,)).reshape((1, 3, 30))

# op _01M9_single_tensor_sum_with_axis_eval
# LANG: _01M6 --> bbb
# SHAPES: (1, 3, 40, 30) --> (1, 3, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03045_bbb = np.sum(v03044__01M6, axis = (2,)).reshape((1, 3, 30))

# op _01Mg_sin_eval
# LANG: n_theta_prod --> _01Mh
# SHAPES: (11, 30) --> (11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03055__01Mh = np.sin(v03048_n_theta_prod)

# op _01Ob expand_scalar_eval
# LANG: Vx --> _01Oc
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03094__01Oc = np.empty((1, 2))
v03094__01Oc.fill(v02074_u.item())

# op _01Oe expand_scalar_eval
# LANG: Vy --> _01Of
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03097__01Of = np.empty((1, 2))
v03097__01Of.fill(v02079_v.item())

# op _01Oh expand_scalar_eval
# LANG: Vz --> _01Oi
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03099__01Oi = np.empty((1, 2))
v03099__01Oi.fill(v02083_w.item())

# op _01_A_power_combination_eval
# LANG: _01_z --> _01_B
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03476__01_B = (v03475__01_z**1)
v03476__01_B = (v03476__01_B*_01_A_coeff).reshape((1,))

# op _021h_linear_combination_eval
# LANG: _021e, _021g --> _021i
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03533__021i = _021h_constant+1*v03532__021e+1*v03534__021g

# op _021j_power_combination_eval
# LANG: rel_obs_z_pos --> _021k
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03536__021k = (v03529_rel_obs_z_pos**2)
v03536__021k = (v03536__021k*_021j_coeff).reshape((1, 1, 2))

# op _0229_single_tensor_sum_with_axis_eval
# LANG: _0225 --> aaa
# SHAPES: (1, 3, 40, 30) --> (1, 3, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03557_aaa = np.sum(v03556__0225, axis = (2,)).reshape((1, 3, 30))

# op _022b_single_tensor_sum_with_axis_eval
# LANG: _0228 --> bbb
# SHAPES: (1, 3, 40, 30) --> (1, 3, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03559_bbb = np.sum(v03558__0228, axis = (2,)).reshape((1, 3, 30))

# op _022i_sin_eval
# LANG: n_theta_prod --> _022j
# SHAPES: (11, 30) --> (11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03569__022j = np.sin(v03562_n_theta_prod)

# op _024d expand_scalar_eval
# LANG: Vx --> _024e
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03608__024e = np.empty((1, 2))
v03608__024e.fill(v02074_u.item())

# op _024g expand_scalar_eval
# LANG: Vy --> _024h
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03611__024h = np.empty((1, 2))
v03611__024h.fill(v02079_v.item())

# op _024j expand_scalar_eval
# LANG: Vz --> _024k
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03613__024k = np.empty((1, 2))
v03613__024k.fill(v02083_w.item())

# op _00AF_linear_combination_eval
# LANG: _00AA, _00AE --> aircraft_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0946_aircraft_z_pos = _00AF_constant+1*v0932__00AA+1*v0947__00AE

# op _00AH expand_array_eval
# LANG: init_obs_x_loc --> _00AI
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0949__00AI = np.einsum('c,ab->abc', v0948_init_obs_x_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00AJ expand_array_eval
# LANG: init_obs_y_loc --> _00AK
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0957__00AK = np.einsum('c,ab->abc', v0956_init_obs_y_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00AS_linear_combination_eval
# LANG: aircraft_x_pos, _00AR --> _00AT
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0951__00AT = _00AS_constant+1*v0933_aircraft_x_pos+1*v0953__00AR

# op _00AX_linear_combination_eval
# LANG: aircraft_y_pos, _00AW --> _00AY
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0959__00AY = _00AX_constant+1*v0944_aircraft_y_pos+1*v0954__00AW

# op _00Cq expand_scalar_eval
# LANG: dr --> _00Cr
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0992__00Cr = np.empty((1, 40, 30))
v0992__00Cr.fill(v0874_dr.item())

# op _00EZ_linear_combination_eval
# LANG: _00EQ, _00EY --> _00E_
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01057__00E_ = _00EZ_constant+1*v01052__00EQ+-1*v01059__00EY

# op _00En_linear_combination_eval
# LANG: _00Ec, _00Em --> _00Eo
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01036__00Eo = _00En_constant+1*v01030__00Ec+-1*v01040__00Em

# op _00F8_power_combination_eval
# LANG: _00F7 --> _00F9
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01066__00F9 = (v01064__00F7**2)
v01066__00F9 = (v01066__00F9*_00F8_coeff).reshape((1, 2, 3, 40, 10))

# op _00Fg_power_combination_eval
# LANG: _00Ff --> _00Fh
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01071__00Fh = (v01069__00Ff**2)
v01071__00Fh = (v01071__00Fh*_00Fg_coeff).reshape((1, 2, 3, 40, 10))

# op _00GD_linear_combination_eval
# LANG: _00Gu, _00GC --> _00GE
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01133__00GE = _00GD_constant+1*v01127__00Gu+1*v01135__00GC

# op _00GN_power_combination_eval
# LANG: _00GM --> _00GO
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01143__00GO = (v01141__00GM**2)
v01143__00GO = (v01143__00GO*_00GN_coeff).reshape((1, 2, 3, 40, 10))

# op _00GV_power_combination_eval
# LANG: _00GU --> _00GW
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01148__00GW = (v01146__00GU**2)
v01148__00GW = (v01148__00GW*_00GV_coeff).reshape((1, 2, 3, 40, 10))

# op _00H8_power_combination_eval
# LANG: _00H7 --> _00H9
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01086__00H9 = (v01085__00H7**1)
v01086__00H9 = (v01086__00H9*_00H8_coeff).reshape((1, 2, 3, 40, 10))

# op _00Hi_power_combination_eval
# LANG: _00D0, _00Hh --> _00Hj
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01079__00Hj = (v01075__00Hh**1)*(v01013__00D0**1)
v01079__00Hj = (v01079__00Hj*_00Hi_coeff).reshape((1, 2, 3, 40, 10))

# op _00RD_power_combination_eval
# LANG: _00RC --> _00RE
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01462__00RE = (v01461__00RC**1)
v01462__00RE = (v01462__00RE*_00RD_coeff).reshape((1, 1))

# op _00RJ expand_scalar_eval
# LANG: _00RI --> _00RK
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01468__00RK = np.empty((3,))
v01468__00RK.fill(v01467__00RI.item())

# op _00Ro_power_combination_eval
# LANG: _00Rl, _00Rn --> _00Rp
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01453__00Rp = (v01452__00Rl**1)*(v01454__00Rn**-1)
v01453__00Rp = (v01453__00Rp*_00Ro_coeff).reshape((1, 1))

# op _00Rr_cos_eval
# LANG: theta --> _00Rs
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v01456__00Rs = np.cos(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00Rv_power_combination_eval
# LANG: _00Ru --> _00Rw
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01458__00Rw = (v01457__00Ru**1)
v01458__00Rw = (v01458__00Rw*_00Rv_coeff).reshape((1, 1))

# op _00Rz_power_combination_eval
# LANG: _00Ry --> _00RA
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01460__00RA = (v01459__00Ry**1)
v01460__00RA = (v01460__00RA*_00Rz_coeff).reshape((1, 1))

# op _00Uf_linear_combination_eval
# LANG: _00Ua, _00Ue --> aircraft_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01542_aircraft_z_pos = _00Uf_constant+1*v01528__00Ua+1*v01543__00Ue

# op _00Uh expand_array_eval
# LANG: init_obs_x_loc --> _00Ui
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01545__00Ui = np.einsum('c,ab->abc', v01544_init_obs_x_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00Uj expand_array_eval
# LANG: init_obs_y_loc --> _00Uk
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01553__00Uk = np.einsum('c,ab->abc', v01552_init_obs_y_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00Us_linear_combination_eval
# LANG: aircraft_x_pos, _00Ur --> _00Ut
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01547__00Ut = _00Us_constant+1*v01529_aircraft_x_pos+1*v01549__00Ur

# op _00Ux_linear_combination_eval
# LANG: aircraft_y_pos, _00Uw --> _00Uy
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01555__00Uy = _00Ux_constant+1*v01540_aircraft_y_pos+1*v01550__00Uw

# op _00W0 expand_scalar_eval
# LANG: dr --> _00W1
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01588__00W1 = np.empty((1, 40, 30))
v01588__00W1.fill(v01470_dr.item())

# op _00XY_linear_combination_eval
# LANG: _00XN, _00XX --> _00XZ
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01632__00XZ = _00XY_constant+1*v01626__00XN+-1*v01636__00XX

# op _00YJ_power_combination_eval
# LANG: _00YI --> _00YK
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01662__00YK = (v01660__00YI**2)
v01662__00YK = (v01662__00YK*_00YJ_coeff).reshape((1, 2, 3, 40, 10))

# op _00YR_power_combination_eval
# LANG: _00YQ --> _00YS
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01667__00YS = (v01665__00YQ**2)
v01667__00YS = (v01667__00YS*_00YR_coeff).reshape((1, 2, 3, 40, 10))

# op _00Yz_linear_combination_eval
# LANG: _00Yq, _00Yy --> _00YA
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01653__00YA = _00Yz_constant+1*v01648__00Yq+-1*v01655__00Yy

# op _00_J_power_combination_eval
# LANG: _00_I --> _00_K
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01682__00_K = (v01681__00_I**1)
v01682__00_K = (v01682__00_K*_00_J_coeff).reshape((1, 2, 3, 40, 10))

# op _00_T_power_combination_eval
# LANG: _00WB, _00_S --> _00_U
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01675__00_U = (v01671__00_S**1)*(v01609__00WB**1)
v01675__00_U = (v01675__00_U*_00_T_coeff).reshape((1, 2, 3, 40, 10))

# op _00_d_linear_combination_eval
# LANG: _00_4, _00_c --> _00_e
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01729__00_e = _00_d_constant+1*v01723__00_4+1*v01731__00_c

# op _00_n_power_combination_eval
# LANG: _00_m --> _00_o
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01739__00_o = (v01737__00_m**2)
v01739__00_o = (v01739__00_o*_00_n_coeff).reshape((1, 2, 3, 40, 10))

# op _00_v_power_combination_eval
# LANG: _00_u --> _00_w
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01744__00_w = (v01742__00_u**2)
v01744__00_w = (v01744__00_w*_00_v_coeff).reshape((1, 2, 3, 40, 10))

# op _00dD_power_combination_eval
# LANG: _00dA, _00dC --> _00dE
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0322__00dE = (v0321__00dA**1)*(v0323__00dC**1)
v0322__00dE = (v0322__00dE*_00dD_coeff).reshape((1, 40, 30))

# op _00ff_power_combination_eval
# LANG: _00fe, _dr --> _dD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0383__dD = (v0382__00fe**1)*(v0202__dr**1)
v0383__dD = (v0383__dD*_00ff_coeff).reshape((1, 40, 30))

# op _00sG_power_combination_eval
# LANG: _00sD, _00sF --> _00sH
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0695__00sH = (v0694__00sD**1)*(v0696__00sF**1)
v0695__00sH = (v0695__00sH*_00sG_coeff).reshape((1, 40, 30))

# op _00ui_power_combination_eval
# LANG: _00uh, _dr --> _dD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0756__dD = (v0755__00uh**1)*(v0575__dr**1)
v0756__dD = (v0756__dD*_00ui_coeff).reshape((1, 40, 30))

# op _00xO_power_combination_eval
# LANG: _00xL, _00xN --> _00xP
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0857__00xP = (v0856__00xL**1)*(v0858__00xN**-1)
v0857__00xP = (v0857__00xP*_00xO_coeff).reshape((1, 1))

# op _00xR_cos_eval
# LANG: theta --> _00xS
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v042_theta = v042_theta.reshape((1, 1))
v0860__00xS = np.cos(v042_theta)
v042_theta = v042_theta.reshape((1,))

# op _00xV_power_combination_eval
# LANG: _00xU --> _00xW
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0862__00xW = (v0861__00xU**1)
v0862__00xW = (v0862__00xW*_00xV_coeff).reshape((1, 1))

# op _00xZ_power_combination_eval
# LANG: _00xY --> _00x_
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0864__00x_ = (v0863__00xY**1)
v0864__00x_ = (v0864__00x_*_00xZ_coeff).reshape((1, 1))

# op _00y2_power_combination_eval
# LANG: _00y1 --> _00y3
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0866__00y3 = (v0865__00y1**1)
v0866__00y3 = (v0866__00y3*_00y2_coeff).reshape((1, 1))

# op _00y8 expand_scalar_eval
# LANG: _00y7 --> _00y9
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0872__00y9 = np.empty((3,))
v0872__00y9.fill(v0871__00y7.item())

# op _01JA_linear_combination_eval
# LANG: _01Jz --> temperature
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02963_temperature = _01JA_constant+1*v02962__01Jz

# op _01Lj_linear_combination_eval
# LANG: _01Lg, _01Li --> _01Lk
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03021__01Lk = _01Lj_constant+1*v03019__01Lg+1*v03022__01Li

# op _01Mc_cos_eval
# LANG: n_theta_prod --> _01Md
# SHAPES: (11, 30) --> (11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03049__01Md = np.cos(v03048_n_theta_prod)

# op _01Mi expand_array_eval
# LANG: _01Mh --> _01Mj
# SHAPES: (11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03056__01Mj = np.einsum('cd,ab->abcd', v03055__01Mh.reshape((11, 30)) ,np.ones((1, 3))).reshape((1, 3, 11, 30))

# op _01Ms expand_array_eval
# LANG: bbb --> _01Mt
# SHAPES: (1, 3, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03053__01Mt = np.einsum('abd,c->abcd', v03045_bbb.reshape((1, 3, 30)) ,np.ones((11,))).reshape((1, 3, 11, 30))

# op _01My expand_array_eval
# LANG: aaa --> _01Mz
# SHAPES: (1, 3, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03058__01Mz = np.einsum('abd,c->abcd', v03043_aaa.reshape((1, 3, 30)) ,np.ones((11,))).reshape((1, 3, 11, 30))

# op _01Ol reshape_eval
# LANG: _01Oc --> _01Om
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03095__01Om = v03094__01Oc.reshape((1, 1, 2))

# op _01Oo reshape_eval
# LANG: _01Of --> _01Op
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03098__01Op = v03097__01Of.reshape((1, 1, 2))

# op _01Oq reshape_eval
# LANG: _01Oi --> _01Or
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03100__01Or = v03099__01Oi.reshape((1, 1, 2))

# op _01_C_linear_combination_eval
# LANG: _01_B --> temperature
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03477_temperature = _01_C_constant+1*v03476__01_B

# op _021l_linear_combination_eval
# LANG: _021i, _021k --> _021m
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03535__021m = _021l_constant+1*v03533__021i+1*v03536__021k

# op _022A expand_array_eval
# LANG: aaa --> _022B
# SHAPES: (1, 3, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03572__022B = np.einsum('abd,c->abcd', v03557_aaa.reshape((1, 3, 30)) ,np.ones((11,))).reshape((1, 3, 11, 30))

# op _022e_cos_eval
# LANG: n_theta_prod --> _022f
# SHAPES: (11, 30) --> (11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03563__022f = np.cos(v03562_n_theta_prod)

# op _022k expand_array_eval
# LANG: _022j --> _022l
# SHAPES: (11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03570__022l = np.einsum('cd,ab->abcd', v03569__022j.reshape((11, 30)) ,np.ones((1, 3))).reshape((1, 3, 11, 30))

# op _022u expand_array_eval
# LANG: bbb --> _022v
# SHAPES: (1, 3, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03567__022v = np.einsum('abd,c->abcd', v03559_bbb.reshape((1, 3, 30)) ,np.ones((11,))).reshape((1, 3, 11, 30))

# op _024n reshape_eval
# LANG: _024e --> _024o
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03609__024o = v03608__024e.reshape((1, 1, 2))

# op _024q reshape_eval
# LANG: _024h --> _024r
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03612__024r = v03611__024h.reshape((1, 1, 2))

# op _024s reshape_eval
# LANG: _024k --> _024t
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03614__024t = v03613__024k.reshape((1, 1, 2))

# op _00AL expand_array_eval
# LANG: init_obs_z_loc --> _00AM
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0961__00AM = np.einsum('c,ab->abc', v0960_init_obs_z_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00AU_linear_combination_eval
# LANG: _00AI, _00AT --> rel_obs_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0950_rel_obs_x_pos = _00AU_constant+1*v0949__00AI+-1*v0951__00AT

# op _00AZ_linear_combination_eval
# LANG: _00AK, _00AY --> rel_obs_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0958_rel_obs_y_pos = _00AZ_constant+1*v0957__00AK+-1*v0959__00AY

# op _00B1_linear_combination_eval
# LANG: aircraft_z_pos, _00B0 --> _00B2
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0963__00B2 = _00B1_constant+1*v0946_aircraft_z_pos+1*v0955__00B0

# op _00Cs_power_combination_eval
# LANG: _00Cr, _dD --> bbb
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0991_bbb = (v0756__dD**1)*(v0992__00Cr**-1)
v0991_bbb = (v0991_bbb*_00Cs_coeff).reshape((1, 40, 30))

# op _00F0_linear_combination_eval
# LANG: _00Eo, _00E_ --> _00F1
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01042__00F1 = _00F0_constant+1*v01036__00Eo+-1*v01057__00E_

# op _00Fi_linear_combination_eval
# LANG: _00F9, _00Fh --> _00Fj
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01067__00Fj = _00Fi_constant+1*v01066__00F9+1*v01071__00Fh

# op _00GF_linear_combination_eval
# LANG: _00GE --> _00GG
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01138__00GG = _00GF_constant+-1*v01133__00GE

# op _00GX_linear_combination_eval
# LANG: _00GO, _00GW --> _00GY
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01144__00GY = _00GX_constant+1*v01143__00GO+1*v01148__00GW

# op _00Hk_power_combination_eval
# LANG: _00Hj, _00H9 --> _00Hl
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01080__00Hl = (v01079__00Hj**1)*(v01086__00H9**1)
v01080__00Hl = (v01080__00Hl*_00Hk_coeff).reshape((1, 2, 3, 40, 10))

# op _00RL_power_combination_eval
# LANG: _00RG, _00RK --> _00RM
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01466__00RM = (v01465__00RG**1)*(v01468__00RK**-1)
v01466__00RM = (v01466__00RM*_00RL_coeff).reshape((3,))

# op _00Rq_indexed_passthrough_eval
# LANG: _00Rp, _00Rs, _00Rw, _00RA, _00RE --> rot_mat
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01455_rot_mat__temp[i_v01453__00Rp__00Rq_indexed_passthrough_eval] = v01453__00Rp.flatten()
v01455_rot_mat = v01455_rot_mat__temp.copy()
v01455_rot_mat__temp[i_v01456__00Rs__00Rq_indexed_passthrough_eval] = v01456__00Rs.flatten()
v01455_rot_mat = v01455_rot_mat__temp.copy()
v01455_rot_mat__temp[i_v01458__00Rw__00Rq_indexed_passthrough_eval] = v01458__00Rw.flatten()
v01455_rot_mat = v01455_rot_mat__temp.copy()
v01455_rot_mat__temp[i_v01460__00RA__00Rq_indexed_passthrough_eval] = v01460__00RA.flatten()
v01455_rot_mat = v01455_rot_mat__temp.copy()
v01455_rot_mat__temp[i_v01462__00RE__00Rq_indexed_passthrough_eval] = v01462__00RE.flatten()
v01455_rot_mat = v01455_rot_mat__temp.copy()

# op _00UC_linear_combination_eval
# LANG: aircraft_z_pos, _00UB --> _00UD
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01559__00UD = _00UC_constant+1*v01542_aircraft_z_pos+1*v01551__00UB

# op _00Ul expand_array_eval
# LANG: init_obs_z_loc --> _00Um
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01557__00Um = np.einsum('c,ab->abc', v01556_init_obs_z_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00Uu_linear_combination_eval
# LANG: _00Ui, _00Ut --> rel_obs_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01546_rel_obs_x_pos = _00Uu_constant+1*v01545__00Ui+-1*v01547__00Ut

# op _00Uz_linear_combination_eval
# LANG: _00Uk, _00Uy --> rel_obs_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01554_rel_obs_y_pos = _00Uz_constant+1*v01553__00Uk+-1*v01555__00Uy

# op _00W2_power_combination_eval
# LANG: _00W1, _dD --> bbb
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01587_bbb = (v0383__dD**1)*(v01588__00W1**-1)
v01587_bbb = (v01587_bbb*_00W2_coeff).reshape((1, 40, 30))

# op _00YB_linear_combination_eval
# LANG: _00XZ, _00YA --> _00YC
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01638__00YC = _00YB_constant+1*v01632__00XZ+-1*v01653__00YA

# op _00YT_linear_combination_eval
# LANG: _00YK, _00YS --> _00YU
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01663__00YU = _00YT_constant+1*v01662__00YK+1*v01667__00YS

# op _00_V_power_combination_eval
# LANG: _00_U, _00_K --> _00_W
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01676__00_W = (v01675__00_U**1)*(v01682__00_K**1)
v01676__00_W = (v01676__00_W*_00_V_coeff).reshape((1, 2, 3, 40, 10))

# op _00_f_linear_combination_eval
# LANG: _00_e --> _00_g
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01734__00_g = _00_f_constant+-1*v01729__00_e

# op _00_x_linear_combination_eval
# LANG: _00_o, _00_w --> _00_y
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01740__00_y = _00_x_constant+1*v01739__00_o+1*v01744__00_w

# op _00dF_power_combination_eval
# LANG: _00dE, prandtl_loss_factor --> _00dG
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0324__00dG = (v0322__00dE**1)*(v0264_prandtl_loss_factor**1)
v0324__00dG = (v0324__00dG*_00dF_coeff).reshape((1, 40, 30))

# op _00sI_power_combination_eval
# LANG: _00sH, prandtl_loss_factor --> _00sJ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0697__00sJ = (v0695__00sH**1)*(v0637_prandtl_loss_factor**1)
v0697__00sJ = (v0697__00sJ*_00sI_coeff).reshape((1, 40, 30))

# op _00xQ_indexed_passthrough_eval
# LANG: _00xP, _00xS, _00xW, _00x_, _00y3 --> rot_mat
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0859_rot_mat__temp[i_v0857__00xP__00xQ_indexed_passthrough_eval] = v0857__00xP.flatten()
v0859_rot_mat = v0859_rot_mat__temp.copy()
v0859_rot_mat__temp[i_v0860__00xS__00xQ_indexed_passthrough_eval] = v0860__00xS.flatten()
v0859_rot_mat = v0859_rot_mat__temp.copy()
v0859_rot_mat__temp[i_v0862__00xW__00xQ_indexed_passthrough_eval] = v0862__00xW.flatten()
v0859_rot_mat = v0859_rot_mat__temp.copy()
v0859_rot_mat__temp[i_v0864__00x___00xQ_indexed_passthrough_eval] = v0864__00x_.flatten()
v0859_rot_mat = v0859_rot_mat__temp.copy()
v0859_rot_mat__temp[i_v0866__00y3__00xQ_indexed_passthrough_eval] = v0866__00y3.flatten()
v0859_rot_mat = v0859_rot_mat__temp.copy()

# op _00ya_power_combination_eval
# LANG: _00y5, _00y9 --> _00yb
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0870__00yb = (v0869__00y5**1)*(v0872__00y9**-1)
v0870__00yb = (v0870__00yb*_00ya_coeff).reshape((3,))

# op _01Hq_power_combination_eval
# LANG: rotor_1_disk_in_plane_1 --> _01Hr
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((3,))
v02900__01Hr = (v08_rotor_1_disk_in_plane_1**1)
v02900__01Hr = (v02900__01Hr*_01Hq_coeff).reshape((3,))
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((1, 3))

# op _01Hw_power_combination_eval
# LANG: rotor_1_disk_in_plane_2 --> _01Hx
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((3,))
v02915__01Hx = (v010_rotor_1_disk_in_plane_2**1)
v02915__01Hx = (v02915__01Hx*_01Hw_coeff).reshape((3,))
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((1, 3))

# op _01JY_power_combination_eval
# LANG: temperature --> _01JZ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02975__01JZ = (v02963_temperature**1)
v02975__01JZ = (v02975__01JZ*_01JY_coeff).reshape((1,))

# op _01La_indexed_passthrough_eval
# LANG: rel_obs_x_pos, rel_obs_y_pos, rel_obs_z_pos --> rel_obs_position
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03017_rel_obs_position__temp[i_v03003_rel_obs_x_pos__01La_indexed_passthrough_eval] = v03003_rel_obs_x_pos.flatten()
v03017_rel_obs_position = v03017_rel_obs_position__temp.copy()
v03017_rel_obs_position__temp[i_v03011_rel_obs_y_pos__01La_indexed_passthrough_eval] = v03011_rel_obs_y_pos.flatten()
v03017_rel_obs_position = v03017_rel_obs_position__temp.copy()
v03017_rel_obs_position__temp[i_v03015_rel_obs_z_pos__01La_indexed_passthrough_eval] = v03015_rel_obs_z_pos.flatten()
v03017_rel_obs_position = v03017_rel_obs_position__temp.copy()

# op _01Ll_power_combination_eval
# LANG: _01Lk --> rel_obs_dist
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03023_rel_obs_dist = (v03021__01Lk**0.5)
v03023_rel_obs_dist = (v03023_rel_obs_dist*_01Ll_coeff).reshape((1, 1, 2))

# op _01MA_power_combination_eval
# LANG: _01Mj, _01Mz --> _01MB
# SHAPES: (1, 3, 11, 30), (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03059__01MB = (v03058__01Mz**1)*(v03056__01Mj**1)
v03059__01MB = (v03059__01MB*_01MA_coeff).reshape((1, 3, 11, 30))

# op _01Me expand_array_eval
# LANG: _01Md --> _01Mf
# SHAPES: (11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03050__01Mf = np.einsum('cd,ab->abcd', v03049__01Md.reshape((11, 30)) ,np.ones((1, 3))).reshape((1, 3, 11, 30))

# op _01Mk expand_array_eval
# LANG: bbb --> _01Ml
# SHAPES: (1, 3, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03046__01Ml = np.einsum('abd,c->abcd', v03045_bbb.reshape((1, 3, 30)) ,np.ones((11,))).reshape((1, 3, 11, 30))

# op _01Mo expand_array_eval
# LANG: aaa --> _01Mp
# SHAPES: (1, 3, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03051__01Mp = np.einsum('abd,c->abcd', v03043_aaa.reshape((1, 3, 30)) ,np.ones((11,))).reshape((1, 3, 11, 30))

# op _01Mu_power_combination_eval
# LANG: _01Mt, _01Mj --> _01Mv
# SHAPES: (1, 3, 11, 30), (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03054__01Mv = (v03053__01Mt**1)*(v03056__01Mj**1)
v03054__01Mv = (v03054__01Mv*_01Mu_coeff).reshape((1, 3, 11, 30))

# op _01NR reshape_eval
# LANG: rpm --> _01NS
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03126__01NS = v02928_rpm.reshape((1,))

# op _01On_indexed_passthrough_eval
# LANG: _01Om, _01Op, _01Or --> aircraft_vel
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03096_aircraft_vel__temp[i_v03095__01Om__01On_indexed_passthrough_eval] = v03095__01Om.flatten()
v03096_aircraft_vel = v03096_aircraft_vel__temp.copy()
v03096_aircraft_vel__temp[i_v03098__01Op__01On_indexed_passthrough_eval] = v03098__01Op.flatten()
v03096_aircraft_vel = v03096_aircraft_vel__temp.copy()
v03096_aircraft_vel__temp[i_v03100__01Or__01On_indexed_passthrough_eval] = v03100__01Or.flatten()
v03096_aircraft_vel = v03096_aircraft_vel__temp.copy()

# op _01Ys_power_combination_eval
# LANG: rotor_2_disk_in_plane_1 --> _01Yt
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((3,))
v03416__01Yt = (v018_rotor_2_disk_in_plane_1**1)
v03416__01Yt = (v03416__01Yt*_01Ys_coeff).reshape((3,))
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((1, 3))

# op _01Yy_power_combination_eval
# LANG: rotor_2_disk_in_plane_2 --> _01Yz
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((3,))
v03431__01Yz = (v020_rotor_2_disk_in_plane_2**1)
v03431__01Yz = (v03431__01Yz*_01Yy_coeff).reshape((3,))
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((1, 3))

# op _01___power_combination_eval
# LANG: temperature --> _0200
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03489__0200 = (v03477_temperature**1)
v03489__0200 = (v03489__0200*_01___coeff).reshape((1,))

# op _021c_indexed_passthrough_eval
# LANG: rel_obs_x_pos, rel_obs_y_pos, rel_obs_z_pos --> rel_obs_position
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03531_rel_obs_position__temp[i_v03517_rel_obs_x_pos__021c_indexed_passthrough_eval] = v03517_rel_obs_x_pos.flatten()
v03531_rel_obs_position = v03531_rel_obs_position__temp.copy()
v03531_rel_obs_position__temp[i_v03525_rel_obs_y_pos__021c_indexed_passthrough_eval] = v03525_rel_obs_y_pos.flatten()
v03531_rel_obs_position = v03531_rel_obs_position__temp.copy()
v03531_rel_obs_position__temp[i_v03529_rel_obs_z_pos__021c_indexed_passthrough_eval] = v03529_rel_obs_z_pos.flatten()
v03531_rel_obs_position = v03531_rel_obs_position__temp.copy()

# op _021n_power_combination_eval
# LANG: _021m --> rel_obs_dist
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03537_rel_obs_dist = (v03535__021m**0.5)
v03537_rel_obs_dist = (v03537_rel_obs_dist*_021n_coeff).reshape((1, 1, 2))

# op _022C_power_combination_eval
# LANG: _022l, _022B --> _022D
# SHAPES: (1, 3, 11, 30), (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03573__022D = (v03572__022B**1)*(v03570__022l**1)
v03573__022D = (v03573__022D*_022C_coeff).reshape((1, 3, 11, 30))

# op _022g expand_array_eval
# LANG: _022f --> _022h
# SHAPES: (11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03564__022h = np.einsum('cd,ab->abcd', v03563__022f.reshape((11, 30)) ,np.ones((1, 3))).reshape((1, 3, 11, 30))

# op _022m expand_array_eval
# LANG: bbb --> _022n
# SHAPES: (1, 3, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03560__022n = np.einsum('abd,c->abcd', v03559_bbb.reshape((1, 3, 30)) ,np.ones((11,))).reshape((1, 3, 11, 30))

# op _022q expand_array_eval
# LANG: aaa --> _022r
# SHAPES: (1, 3, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03565__022r = np.einsum('abd,c->abcd', v03557_aaa.reshape((1, 3, 30)) ,np.ones((11,))).reshape((1, 3, 11, 30))

# op _022w_power_combination_eval
# LANG: _022v, _022l --> _022x
# SHAPES: (1, 3, 11, 30), (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03568__022x = (v03567__022v**1)*(v03570__022l**1)
v03568__022x = (v03568__022x*_022w_coeff).reshape((1, 3, 11, 30))

# op _023T reshape_eval
# LANG: rpm --> _023U
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03640__023U = v02928_rpm.reshape((1,))

# op _024p_indexed_passthrough_eval
# LANG: _024o, _024r, _024t --> aircraft_vel
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03610_aircraft_vel__temp[i_v03609__024o__024p_indexed_passthrough_eval] = v03609__024o.flatten()
v03610_aircraft_vel = v03610_aircraft_vel__temp.copy()
v03610_aircraft_vel__temp[i_v03612__024r__024p_indexed_passthrough_eval] = v03612__024r.flatten()
v03610_aircraft_vel = v03610_aircraft_vel__temp.copy()
v03610_aircraft_vel__temp[i_v03614__024t__024p_indexed_passthrough_eval] = v03614__024t.flatten()
v03610_aircraft_vel = v03610_aircraft_vel__temp.copy()

# op _00B3_linear_combination_eval
# LANG: _00AM, _00B2 --> rel_obs_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0962_rel_obs_z_pos = _00B3_constant+1*v0961__00AM+-1*v0963__00B2

# op _00B7_power_combination_eval
# LANG: rel_obs_x_pos --> _00B8
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0965__00B8 = (v0950_rel_obs_x_pos**2)
v0965__00B8 = (v0965__00B8*_00B7_coeff).reshape((1, 1, 2))

# op _00B9_power_combination_eval
# LANG: rel_obs_y_pos --> _00Ba
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0967__00Ba = (v0958_rel_obs_y_pos**2)
v0967__00Ba = (v0967__00Ba*_00B9_coeff).reshape((1, 1, 2))

# op _00Cy_decompose_eval
# LANG: bbb --> _00Cz
# SHAPES: (1, 40, 30) --> (1, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01091__00Cz = ((v0991_bbb.flatten())[src_indices__00Cz__00Cy]).reshape((1, 40, 1))

# op _00Dc_decompose_eval
# LANG: _00D9 --> _00Dd
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01089__00Dd = ((v0995__00D9.flatten())[src_indices__00Dd__00Dc]).reshape((1, 2, 3, 40, 10))

# op _00Fk_power_combination_eval
# LANG: _00F1, _00Fj --> _00Fl
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01062__00Fl = (v01042__00F1**1)*(v01067__00Fj**-1)
v01062__00Fl = (v01062__00Fl*_00Fk_coeff).reshape((1, 2, 3, 40, 10))

# op _00GZ_power_combination_eval
# LANG: _00GG, _00GY --> _00G_
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01139__00G_ = (v01138__00GG**1)*(v01144__00GY**-1)
v01139__00G_ = (v01139__00G_*_00GZ_coeff).reshape((1, 2, 3, 40, 10))

# op _00Hm_power_combination_eval
# LANG: _00Hl --> _00Hn
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01087__00Hn = (v01080__00Hl**1)
v01087__00Hn = (v01087__00Hn*_00Hm_coeff).reshape((1, 2, 3, 40, 10))

# op _00RN_matvec_eval
# LANG: rot_mat, _00RM --> thrust_dir
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01463_thrust_dir = v01455_rot_mat@v01466__00RM

# op _00UE_linear_combination_eval
# LANG: _00Um, _00UD --> rel_obs_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01558_rel_obs_z_pos = _00UE_constant+1*v01557__00Um+-1*v01559__00UD

# op _00UI_power_combination_eval
# LANG: rel_obs_x_pos --> _00UJ
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01561__00UJ = (v01546_rel_obs_x_pos**2)
v01561__00UJ = (v01561__00UJ*_00UI_coeff).reshape((1, 1, 2))

# op _00UK_power_combination_eval
# LANG: rel_obs_y_pos --> _00UL
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01563__00UL = (v01554_rel_obs_y_pos**2)
v01563__00UL = (v01563__00UL*_00UK_coeff).reshape((1, 1, 2))

# op _00W8_decompose_eval
# LANG: bbb --> _00W9
# SHAPES: (1, 40, 30) --> (1, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01687__00W9 = ((v01587_bbb.flatten())[src_indices__00W9__00W8]).reshape((1, 40, 1))

# op _00WN_decompose_eval
# LANG: _00WK --> _00WO
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01685__00WO = ((v01591__00WK.flatten())[src_indices__00WO__00WN]).reshape((1, 2, 3, 40, 10))

# op _00YV_power_combination_eval
# LANG: _00YC, _00YU --> _00YW
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01658__00YW = (v01638__00YC**1)*(v01663__00YU**-1)
v01658__00YW = (v01658__00YW*_00YV_coeff).reshape((1, 2, 3, 40, 10))

# op _00_X_power_combination_eval
# LANG: _00_W --> _00_Y
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01683__00_Y = (v01676__00_W**1)
v01683__00_Y = (v01683__00_Y*_00_X_coeff).reshape((1, 2, 3, 40, 10))

# op _00_z_power_combination_eval
# LANG: _00_g, _00_y --> _00_A
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01735__00_A = (v01734__00_g**1)*(v01740__00_y**-1)
v01735__00_A = (v01735__00_A*_00_z_coeff).reshape((1, 2, 3, 40, 10))

# op _00dH_power_combination_eval
# LANG: _00dG, _dr --> _local_thrust
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0325__local_thrust = (v0324__00dG**1)*(v0202__dr**1)
v0325__local_thrust = (v0325__local_thrust*_00dH_coeff).reshape((1, 40, 30))

# op _00sK_power_combination_eval
# LANG: _00sJ, _dr --> _local_thrust
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0698__local_thrust = (v0697__00sJ**1)*(v0575__dr**1)
v0698__local_thrust = (v0698__local_thrust*_00sK_coeff).reshape((1, 40, 30))

# op _00yc_matvec_eval
# LANG: rot_mat, _00yb --> thrust_dir
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0867_thrust_dir = v0859_rot_mat@v0870__00yb

# op _01HZ cross_product_eval
# LANG: _01Hr, _01Hx --> _01H_
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02916__01H_ = np.cross(v02915__01Hx, v02900__01Hr, axisa = 0, axisb = 0, axisc = 0)

# op _01J__power_combination_eval
# LANG: _01JZ --> speed_of_sound
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02976_speed_of_sound = (v02975__01JZ**0.5)
v02976_speed_of_sound = (v02976_speed_of_sound*_01J__coeff).reshape((1,))

# op _01MC_power_combination_eval
# LANG: _01MB --> bD_integrand
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03060_bD_integrand = (v03059__01MB**1)
v03060_bD_integrand = (v03060_bD_integrand*_01MC_coeff).reshape((1, 3, 11, 30))

# op _01Mm_power_combination_eval
# LANG: _01Ml, _01Mf --> aT_integrand
# SHAPES: (1, 3, 11, 30), (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03047_aT_integrand = (v03046__01Ml**1)*(v03050__01Mf**1)
v03047_aT_integrand = (v03047_aT_integrand*_01Mm_coeff).reshape((1, 3, 11, 30))

# op _01Mq_power_combination_eval
# LANG: _01Mf, _01Mp --> aD_integrand
# SHAPES: (1, 3, 11, 30), (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03052_aD_integrand = (v03051__01Mp**1)*(v03050__01Mf**1)
v03052_aD_integrand = (v03052_aD_integrand*_01Mq_coeff).reshape((1, 3, 11, 30))

# op _01Mw_power_combination_eval
# LANG: _01Mv --> bT_integrand
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model
v03057_bT_integrand = (v03054__01Mv**1)
v03057_bT_integrand = (v03057_bT_integrand*_01Mw_coeff).reshape((1, 3, 11, 30))

# op _01NT_power_combination_eval
# LANG: _01NS --> _01NU
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03127__01NU = (v03126__01NS**1)
v03127__01NU = (v03127__01NU*_01NT_coeff).reshape((1,))

# op _01O8 reshape_eval
# LANG: rel_obs_dist --> _01O9
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03103__01O9 = v03023_rel_obs_dist.reshape((1, 2))

# op _01Os_tensor_dot_product_eval
# LANG: aircraft_vel, rel_obs_position --> _01Ot
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03105__01Ot = np.sum(v03096_aircraft_vel * v03017_rel_obs_position, axis=1)

# op _01Z0 cross_product_eval
# LANG: _01Yt, _01Yz --> _01Z1
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03432__01Z1 = np.cross(v03431__01Yz, v03416__01Yt, axisa = 0, axisb = 0, axisc = 0)

# op _0201_power_combination_eval
# LANG: _0200 --> speed_of_sound
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03490_speed_of_sound = (v03489__0200**0.5)
v03490_speed_of_sound = (v03490_speed_of_sound*_0201_coeff).reshape((1,))

# op _022E_power_combination_eval
# LANG: _022D --> bD_integrand
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03574_bD_integrand = (v03573__022D**1)
v03574_bD_integrand = (v03574_bD_integrand*_022E_coeff).reshape((1, 3, 11, 30))

# op _022o_power_combination_eval
# LANG: _022n, _022h --> aT_integrand
# SHAPES: (1, 3, 11, 30), (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03561_aT_integrand = (v03560__022n**1)*(v03564__022h**1)
v03561_aT_integrand = (v03561_aT_integrand*_022o_coeff).reshape((1, 3, 11, 30))

# op _022s_power_combination_eval
# LANG: _022h, _022r --> aD_integrand
# SHAPES: (1, 3, 11, 30), (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03566_aD_integrand = (v03565__022r**1)*(v03564__022h**1)
v03566_aD_integrand = (v03566_aD_integrand*_022s_coeff).reshape((1, 3, 11, 30))

# op _022y_power_combination_eval
# LANG: _022x --> bT_integrand
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model
v03571_bT_integrand = (v03568__022x**1)
v03571_bT_integrand = (v03571_bT_integrand*_022y_coeff).reshape((1, 3, 11, 30))

# op _023V_power_combination_eval
# LANG: _023U --> _023W
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03641__023W = (v03640__023U**1)
v03641__023W = (v03641__023W*_023V_coeff).reshape((1,))

# op _024a reshape_eval
# LANG: rel_obs_dist --> _024b
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03617__024b = v03537_rel_obs_dist.reshape((1, 2))

# op _024u_tensor_dot_product_eval
# LANG: aircraft_vel, rel_obs_position --> _024v
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03619__024v = np.sum(v03610_aircraft_vel * v03531_rel_obs_position, axis=1)

# op _00B6_indexed_passthrough_eval
# LANG: rel_obs_x_pos, rel_obs_y_pos, rel_obs_z_pos --> rel_obs_position
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0964_rel_obs_position__temp[i_v0950_rel_obs_x_pos__00B6_indexed_passthrough_eval] = v0950_rel_obs_x_pos.flatten()
v0964_rel_obs_position = v0964_rel_obs_position__temp.copy()
v0964_rel_obs_position__temp[i_v0958_rel_obs_y_pos__00B6_indexed_passthrough_eval] = v0958_rel_obs_y_pos.flatten()
v0964_rel_obs_position = v0964_rel_obs_position__temp.copy()
v0964_rel_obs_position__temp[i_v0962_rel_obs_z_pos__00B6_indexed_passthrough_eval] = v0962_rel_obs_z_pos.flatten()
v0964_rel_obs_position = v0964_rel_obs_position__temp.copy()

# op _00Bb_linear_combination_eval
# LANG: _00B8, _00Ba --> _00Bc
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0966__00Bc = _00Bb_constant+1*v0965__00B8+1*v0967__00Ba

# op _00Bd_power_combination_eval
# LANG: rel_obs_z_pos --> _00Be
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0969__00Be = (v0962_rel_obs_z_pos**2)
v0969__00Be = (v0969__00Be*_00Bd_coeff).reshape((1, 1, 2))

# op _00Bk expand_array_eval
# LANG: thrust_dir --> _00Bl
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0972__00Bl = np.einsum('b,ac->abc', v0867_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _00CA reshape_eval
# LANG: _00Cz --> _00CB
# SHAPES: (1, 40, 1) --> (1, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01092__00CB = v01091__00Cz.reshape((1, 40))

# op _00Cm expand_scalar_eval
# LANG: dr --> _00Cn
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0990__00Cn = np.empty((1, 40, 30))
v0990__00Cn.fill(v0874_dr.item())

# op _00HF_sin_eval
# LANG: _00Dd --> _00HG
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01154__00HG = np.sin(v01089__00Dd)

# op _00Ho_power_combination_eval
# LANG: _00Fl, _00Hn --> _00Hp
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01072__00Hp = (v01062__00Fl**1)*(v01087__00Hn**1)
v01072__00Hp = (v01072__00Hp*_00Ho_coeff).reshape((1, 2, 3, 40, 10))

# op _00Hq_power_combination_eval
# LANG: _00Hn, _00G_ --> _00Hr
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01149__00Hr = (v01139__00G_**1)*(v01087__00Hn**1)
v01149__00Hr = (v01149__00Hr*_00Hq_coeff).reshape((1, 2, 3, 40, 10))

# op _00Hw_sin_eval
# LANG: _00Dd --> _00Hx
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01096__00Hx = np.sin(v01089__00Dd)

# op _00UH_indexed_passthrough_eval
# LANG: rel_obs_x_pos, rel_obs_y_pos, rel_obs_z_pos --> rel_obs_position
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01560_rel_obs_position__temp[i_v01546_rel_obs_x_pos__00UH_indexed_passthrough_eval] = v01546_rel_obs_x_pos.flatten()
v01560_rel_obs_position = v01560_rel_obs_position__temp.copy()
v01560_rel_obs_position__temp[i_v01554_rel_obs_y_pos__00UH_indexed_passthrough_eval] = v01554_rel_obs_y_pos.flatten()
v01560_rel_obs_position = v01560_rel_obs_position__temp.copy()
v01560_rel_obs_position__temp[i_v01558_rel_obs_z_pos__00UH_indexed_passthrough_eval] = v01558_rel_obs_z_pos.flatten()
v01560_rel_obs_position = v01560_rel_obs_position__temp.copy()

# op _00UM_linear_combination_eval
# LANG: _00UJ, _00UL --> _00UN
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01562__00UN = _00UM_constant+1*v01561__00UJ+1*v01563__00UL

# op _00UO_power_combination_eval
# LANG: rel_obs_z_pos --> _00UP
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01565__00UP = (v01558_rel_obs_z_pos**2)
v01565__00UP = (v01565__00UP*_00UO_coeff).reshape((1, 1, 2))

# op _00UV expand_array_eval
# LANG: thrust_dir --> _00UW
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01568__00UW = np.einsum('b,ac->abc', v01463_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _00VX expand_scalar_eval
# LANG: dr --> _00VY
# SHAPES: (1,) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01586__00VY = np.empty((1, 40, 30))
v01586__00VY.fill(v01470_dr.item())

# op _00Wa reshape_eval
# LANG: _00W9 --> _00Wb
# SHAPES: (1, 40, 1) --> (1, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01688__00Wb = v01687__00W9.reshape((1, 40))

# op _00_Z_power_combination_eval
# LANG: _00YW, _00_Y --> _00__
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01668__00__ = (v01658__00YW**1)*(v01683__00_Y**1)
v01668__00__ = (v01668__00__*_00_Z_coeff).reshape((1, 2, 3, 40, 10))

# op _00ie_power_combination_eval
# LANG: _local_thrust --> _dT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0326__dT = (v0325__local_thrust**1)
v0326__dT = (v0326__dT*_00ie_coeff).reshape((1, 40, 30))

# op _00xh_power_combination_eval
# LANG: _local_thrust --> _dT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0699__dT = (v0698__local_thrust**1)
v0699__dT = (v0699__dT*_00xh_coeff).reshape((1, 40, 30))

# op _0100_power_combination_eval
# LANG: _00_Y, _00_A --> _0101
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01745__0101 = (v01735__00_A**1)*(v01683__00_Y**1)
v01745__0101 = (v01745__0101*_0100_coeff).reshape((1, 2, 3, 40, 10))

# op _0106_sin_eval
# LANG: _00WO --> _0107
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01692__0107 = np.sin(v01685__00WO)

# op _010f_sin_eval
# LANG: _00WO --> _010g
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01750__010g = np.sin(v01685__00WO)

# op _01HE_linear_combination_eval
# LANG: theta --> _01HF
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v02903__01HF = _01HE_constant+1*v02092_theta
v02092_theta = v02092_theta.reshape((1,))

# op _01HG_linear_combination_eval
# LANG: theta --> _01HH
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v02905__01HH = _01HG_constant+1*v02092_theta
v02092_theta = v02092_theta.reshape((1,))

# op _01HN_sin_eval
# LANG: theta --> _01HO
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v02908__01HO = np.sin(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01HR_sin_eval
# LANG: theta --> _01HS
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v02910__01HS = np.sin(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01HV_cos_eval
# LANG: theta --> _01HW
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v02912__01HW = np.cos(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01I0 pnorm_eval
# LANG: _01H_ --> _01I1
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02918__01I1 = np.linalg.norm(v02916__01H_.flatten(), ord=2)

# op _01MK_decompose_eval
# LANG: aT_integrand --> _01ML, _01MM
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 29), (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03061__01ML = ((v03047_aT_integrand.flatten())[src_indices__01ML__01MK]).reshape((1, 3, 11, 29))
v03062__01MM = ((v03047_aT_integrand.flatten())[src_indices__01MM__01MK]).reshape((1, 3, 11, 29))

# op _01N0_decompose_eval
# LANG: aD_integrand --> _01N1, _01N2
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 29), (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03070__01N1 = ((v03052_aD_integrand.flatten())[src_indices__01N1__01N0]).reshape((1, 3, 11, 29))
v03071__01N2 = ((v03052_aD_integrand.flatten())[src_indices__01N2__01N0]).reshape((1, 3, 11, 29))

# op _01NV_power_combination_eval
# LANG: _01NU --> _01NW
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03128__01NW = (v03127__01NU**1)
v03128__01NW = (v03128__01NW*_01NV_coeff).reshape((1,))

# op _01Nh_decompose_eval
# LANG: bT_integrand --> _01Ni, _01Nj
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 29), (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03078__01Ni = ((v03057_bT_integrand.flatten())[src_indices__01Ni__01Nh]).reshape((1, 3, 11, 29))
v03079__01Nj = ((v03057_bT_integrand.flatten())[src_indices__01Nj__01Nh]).reshape((1, 3, 11, 29))

# op _01Ny_decompose_eval
# LANG: bD_integrand --> _01Nz, _01NA
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 29), (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03086__01Nz = ((v03060_bD_integrand.flatten())[src_indices__01Nz__01Ny]).reshape((1, 3, 11, 29))
v03087__01NA = ((v03060_bD_integrand.flatten())[src_indices__01NA__01Ny]).reshape((1, 3, 11, 29))

# op _01Ou_power_combination_eval
# LANG: _01O9, _01Ot --> _01Ov
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03106__01Ov = (v03105__01Ot**1)*(v03103__01O9**-1)
v03106__01Ov = (v03106__01Ov*_01Ou_coeff).reshape((1, 2))

# op _01Ow expand_scalar_eval
# LANG: speed_of_sound --> _01Ox
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03108__01Ox = np.empty((1, 2))
v03108__01Ox.fill(v02976_speed_of_sound.item())

# op _01YG_linear_combination_eval
# LANG: theta --> _01YH
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v03419__01YH = _01YG_constant+1*v02092_theta
v02092_theta = v02092_theta.reshape((1,))

# op _01YI_linear_combination_eval
# LANG: theta --> _01YJ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v03421__01YJ = _01YI_constant+1*v02092_theta
v02092_theta = v02092_theta.reshape((1,))

# op _01YP_sin_eval
# LANG: theta --> _01YQ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v03424__01YQ = np.sin(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01YT_sin_eval
# LANG: theta --> _01YU
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v03426__01YU = np.sin(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01YX_cos_eval
# LANG: theta --> _01YY
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v03428__01YY = np.cos(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01Z2 pnorm_eval
# LANG: _01Z1 --> _01Z3
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03434__01Z3 = np.linalg.norm(v03432__01Z1.flatten(), ord=2)

# op _022M_decompose_eval
# LANG: aT_integrand --> _022N, _022O
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 29), (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03575__022N = ((v03561_aT_integrand.flatten())[src_indices__022N__022M]).reshape((1, 3, 11, 29))
v03576__022O = ((v03561_aT_integrand.flatten())[src_indices__022O__022M]).reshape((1, 3, 11, 29))

# op _0232_decompose_eval
# LANG: aD_integrand --> _0233, _0234
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 29), (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03584__0233 = ((v03566_aD_integrand.flatten())[src_indices__0233__0232]).reshape((1, 3, 11, 29))
v03585__0234 = ((v03566_aD_integrand.flatten())[src_indices__0234__0232]).reshape((1, 3, 11, 29))

# op _023A_decompose_eval
# LANG: bD_integrand --> _023B, _023C
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 29), (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03600__023B = ((v03574_bD_integrand.flatten())[src_indices__023B__023A]).reshape((1, 3, 11, 29))
v03601__023C = ((v03574_bD_integrand.flatten())[src_indices__023C__023A]).reshape((1, 3, 11, 29))

# op _023X_power_combination_eval
# LANG: _023W --> _023Y
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03642__023Y = (v03641__023W**1)
v03642__023Y = (v03642__023Y*_023X_coeff).reshape((1,))

# op _023j_decompose_eval
# LANG: bT_integrand --> _023k, _023l
# SHAPES: (1, 3, 11, 30) --> (1, 3, 11, 29), (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03592__023k = ((v03571_bT_integrand.flatten())[src_indices__023k__023j]).reshape((1, 3, 11, 29))
v03593__023l = ((v03571_bT_integrand.flatten())[src_indices__023l__023j]).reshape((1, 3, 11, 29))

# op _024w_power_combination_eval
# LANG: _024b, _024v --> _024x
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03620__024x = (v03619__024v**1)*(v03617__024b**-1)
v03620__024x = (v03620__024x*_024w_coeff).reshape((1, 2))

# op _024y expand_scalar_eval
# LANG: speed_of_sound --> _024z
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03622__024z = np.empty((1, 2))
v03622__024z.fill(v03490_speed_of_sound.item())

# op _00Bf_linear_combination_eval
# LANG: _00Bc, _00Be --> _00Bg
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0968__00Bg = _00Bf_constant+1*v0966__00Bc+1*v0969__00Be

# op _00Bm_tensor_dot_product_eval
# LANG: rel_obs_position, _00Bl --> normal_proj
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0971_normal_proj = np.sum(v0964_rel_obs_position * v0972__00Bl, axis=1)

# op _00Co_power_combination_eval
# LANG: _00Cn, _dT --> aaa
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0989_aaa = (v0699__dT**1)*(v0990__00Cn**-1)
v0989_aaa = (v0989_aaa*_00Co_coeff).reshape((1, 40, 30))

# op _00Dt expand_array_eval
# LANG: _00CB --> _00Du
# SHAPES: (1, 40) --> (1, 2, 3, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01093__00Du = np.einsum('ad,bce->abcde', v01092__00CB.reshape((1, 40)) ,np.ones((2, 3, 1))).reshape((1, 2, 3, 40, 1))

# op _00HH_power_combination_eval
# LANG: _00Hr, _00HG --> _00HI
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01153__00HI = (v01149__00Hr**1)*(v01154__00HG**1)
v01153__00HI = (v01153__00HI*_00HH_coeff).reshape((1, 2, 3, 40, 10))

# op _00Hy_power_combination_eval
# LANG: _00Hp, _00Hx --> _00Hz
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01095__00Hz = (v01072__00Hp**1)*(v01096__00Hx**1)
v01095__00Hz = (v01095__00Hz*_00Hy_coeff).reshape((1, 2, 3, 40, 10))

# op _00UQ_linear_combination_eval
# LANG: _00UN, _00UP --> _00UR
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01564__00UR = _00UQ_constant+1*v01562__00UN+1*v01565__00UP

# op _00UX_tensor_dot_product_eval
# LANG: rel_obs_position, _00UW --> normal_proj
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01567_normal_proj = np.sum(v01560_rel_obs_position * v01568__00UW, axis=1)

# op _00VZ_power_combination_eval
# LANG: _00VY, _dT --> aaa
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01585_aaa = (v0326__dT**1)*(v01586__00VY**-1)
v01585_aaa = (v01585_aaa*_00VZ_coeff).reshape((1, 40, 30))

# op _00X3 expand_array_eval
# LANG: _00Wb --> _00X4
# SHAPES: (1, 40) --> (1, 2, 3, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01689__00X4 = np.einsum('ad,bce->abcde', v01688__00Wb.reshape((1, 40)) ,np.ones((2, 3, 1))).reshape((1, 2, 3, 40, 1))

# op _0108_power_combination_eval
# LANG: _00__, _0107 --> _0109
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01691__0109 = (v01668__00__**1)*(v01692__0107**1)
v01691__0109 = (v01691__0109*_0108_coeff).reshape((1, 2, 3, 40, 10))

# op _010h_power_combination_eval
# LANG: _0101, _010g --> _010i
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01749__010i = (v01745__0101**1)*(v01750__010g**1)
v01749__010i = (v01749__010i*_010h_coeff).reshape((1, 2, 3, 40, 10))

# op _01HI_power_combination_eval
# LANG: _01HF, _01HH --> _01HJ
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02904__01HJ = (v02903__01HF**1)*(v02905__01HH**-1)
v02904__01HJ = (v02904__01HJ*_01HI_coeff).reshape((1, 1))

# op _01HL_cos_eval
# LANG: theta --> _01HM
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v02907__01HM = np.cos(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01HP_power_combination_eval
# LANG: _01HO --> _01HQ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02909__01HQ = (v02908__01HO**1)
v02909__01HQ = (v02909__01HQ*_01HP_coeff).reshape((1, 1))

# op _01HT_power_combination_eval
# LANG: _01HS --> _01HU
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02911__01HU = (v02910__01HS**1)
v02911__01HU = (v02911__01HU*_01HT_coeff).reshape((1, 1))

# op _01HX_power_combination_eval
# LANG: _01HW --> _01HY
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02913__01HY = (v02912__01HW**1)
v02913__01HY = (v02913__01HY*_01HX_coeff).reshape((1, 1))

# op _01Hy pnorm_eval
# LANG: _01Hr --> _01Hz
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02901__01Hz = np.linalg.norm(v02900__01Hr.flatten(), ord=2)

# op _01I2 expand_scalar_eval
# LANG: _01I1 --> _01I3
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02919__01I3 = np.empty((3,))
v02919__01I3.fill(v02918__01I1.item())

# op _01MN_linear_combination_eval
# LANG: _01ML, _01MM --> _01MO
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03063__01MO = _01MN_constant+1*v03061__01ML+1*v03062__01MM

# op _01N3_linear_combination_eval
# LANG: _01N1, _01N2 --> _01N4
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03072__01N4 = _01N3_constant+1*v03070__01N1+1*v03071__01N2

# op _01NB_linear_combination_eval
# LANG: _01Nz, _01NA --> _01NC
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03088__01NC = _01NB_constant+1*v03086__01Nz+1*v03087__01NA

# op _01NX_power_combination_eval
# LANG: _01NW --> _01NY
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03129__01NY = (v03128__01NW**1)
v03129__01NY = (v03129__01NY*_01NX_coeff).reshape((1,))

# op _01Nk_linear_combination_eval
# LANG: _01Ni, _01Nj --> _01Nl
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03080__01Nl = _01Nk_constant+1*v03078__01Ni+1*v03079__01Nj

# op _01Oy_power_combination_eval
# LANG: _01Ov, _01Ox --> _01Oz
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03107__01Oz = (v03106__01Ov**1)*(v03108__01Ox**-1)
v03107__01Oz = (v03107__01Oz*_01Oy_coeff).reshape((1, 2))

# op _01YA pnorm_eval
# LANG: _01Yt --> _01YB
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03417__01YB = np.linalg.norm(v03416__01Yt.flatten(), ord=2)

# op _01YK_power_combination_eval
# LANG: _01YH, _01YJ --> _01YL
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03420__01YL = (v03419__01YH**1)*(v03421__01YJ**-1)
v03420__01YL = (v03420__01YL*_01YK_coeff).reshape((1, 1))

# op _01YN_cos_eval
# LANG: theta --> _01YO
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v02092_theta = v02092_theta.reshape((1, 1))
v03423__01YO = np.cos(v02092_theta)
v02092_theta = v02092_theta.reshape((1,))

# op _01YR_power_combination_eval
# LANG: _01YQ --> _01YS
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03425__01YS = (v03424__01YQ**1)
v03425__01YS = (v03425__01YS*_01YR_coeff).reshape((1, 1))

# op _01YV_power_combination_eval
# LANG: _01YU --> _01YW
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03427__01YW = (v03426__01YU**1)
v03427__01YW = (v03427__01YW*_01YV_coeff).reshape((1, 1))

# op _01YZ_power_combination_eval
# LANG: _01YY --> _01Y_
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03429__01Y_ = (v03428__01YY**1)
v03429__01Y_ = (v03429__01Y_*_01YZ_coeff).reshape((1, 1))

# op _01Z4 expand_scalar_eval
# LANG: _01Z3 --> _01Z5
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03435__01Z5 = np.empty((3,))
v03435__01Z5.fill(v03434__01Z3.item())

# op _022P_linear_combination_eval
# LANG: _022N, _022O --> _022Q
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03577__022Q = _022P_constant+1*v03575__022N+1*v03576__022O

# op _0235_linear_combination_eval
# LANG: _0233, _0234 --> _0236
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03586__0236 = _0235_constant+1*v03584__0233+1*v03585__0234

# op _023D_linear_combination_eval
# LANG: _023B, _023C --> _023E
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03602__023E = _023D_constant+1*v03600__023B+1*v03601__023C

# op _023Z_power_combination_eval
# LANG: _023Y --> _023_
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03643__023_ = (v03642__023Y**1)
v03643__023_ = (v03643__023_*_023Z_coeff).reshape((1,))

# op _023m_linear_combination_eval
# LANG: _023k, _023l --> _023n
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03594__023n = _023m_constant+1*v03592__023k+1*v03593__023l

# op _024A_power_combination_eval
# LANG: _024x, _024z --> _024B
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03621__024B = (v03620__024x**1)*(v03622__024z**-1)
v03621__024B = (v03621__024B*_024A_coeff).reshape((1, 2))

# op _00Bh_power_combination_eval
# LANG: _00Bg --> rel_obs_dist
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0970_rel_obs_dist = (v0968__00Bg**0.5)
v0970_rel_obs_dist = (v0970_rel_obs_dist*_00Bh_coeff).reshape((1, 1, 2))

# op _00By expand_array_eval
# LANG: normal_proj --> _00Bz
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0977__00Bz = np.einsum('ac,b->abc', v0971_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _00Cu_decompose_eval
# LANG: aaa --> _00Cv
# SHAPES: (1, 40, 30) --> (1, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v0999__00Cv = ((v0989_aaa.flatten())[src_indices__00Cv__00Cu]).reshape((1, 40, 1))

# op _00Dv_indexed_passthrough_eval
# LANG: _00Du, _00Hz --> dDdR_real_exp
# SHAPES: (1, 2, 3, 40, 1), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01094_dDdR_real_exp__temp[i_v01093__00Du__00Dv_indexed_passthrough_eval] = v01093__00Du.flatten()
v01094_dDdR_real_exp = v01094_dDdR_real_exp__temp.copy()
v01094_dDdR_real_exp__temp[i_v01095__00Hz__00Dv_indexed_passthrough_eval] = v01095__00Hz.flatten()
v01094_dDdR_real_exp = v01094_dDdR_real_exp__temp.copy()

# op _00HJ_indexed_passthrough_eval
# LANG: _00HI --> dDdR_imag_exp
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01155_dDdR_imag_exp__temp[i_v01153__00HI__00HJ_indexed_passthrough_eval] = v01153__00HI.flatten()
v01155_dDdR_imag_exp = v01155_dDdR_imag_exp__temp.copy()

# op _00US_power_combination_eval
# LANG: _00UR --> rel_obs_dist
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01566_rel_obs_dist = (v01564__00UR**0.5)
v01566_rel_obs_dist = (v01566_rel_obs_dist*_00US_coeff).reshape((1, 1, 2))

# op _00V8 expand_array_eval
# LANG: normal_proj --> _00V9
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01573__00V9 = np.einsum('ac,b->abc', v01567_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _00W4_decompose_eval
# LANG: aaa --> _00W5
# SHAPES: (1, 40, 30) --> (1, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01595__00W5 = ((v01585_aaa.flatten())[src_indices__00W5__00W4]).reshape((1, 40, 1))

# op _00X5_indexed_passthrough_eval
# LANG: _00X4, _0109 --> dDdR_real_exp
# SHAPES: (1, 2, 3, 40, 1), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01690_dDdR_real_exp__temp[i_v01689__00X4__00X5_indexed_passthrough_eval] = v01689__00X4.flatten()
v01690_dDdR_real_exp = v01690_dDdR_real_exp__temp.copy()
v01690_dDdR_real_exp__temp[i_v01691__0109__00X5_indexed_passthrough_eval] = v01691__0109.flatten()
v01690_dDdR_real_exp = v01690_dDdR_real_exp__temp.copy()

# op _010j_indexed_passthrough_eval
# LANG: _010i --> dDdR_imag_exp
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01751_dDdR_imag_exp__temp[i_v01749__010i__010j_indexed_passthrough_eval] = v01749__010i.flatten()
v01751_dDdR_imag_exp = v01751_dDdR_imag_exp__temp.copy()

# op _01HA_power_combination_eval
# LANG: _01Hz --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02902_propeller_radius = (v02901__01Hz**1)
v02902_propeller_radius = (v02902_propeller_radius*_01HA_coeff).reshape((1,))

# op _01HK_indexed_passthrough_eval
# LANG: _01HJ, _01HM, _01HQ, _01HU, _01HY --> rot_mat
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02906_rot_mat__temp[i_v02904__01HJ__01HK_indexed_passthrough_eval] = v02904__01HJ.flatten()
v02906_rot_mat = v02906_rot_mat__temp.copy()
v02906_rot_mat__temp[i_v02907__01HM__01HK_indexed_passthrough_eval] = v02907__01HM.flatten()
v02906_rot_mat = v02906_rot_mat__temp.copy()
v02906_rot_mat__temp[i_v02909__01HQ__01HK_indexed_passthrough_eval] = v02909__01HQ.flatten()
v02906_rot_mat = v02906_rot_mat__temp.copy()
v02906_rot_mat__temp[i_v02911__01HU__01HK_indexed_passthrough_eval] = v02911__01HU.flatten()
v02906_rot_mat = v02906_rot_mat__temp.copy()
v02906_rot_mat__temp[i_v02913__01HY__01HK_indexed_passthrough_eval] = v02913__01HY.flatten()
v02906_rot_mat = v02906_rot_mat__temp.copy()

# op _01I4_power_combination_eval
# LANG: _01H_, _01I3 --> _01I5
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02917__01I5 = (v02916__01H_**1)*(v02919__01I3**-1)
v02917__01I5 = (v02917__01I5*_01I4_coeff).reshape((3,))

# op _01MP_power_combination_eval
# LANG: _01MO --> _01MQ
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03064__01MQ = (v03063__01MO**1)
v03064__01MQ = (v03064__01MQ*_01MP_coeff).reshape((1, 3, 11, 29))

# op _01MR expand_scalar_eval
# LANG: dtheta --> _01MS
# SHAPES: (1,) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03067__01MS = np.empty((1, 3, 11, 29))
v03067__01MS.fill(v03066_dtheta.item())

# op _01N5_power_combination_eval
# LANG: _01N4 --> _01N6
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03073__01N6 = (v03072__01N4**1)
v03073__01N6 = (v03073__01N6*_01N5_coeff).reshape((1, 3, 11, 29))

# op _01N7 expand_scalar_eval
# LANG: dtheta --> _01N8
# SHAPES: (1,) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03075__01N8 = np.empty((1, 3, 11, 29))
v03075__01N8.fill(v03066_dtheta.item())

# op _01ND_power_combination_eval
# LANG: _01NC --> _01NE
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03089__01NE = (v03088__01NC**1)
v03089__01NE = (v03089__01NE*_01ND_coeff).reshape((1, 3, 11, 29))

# op _01NF expand_scalar_eval
# LANG: dtheta --> _01NG
# SHAPES: (1,) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03091__01NG = np.empty((1, 3, 11, 29))
v03091__01NG.fill(v03066_dtheta.item())

# op _01Nm_power_combination_eval
# LANG: _01Nl --> _01Nn
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03081__01Nn = (v03080__01Nl**1)
v03081__01Nn = (v03081__01Nn*_01Nm_coeff).reshape((1, 3, 11, 29))

# op _01No expand_scalar_eval
# LANG: dtheta --> _01Np
# SHAPES: (1,) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03083__01Np = np.empty((1, 3, 11, 29))
v03083__01Np.fill(v03066_dtheta.item())

# op _01OA_linear_combination_eval
# LANG: _01Oz --> _01OB
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03109__01OB = _01OA_constant+-1*v03107__01Oz

# op _01OJ expand_array_eval
# LANG: in_plane_ex --> _01OK
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03135__01OK = np.einsum('ab,c->abc', v03134_in_plane_ex.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _01OT expand_scalar_eval
# LANG: _01NY --> _01OU
# SHAPES: (1,) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03130__01OU = np.empty((1, 2, 3, 3, 11))
v03130__01OU.fill(v03129__01NY.item())

# op _01YC_power_combination_eval
# LANG: _01YB --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03418_propeller_radius = (v03417__01YB**1)
v03418_propeller_radius = (v03418_propeller_radius*_01YC_coeff).reshape((1,))

# op _01YM_indexed_passthrough_eval
# LANG: _01YL, _01YO, _01YS, _01YW, _01Y_ --> rot_mat
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03422_rot_mat__temp[i_v03420__01YL__01YM_indexed_passthrough_eval] = v03420__01YL.flatten()
v03422_rot_mat = v03422_rot_mat__temp.copy()
v03422_rot_mat__temp[i_v03423__01YO__01YM_indexed_passthrough_eval] = v03423__01YO.flatten()
v03422_rot_mat = v03422_rot_mat__temp.copy()
v03422_rot_mat__temp[i_v03425__01YS__01YM_indexed_passthrough_eval] = v03425__01YS.flatten()
v03422_rot_mat = v03422_rot_mat__temp.copy()
v03422_rot_mat__temp[i_v03427__01YW__01YM_indexed_passthrough_eval] = v03427__01YW.flatten()
v03422_rot_mat = v03422_rot_mat__temp.copy()
v03422_rot_mat__temp[i_v03429__01Y___01YM_indexed_passthrough_eval] = v03429__01Y_.flatten()
v03422_rot_mat = v03422_rot_mat__temp.copy()

# op _01Z6_power_combination_eval
# LANG: _01Z1, _01Z5 --> _01Z7
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03433__01Z7 = (v03432__01Z1**1)*(v03435__01Z5**-1)
v03433__01Z7 = (v03433__01Z7*_01Z6_coeff).reshape((3,))

# op _022R_power_combination_eval
# LANG: _022Q --> _022S
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03578__022S = (v03577__022Q**1)
v03578__022S = (v03578__022S*_022R_coeff).reshape((1, 3, 11, 29))

# op _022T expand_scalar_eval
# LANG: dtheta --> _022U
# SHAPES: (1,) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03581__022U = np.empty((1, 3, 11, 29))
v03581__022U.fill(v03580_dtheta.item())

# op _0237_power_combination_eval
# LANG: _0236 --> _0238
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03587__0238 = (v03586__0236**1)
v03587__0238 = (v03587__0238*_0237_coeff).reshape((1, 3, 11, 29))

# op _0239 expand_scalar_eval
# LANG: dtheta --> _023a
# SHAPES: (1,) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03589__023a = np.empty((1, 3, 11, 29))
v03589__023a.fill(v03580_dtheta.item())

# op _023F_power_combination_eval
# LANG: _023E --> _023G
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03603__023G = (v03602__023E**1)
v03603__023G = (v03603__023G*_023F_coeff).reshape((1, 3, 11, 29))

# op _023H expand_scalar_eval
# LANG: dtheta --> _023I
# SHAPES: (1,) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03605__023I = np.empty((1, 3, 11, 29))
v03605__023I.fill(v03580_dtheta.item())

# op _023o_power_combination_eval
# LANG: _023n --> _023p
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03595__023p = (v03594__023n**1)
v03595__023p = (v03595__023p*_023o_coeff).reshape((1, 3, 11, 29))

# op _023q expand_scalar_eval
# LANG: dtheta --> _023r
# SHAPES: (1,) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03597__023r = np.empty((1, 3, 11, 29))
v03597__023r.fill(v03580_dtheta.item())

# op _024C_linear_combination_eval
# LANG: _024B --> _024D
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03623__024D = _024C_constant+-1*v03621__024B

# op _024L expand_array_eval
# LANG: in_plane_ex --> _024M
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03649__024M = np.einsum('ab,c->abc', v03648_in_plane_ex.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _024V expand_scalar_eval
# LANG: _023_ --> _024W
# SHAPES: (1,) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03644__024W = np.empty((1, 2, 3, 3, 11))
v03644__024W.fill(v03643__023_.item())

# op _00BA_power_combination_eval
# LANG: rel_obs_dist, _00Bz --> _00BB
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0978__00BB = (v0977__00Bz**1)*(v0970_rel_obs_dist**-1)
v0978__00BB = (v0978__00BB*_00BA_coeff).reshape((1, 1, 2))

# op _00Cw reshape_eval
# LANG: _00Cv --> _00Cx
# SHAPES: (1, 40, 1) --> (1, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01000__00Cx = v0999__00Cv.reshape((1, 40))

# op _00HA_cos_eval
# LANG: _00Dd --> _00HB
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01151__00HB = np.cos(v01089__00Dd)

# op _00HQ_power_combination_eval
# LANG: dDdR_real_exp, real_weighting --> _00HR
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01167__00HR = (v01158_real_weighting**1)*(v01094_dDdR_real_exp**1)
v01167__00HR = (v01167__00HR*_00HQ_coeff).reshape((1, 2, 3, 40, 11))

# op _00HS_power_combination_eval
# LANG: dDdR_imag_exp, imag_weighting --> _00HT
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01169__00HT = (v01161_imag_weighting**1)*(v01155_dDdR_imag_exp**1)
v01169__00HT = (v01169__00HT*_00HS_coeff).reshape((1, 2, 3, 40, 11))

# op _00Hs_cos_eval
# LANG: _00Dd --> _00Ht
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01090__00Ht = np.cos(v01089__00Dd)

# op _00I1_power_combination_eval
# LANG: dDdR_imag_exp, real_weighting --> _00I2
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01199__00I2 = (v01158_real_weighting**1)*(v01155_dDdR_imag_exp**1)
v01199__00I2 = (v01199__00I2*_00I1_coeff).reshape((1, 2, 3, 40, 11))

# op _00I3_power_combination_eval
# LANG: dDdR_real_exp, imag_weighting --> _00I4
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01201__00I4 = (v01161_imag_weighting**1)*(v01094_dDdR_real_exp**1)
v01201__00I4 = (v01201__00I4*_00I3_coeff).reshape((1, 2, 3, 40, 11))

# op _00Va_power_combination_eval
# LANG: rel_obs_dist, _00V9 --> _00Vb
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01574__00Vb = (v01573__00V9**1)*(v01566_rel_obs_dist**-1)
v01574__00Vb = (v01574__00Vb*_00Va_coeff).reshape((1, 1, 2))

# op _00W6 reshape_eval
# LANG: _00W5 --> _00W7
# SHAPES: (1, 40, 1) --> (1, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01596__00W7 = v01595__00W5.reshape((1, 40))

# op _0102_cos_eval
# LANG: _00WO --> _0103
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01686__0103 = np.cos(v01685__00WO)

# op _010C_power_combination_eval
# LANG: dDdR_imag_exp, real_weighting --> _010D
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01795__010D = (v01754_real_weighting**1)*(v01751_dDdR_imag_exp**1)
v01795__010D = (v01795__010D*_010C_coeff).reshape((1, 2, 3, 40, 11))

# op _010E_power_combination_eval
# LANG: dDdR_real_exp, imag_weighting --> _010F
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01797__010F = (v01757_imag_weighting**1)*(v01690_dDdR_real_exp**1)
v01797__010F = (v01797__010F*_010E_coeff).reshape((1, 2, 3, 40, 11))

# op _010a_cos_eval
# LANG: _00WO --> _010b
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01747__010b = np.cos(v01685__00WO)

# op _010q_power_combination_eval
# LANG: dDdR_real_exp, real_weighting --> _010r
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01763__010r = (v01754_real_weighting**1)*(v01690_dDdR_real_exp**1)
v01763__010r = (v01763__010r*_010q_coeff).reshape((1, 2, 3, 40, 11))

# op _010s_power_combination_eval
# LANG: dDdR_imag_exp, imag_weighting --> _010t
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01765__010t = (v01757_imag_weighting**1)*(v01751_dDdR_imag_exp**1)
v01765__010t = (v01765__010t*_010s_coeff).reshape((1, 2, 3, 40, 11))

# op _01I6_matvec_eval
# LANG: rot_mat, _01I5 --> thrust_dir
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02914_thrust_dir = v02906_rot_mat@v02917__01I5

# op _01MT_power_combination_eval
# LANG: _01MQ, _01MS --> _01MU
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03065__01MU = (v03064__01MQ**1)*(v03067__01MS**1)
v03065__01MU = (v03065__01MU*_01MT_coeff).reshape((1, 3, 11, 29))

# op _01N9_power_combination_eval
# LANG: _01N6, _01N8 --> _01Na
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03074__01Na = (v03073__01N6**1)*(v03075__01N8**1)
v03074__01Na = (v03074__01Na*_01N9_coeff).reshape((1, 3, 11, 29))

# op _01NH_power_combination_eval
# LANG: _01NE, _01NG --> _01NI
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03090__01NI = (v03089__01NE**1)*(v03091__01NG**1)
v03090__01NI = (v03090__01NI*_01NH_coeff).reshape((1, 3, 11, 29))

# op _01Nq_power_combination_eval
# LANG: _01Nn, _01Np --> _01Nr
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03082__01Nr = (v03081__01Nn**1)*(v03083__01Np**1)
v03082__01Nr = (v03082__01Nr*_01Nq_coeff).reshape((1, 3, 11, 29))

# op _01OC_power_combination_eval
# LANG: _01O9, _01OB --> _01OD
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03104__01OD = (v03103__01O9**1)*(v03109__01OB**1)
v03104__01OD = (v03104__01OD*_01OC_coeff).reshape((1, 2))

# op _01OL_tensor_dot_product_eval
# LANG: _01OK, rel_obs_position --> _01OM
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03133__01OM = np.sum(v03017_rel_obs_position * v03135__01OK, axis=1)

# op _01P2 expand_scalar_eval
# LANG: propeller_radius --> _01P3
# SHAPES: (1,) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03101__01P3 = np.empty((1, 2, 3, 3, 11))
v03101__01P3.fill(v02902_propeller_radius.item())

# op _01PA_power_combination_eval
# LANG: n_var, _01OU --> _01PB
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03125__01PB = (v03121_n_var**1)*(v03130__01OU**1)
v03125__01PB = (v03125__01PB*_01PA_coeff).reshape((1, 2, 3, 3, 11))

# op _01Z8_matvec_eval
# LANG: rot_mat, _01Z7 --> thrust_dir
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03430_thrust_dir = v03422_rot_mat@v03433__01Z7

# op _022V_power_combination_eval
# LANG: _022S, _022U --> _022W
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03579__022W = (v03578__022S**1)*(v03581__022U**1)
v03579__022W = (v03579__022W*_022V_coeff).reshape((1, 3, 11, 29))

# op _023J_power_combination_eval
# LANG: _023G, _023I --> _023K
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03604__023K = (v03603__023G**1)*(v03605__023I**1)
v03604__023K = (v03604__023K*_023J_coeff).reshape((1, 3, 11, 29))

# op _023b_power_combination_eval
# LANG: _0238, _023a --> _023c
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03588__023c = (v03587__0238**1)*(v03589__023a**1)
v03588__023c = (v03588__023c*_023b_coeff).reshape((1, 3, 11, 29))

# op _023s_power_combination_eval
# LANG: _023p, _023r --> _023t
# SHAPES: (1, 3, 11, 29), (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03596__023t = (v03595__023p**1)*(v03597__023r**1)
v03596__023t = (v03596__023t*_023s_coeff).reshape((1, 3, 11, 29))

# op _024E_power_combination_eval
# LANG: _024b, _024D --> _024F
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03618__024F = (v03617__024b**1)*(v03623__024D**1)
v03618__024F = (v03618__024F*_024E_coeff).reshape((1, 2))

# op _024N_tensor_dot_product_eval
# LANG: _024M, rel_obs_position --> _024O
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03647__024O = np.sum(v03531_rel_obs_position * v03649__024M, axis=1)

# op _0254 expand_scalar_eval
# LANG: propeller_radius --> _0255
# SHAPES: (1,) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03615__0255 = np.empty((1, 2, 3, 3, 11))
v03615__0255.fill(v03418_propeller_radius.item())

# op _025C_power_combination_eval
# LANG: n_var, _024W --> _025D
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03639__025D = (v03635_n_var**1)*(v03644__024W**1)
v03639__025D = (v03639__025D*_025C_coeff).reshape((1, 2, 3, 3, 11))

# op _00BC arccos_eval
# LANG: _00BB --> _00BD
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0979__00BD = np.arccos(v0978__00BB)

# op _00Dq expand_array_eval
# LANG: _00Cx --> _00Dr
# SHAPES: (1, 40) --> (1, 2, 3, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01001__00Dr = np.einsum('ad,bce->abcde', v01000__00Cx.reshape((1, 40)) ,np.ones((2, 3, 1))).reshape((1, 2, 3, 40, 1))

# op _00HC_power_combination_eval
# LANG: _00Hr, _00HB --> _00HD
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01150__00HD = (v01149__00Hr**1)*(v01151__00HB**1)
v01150__00HD = (v01150__00HD*_00HC_coeff).reshape((1, 2, 3, 40, 10))

# op _00HU_linear_combination_eval
# LANG: _00HR, _00HT --> _00HV
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01168__00HV = _00HU_constant+1*v01167__00HR+1*v01169__00HT

# op _00Hu_power_combination_eval
# LANG: _00Hp, _00Ht --> _00Hv
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01088__00Hv = (v01072__00Hp**1)*(v01090__00Ht**1)
v01088__00Hv = (v01088__00Hv*_00Hu_coeff).reshape((1, 2, 3, 40, 10))

# op _00I5_linear_combination_eval
# LANG: _00I2, _00I4 --> _00I6
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01200__00I6 = _00I5_constant+1*v01199__00I2+1*v01201__00I4

# op _00I7_power_combination_eval
# LANG: n_var --> _00I8
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01182__00I8 = (v01171_n_var**1)
v01182__00I8 = (v01182__00I8*_00I7_coeff).reshape((1, 2, 3, 40, 11))

# op _00IT_linear_combination_eval
# LANG: lam_var, n_var --> _00IU
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01203__00IU = _00IT_constant+1*v01171_n_var+-1*v01003_lam_var

# op _00Ip_linear_combination_eval
# LANG: lam_var, n_var --> _00Iq
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01172__00Iq = _00Ip_constant+1*v01171_n_var+-1*v01003_lam_var

# op _00Ix_power_combination_eval
# LANG: n_var --> _00Iy
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01177__00Iy = (v01171_n_var**1)
v01177__00Iy = (v01177__00Iy*_00Ix_coeff).reshape((1, 2, 3, 40, 11))

# op _00J0_power_combination_eval
# LANG: n_var --> _00J1
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01207__00J1 = (v01171_n_var**1)
v01207__00J1 = (v01207__00J1*_00J0_coeff).reshape((1, 2, 3, 40, 11))

# op _00Tu_power_combination_eval
# LANG: temperature --> _00Tv
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01518__00Tv = (v01506_temperature**1)
v01518__00Tv = (v01518__00Tv*_00Tu_coeff).reshape((1,))

# op _00Vc arccos_eval
# LANG: _00Vb --> _00Vd
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01575__00Vd = np.arccos(v01574__00Vb)

# op _00X0 expand_array_eval
# LANG: _00W7 --> _00X1
# SHAPES: (1, 40) --> (1, 2, 3, 40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01597__00X1 = np.einsum('ad,bce->abcde', v01596__00W7.reshape((1, 40)) ,np.ones((2, 3, 1))).reshape((1, 2, 3, 40, 1))

# op _00zU_power_combination_eval
# LANG: temperature --> _00zV
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0922__00zV = (v0910_temperature**1)
v0922__00zV = (v0922__00zV*_00zU_coeff).reshape((1,))

# op _0104_power_combination_eval
# LANG: _00__, _0103 --> _0105
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01684__0105 = (v01668__00__**1)*(v01686__0103**1)
v01684__0105 = (v01684__0105*_0104_coeff).reshape((1, 2, 3, 40, 10))

# op _010G_linear_combination_eval
# LANG: _010D, _010F --> _010H
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01796__010H = _010G_constant+1*v01795__010D+1*v01797__010F

# op _010I_power_combination_eval
# LANG: n_var --> _010J
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01778__010J = (v01767_n_var**1)
v01778__010J = (v01778__010J*_010I_coeff).reshape((1, 2, 3, 40, 11))

# op _010__linear_combination_eval
# LANG: lam_var, n_var --> _0110
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01768__0110 = _010__constant+1*v01767_n_var+-1*v01599_lam_var

# op _010c_power_combination_eval
# LANG: _0101, _010b --> _010d
# SHAPES: (1, 2, 3, 40, 10), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 10)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01746__010d = (v01745__0101**1)*(v01747__010b**1)
v01746__010d = (v01746__010d*_010c_coeff).reshape((1, 2, 3, 40, 10))

# op _010u_linear_combination_eval
# LANG: _010r, _010t --> _010v
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01764__010v = _010u_constant+1*v01763__010r+1*v01765__010t

# op _0117_power_combination_eval
# LANG: n_var --> _0118
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01773__0118 = (v01767_n_var**1)
v01773__0118 = (v01773__0118*_0117_coeff).reshape((1, 2, 3, 40, 11))

# op _011B_power_combination_eval
# LANG: n_var --> _011C
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01803__011C = (v01767_n_var**1)
v01803__011C = (v01803__011C*_011B_coeff).reshape((1, 2, 3, 40, 11))

# op _011t_linear_combination_eval
# LANG: lam_var, n_var --> _011u
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01799__011u = _011t_constant+1*v01767_n_var+-1*v01599_lam_var

# op _01MV_power_combination_eval
# LANG: _01MU --> _01MW
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03068__01MW = (v03065__01MU**1)
v03068__01MW = (v03068__01MW*_01MV_coeff).reshape((1, 3, 11, 29))

# op _01NJ_power_combination_eval
# LANG: _01NI --> _01NK
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03092__01NK = (v03090__01NI**1)
v03092__01NK = (v03092__01NK*_01NJ_coeff).reshape((1, 3, 11, 29))

# op _01Nb_power_combination_eval
# LANG: _01Na --> _01Nc
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03076__01Nc = (v03074__01Na**1)
v03076__01Nc = (v03076__01Nc*_01Nb_coeff).reshape((1, 3, 11, 29))

# op _01Ns_power_combination_eval
# LANG: _01Nr --> _01Nt
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03084__01Nt = (v03082__01Nr**1)
v03084__01Nt = (v03084__01Nt*_01Ns_coeff).reshape((1, 3, 11, 29))

# op _01OG expand_array_eval
# LANG: thrust_dir --> _01OH
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03154__01OH = np.einsum('b,ac->abc', v02914_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _01OX expand_array_eval
# LANG: _01OM --> _01OY
# SHAPES: (1, 2) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03136__01OY = np.einsum('ab,cde->abcde', v03133__01OM.reshape((1, 2)) ,np.ones((3, 3, 11))).reshape((1, 2, 3, 3, 11))

# op _01OZ expand_scalar_eval
# LANG: speed_of_sound --> _01O_
# SHAPES: (1,) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03138__01O_ = np.empty((1, 2, 3, 3, 11))
v03138__01O_.fill(v02976_speed_of_sound.item())

# op _01P0 expand_array_eval
# LANG: _01OD --> _01P1
# SHAPES: (1, 2) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03110__01P1 = np.einsum('ab,cde->abcde', v03104__01OD.reshape((1, 2)) ,np.ones((3, 3, 11))).reshape((1, 2, 3, 3, 11))

# op _01PC_power_combination_eval
# LANG: _01P3, _01PB --> _01PD
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03131__01PD = (v03125__01PB**1)*(v03101__01P3**1)
v03131__01PD = (v03131__01PD*_01PC_coeff).reshape((1, 2, 3, 3, 11))

# op _022X_power_combination_eval
# LANG: _022W --> _022Y
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03582__022Y = (v03579__022W**1)
v03582__022Y = (v03582__022Y*_022X_coeff).reshape((1, 3, 11, 29))

# op _023L_power_combination_eval
# LANG: _023K --> _023M
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03606__023M = (v03604__023K**1)
v03606__023M = (v03606__023M*_023L_coeff).reshape((1, 3, 11, 29))

# op _023d_power_combination_eval
# LANG: _023c --> _023e
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03590__023e = (v03588__023c**1)
v03590__023e = (v03590__023e*_023d_coeff).reshape((1, 3, 11, 29))

# op _023u_power_combination_eval
# LANG: _023t --> _023v
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11, 29)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03598__023v = (v03596__023t**1)
v03598__023v = (v03598__023v*_023u_coeff).reshape((1, 3, 11, 29))

# op _024I expand_array_eval
# LANG: thrust_dir --> _024J
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03668__024J = np.einsum('b,ac->abc', v03430_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _024Z expand_array_eval
# LANG: _024O --> _024_
# SHAPES: (1, 2) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03650__024_ = np.einsum('ab,cde->abcde', v03647__024O.reshape((1, 2)) ,np.ones((3, 3, 11))).reshape((1, 2, 3, 3, 11))

# op _0250 expand_scalar_eval
# LANG: speed_of_sound --> _0251
# SHAPES: (1,) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03652__0251 = np.empty((1, 2, 3, 3, 11))
v03652__0251.fill(v03490_speed_of_sound.item())

# op _0252 expand_array_eval
# LANG: _024F --> _0253
# SHAPES: (1, 2) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03624__0253 = np.einsum('ab,cde->abcde', v03618__024F.reshape((1, 2)) ,np.ones((3, 3, 11))).reshape((1, 2, 3, 3, 11))

# op _025E_power_combination_eval
# LANG: _0255, _025D --> _025F
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03645__025F = (v03639__025D**1)*(v03615__0255**1)
v03645__025F = (v03645__025F*_025E_coeff).reshape((1, 2, 3, 3, 11))

# op _00BG reshape_eval
# LANG: _00BD --> rel_angle_normal
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0980_rel_angle_normal = v0979__00BD.reshape((1, 2))

# op _00Ds_indexed_passthrough_eval
# LANG: _00Dr, _00Hv --> dTdR_real_exp
# SHAPES: (1, 2, 3, 40, 1), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01002_dTdR_real_exp__temp[i_v01001__00Dr__00Ds_indexed_passthrough_eval] = v01001__00Dr.flatten()
v01002_dTdR_real_exp = v01002_dTdR_real_exp__temp.copy()
v01002_dTdR_real_exp__temp[i_v01088__00Hv__00Ds_indexed_passthrough_eval] = v01088__00Hv.flatten()
v01002_dTdR_real_exp = v01002_dTdR_real_exp__temp.copy()

# op _00HE_indexed_passthrough_eval
# LANG: _00HD --> dTdR_imag_exp
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01152_dTdR_imag_exp__temp[i_v01150__00HD__00HE_indexed_passthrough_eval] = v01150__00HD.flatten()
v01152_dTdR_imag_exp = v01152_dTdR_imag_exp__temp.copy()

# op _00I9_power_combination_eval
# LANG: _00CH, _00I8 --> _00Ia
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01183__00Ia = (v01182__00I8**1)*(v01009__00CH**1)
v01183__00Ia = (v01183__00Ia*_00I9_coeff).reshape((1, 2, 3, 40, 11))

# op _00IV_power_combination_eval
# LANG: _00I6, _00IU --> _00IW
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01202__00IW = (v01200__00I6**1)*(v01203__00IU**1)
v01202__00IW = (v01202__00IW*_00IV_coeff).reshape((1, 2, 3, 40, 11))

# op _00Ir_power_combination_eval
# LANG: _00HV, _00Iq --> _00Is
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01170__00Is = (v01168__00HV**1)*(v01172__00Iq**1)
v01170__00Is = (v01170__00Is*_00Ir_coeff).reshape((1, 2, 3, 40, 11))

# op _00Iz_power_combination_eval
# LANG: _00CH, _00Iy --> _00IA
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01178__00IA = (v01177__00Iy**1)*(v01009__00CH**1)
v01178__00IA = (v01178__00IA*_00Iz_coeff).reshape((1, 2, 3, 40, 11))

# op _00J2_power_combination_eval
# LANG: _00CH, _00J1 --> _00J3
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01208__00J3 = (v01207__00J1**1)*(v01009__00CH**1)
v01208__00J3 = (v01208__00J3*_00J2_coeff).reshape((1, 2, 3, 40, 11))

# op _00Tw_power_combination_eval
# LANG: _00Tv --> speed_of_sound
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01519_speed_of_sound = (v01518__00Tv**0.5)
v01519_speed_of_sound = (v01519_speed_of_sound*_00Tw_coeff).reshape((1,))

# op _00Vg reshape_eval
# LANG: _00Vd --> rel_angle_normal
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01576_rel_angle_normal = v01575__00Vd.reshape((1, 2))

# op _00X2_indexed_passthrough_eval
# LANG: _00X1, _0105 --> dTdR_real_exp
# SHAPES: (1, 2, 3, 40, 1), (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01598_dTdR_real_exp__temp[i_v01597__00X1__00X2_indexed_passthrough_eval] = v01597__00X1.flatten()
v01598_dTdR_real_exp = v01598_dTdR_real_exp__temp.copy()
v01598_dTdR_real_exp__temp[i_v01684__0105__00X2_indexed_passthrough_eval] = v01684__0105.flatten()
v01598_dTdR_real_exp = v01598_dTdR_real_exp__temp.copy()

# op _00zW_power_combination_eval
# LANG: _00zV --> speed_of_sound
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0923_speed_of_sound = (v0922__00zV**0.5)
v0923_speed_of_sound = (v0923_speed_of_sound*_00zW_coeff).reshape((1,))

# op _010K_power_combination_eval
# LANG: _00Wh, _010J --> _010L
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01779__010L = (v01778__010J**1)*(v01605__00Wh**1)
v01779__010L = (v01779__010L*_010K_coeff).reshape((1, 2, 3, 40, 11))

# op _010e_indexed_passthrough_eval
# LANG: _010d --> dTdR_imag_exp
# SHAPES: (1, 2, 3, 40, 10) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01748_dTdR_imag_exp__temp[i_v01746__010d__010e_indexed_passthrough_eval] = v01746__010d.flatten()
v01748_dTdR_imag_exp = v01748_dTdR_imag_exp__temp.copy()

# op _0111_power_combination_eval
# LANG: _010v, _0110 --> _0112
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01766__0112 = (v01764__010v**1)*(v01768__0110**1)
v01766__0112 = (v01766__0112*_0111_coeff).reshape((1, 2, 3, 40, 11))

# op _0119_power_combination_eval
# LANG: _00Wh, _0118 --> _011a
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01774__011a = (v01773__0118**1)*(v01605__00Wh**1)
v01774__011a = (v01774__011a*_0119_coeff).reshape((1, 2, 3, 40, 11))

# op _011D_power_combination_eval
# LANG: _00Wh, _011C --> _011E
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01804__011E = (v01803__011C**1)*(v01605__00Wh**1)
v01804__011E = (v01804__011E*_011D_coeff).reshape((1, 2, 3, 40, 11))

# op _011v_power_combination_eval
# LANG: _010H, _011u --> _011w
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01798__011w = (v01796__010H**1)*(v01799__011u**1)
v01798__011w = (v01798__011w*_011v_coeff).reshape((1, 2, 3, 40, 11))

# op _01MX_single_tensor_sum_with_axis_eval
# LANG: _01MW --> aT
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03069_aT = np.sum(v03068__01MW, axis = (3,)).reshape((1, 3, 11))

# op _01NL_single_tensor_sum_with_axis_eval
# LANG: _01NK --> bD
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03093_bD = np.sum(v03092__01NK, axis = (3,)).reshape((1, 3, 11))

# op _01Nd_single_tensor_sum_with_axis_eval
# LANG: _01Nc --> aD
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03077_aD = np.sum(v03076__01Nc, axis = (3,)).reshape((1, 3, 11))

# op _01Nu_single_tensor_sum_with_axis_eval
# LANG: _01Nt --> bT
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03085_bT = np.sum(v03084__01Nt, axis = (3,)).reshape((1, 3, 11))

# op _01ON_tensor_dot_product_eval
# LANG: _01OH, rel_obs_position --> _01OO
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03153__01OO = np.sum(v03017_rel_obs_position * v03154__01OH, axis=1)

# op _01PE_power_combination_eval
# LANG: _01PD, _01OY --> _01PF
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03132__01PF = (v03131__01PD**1)*(v03136__01OY**1)
v03132__01PF = (v03132__01PF*_01PE_coeff).reshape((1, 2, 3, 3, 11))

# op _01PG_power_combination_eval
# LANG: _01P1, _01O_ --> _01PH
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03139__01PH = (v03138__01O_**1)*(v03110__01P1**1)
v03139__01PH = (v03139__01PH*_01PG_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qj_exp_a_eval
# LANG: lam_var --> _01Qk
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03144__01Qk = _01Qj_exp_a_eval_a**v03123_lam_var

# op _01Rg_exp_a_eval
# LANG: lam_var --> _01Rh
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03203__01Rh = _01Rg_exp_a_eval_a**v03123_lam_var

# op _022Z_single_tensor_sum_with_axis_eval
# LANG: _022Y --> aT
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aT_load_integration_model
v03583_aT = np.sum(v03582__022Y, axis = (3,)).reshape((1, 3, 11))

# op _023N_single_tensor_sum_with_axis_eval
# LANG: _023M --> bD
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bD_load_integration_model
v03607_bD = np.sum(v03606__023M, axis = (3,)).reshape((1, 3, 11))

# op _023f_single_tensor_sum_with_axis_eval
# LANG: _023e --> aD
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.aD_load_integration_model
v03591_aD = np.sum(v03590__023e, axis = (3,)).reshape((1, 3, 11))

# op _023w_single_tensor_sum_with_axis_eval
# LANG: _023v --> bT
# SHAPES: (1, 3, 11, 29) --> (1, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.load_integration_model.bT_load_integration_model
v03599_bT = np.sum(v03598__023v, axis = (3,)).reshape((1, 3, 11))

# op _024P_tensor_dot_product_eval
# LANG: _024J, rel_obs_position --> _024Q
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03667__024Q = np.sum(v03531_rel_obs_position * v03668__024J, axis=1)

# op _025G_power_combination_eval
# LANG: _025F, _024_ --> _025H
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03646__025H = (v03645__025F**1)*(v03650__024_**1)
v03646__025H = (v03646__025H*_025G_coeff).reshape((1, 2, 3, 3, 11))

# op _025I_power_combination_eval
# LANG: _0253, _0251 --> _025J
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03653__025J = (v03652__0251**1)*(v03624__0253**1)
v03653__025J = (v03653__025J*_025I_coeff).reshape((1, 2, 3, 3, 11))

# op _026l_exp_a_eval
# LANG: lam_var --> _026m
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03658__026m = _026l_exp_a_eval_a**v03637_lam_var

# op _027i_exp_a_eval
# LANG: lam_var --> _027j
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03717__027j = _027i_exp_a_eval_a**v03637_lam_var

# op _00CC expand_array_eval
# LANG: rel_angle_normal --> _00CD
# SHAPES: (1, 2) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01164__00CD = np.einsum('ab,cde->abcde', v0980_rel_angle_normal.reshape((1, 2)) ,np.ones((3, 40, 11))).reshape((1, 2, 3, 40, 11))

# op _00CK expand_scalar_eval
# LANG: speed_of_sound --> _00CL
# SHAPES: (1,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01175__00CL = np.empty((1, 2, 3, 40, 11))
v01175__00CL.fill(v0923_speed_of_sound.item())

# op _00HK_power_combination_eval
# LANG: dTdR_real_exp, real_weighting --> _00HL
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01159__00HL = (v01158_real_weighting**1)*(v01002_dTdR_real_exp**1)
v01159__00HL = (v01159__00HL*_00HK_coeff).reshape((1, 2, 3, 40, 11))

# op _00HM_power_combination_eval
# LANG: dTdR_imag_exp, imag_weighting --> _00HN
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01162__00HN = (v01161_imag_weighting**1)*(v01152_dTdR_imag_exp**1)
v01162__00HN = (v01162__00HN*_00HM_coeff).reshape((1, 2, 3, 40, 11))

# op _00HW_power_combination_eval
# LANG: dTdR_imag_exp, real_weighting --> _00HX
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01193__00HX = (v01158_real_weighting**1)*(v01152_dTdR_imag_exp**1)
v01193__00HX = (v01193__00HX*_00HW_coeff).reshape((1, 2, 3, 40, 11))

# op _00HY_power_combination_eval
# LANG: dTdR_real_exp, imag_weighting --> _00HZ
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01195__00HZ = (v01161_imag_weighting**1)*(v01002_dTdR_real_exp**1)
v01195__00HZ = (v01195__00HZ*_00HY_coeff).reshape((1, 2, 3, 40, 11))

# op _00IB_power_combination_eval
# LANG: _00CF, _00IA --> _00IC
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01179__00IC = (v01178__00IA**1)*(v0998__00CF**1)
v01179__00IC = (v01179__00IC*_00IB_coeff).reshape((1, 2, 3, 40, 11))

# op _00IX_power_combination_eval
# LANG: _00IW --> _00IY
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01204__00IY = (v01202__00IW**1)
v01204__00IY = (v01204__00IY*_00IX_coeff).reshape((1, 2, 3, 40, 11))

# op _00Ib_power_combination_eval
# LANG: _00CF, _00Ia --> _00Ic
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01184__00Ic = (v01183__00Ia**1)*(v0998__00CF**1)
v01184__00Ic = (v01184__00Ic*_00Ib_coeff).reshape((1, 2, 3, 40, 11))

# op _00It_power_combination_eval
# LANG: _00Is --> _00Iu
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01173__00Iu = (v01170__00Is**1)
v01173__00Iu = (v01173__00Iu*_00It_coeff).reshape((1, 2, 3, 40, 11))

# op _00J4_power_combination_eval
# LANG: _00CF, _00J3 --> _00J5
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01209__00J5 = (v01208__00J3**1)*(v0998__00CF**1)
v01209__00J5 = (v01209__00J5*_00J4_coeff).reshape((1, 2, 3, 40, 11))

# op _00Wc expand_array_eval
# LANG: rel_angle_normal --> _00Wd
# SHAPES: (1, 2) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01760__00Wd = np.einsum('ab,cde->abcde', v01576_rel_angle_normal.reshape((1, 2)) ,np.ones((3, 40, 11))).reshape((1, 2, 3, 40, 11))

# op _00Wk expand_scalar_eval
# LANG: speed_of_sound --> _00Wl
# SHAPES: (1,) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01771__00Wl = np.empty((1, 2, 3, 40, 11))
v01771__00Wl.fill(v01519_speed_of_sound.item())

# op _010M_power_combination_eval
# LANG: _00Wf, _010L --> _010N
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01780__010N = (v01779__010L**1)*(v01594__00Wf**1)
v01780__010N = (v01780__010N*_010M_coeff).reshape((1, 2, 3, 40, 11))

# op _010k_power_combination_eval
# LANG: dTdR_real_exp, real_weighting --> _010l
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01755__010l = (v01754_real_weighting**1)*(v01598_dTdR_real_exp**1)
v01755__010l = (v01755__010l*_010k_coeff).reshape((1, 2, 3, 40, 11))

# op _010m_power_combination_eval
# LANG: dTdR_imag_exp, imag_weighting --> _010n
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01758__010n = (v01757_imag_weighting**1)*(v01748_dTdR_imag_exp**1)
v01758__010n = (v01758__010n*_010m_coeff).reshape((1, 2, 3, 40, 11))

# op _010w_power_combination_eval
# LANG: dTdR_imag_exp, real_weighting --> _010x
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01789__010x = (v01754_real_weighting**1)*(v01748_dTdR_imag_exp**1)
v01789__010x = (v01789__010x*_010w_coeff).reshape((1, 2, 3, 40, 11))

# op _010y_power_combination_eval
# LANG: dTdR_real_exp, imag_weighting --> _010z
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01791__010z = (v01757_imag_weighting**1)*(v01598_dTdR_real_exp**1)
v01791__010z = (v01791__010z*_010y_coeff).reshape((1, 2, 3, 40, 11))

# op _0113_power_combination_eval
# LANG: _0112 --> _0114
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01769__0114 = (v01766__0112**1)
v01769__0114 = (v01769__0114*_0113_coeff).reshape((1, 2, 3, 40, 11))

# op _011F_power_combination_eval
# LANG: _00Wf, _011E --> _011G
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01805__011G = (v01804__011E**1)*(v01594__00Wf**1)
v01805__011G = (v01805__011G*_011F_coeff).reshape((1, 2, 3, 40, 11))

# op _011b_power_combination_eval
# LANG: _00Wf, _011a --> _011c
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01775__011c = (v01774__011a**1)*(v01594__00Wf**1)
v01775__011c = (v01775__011c*_011b_coeff).reshape((1, 2, 3, 40, 11))

# op _011x_power_combination_eval
# LANG: _011w --> _011y
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01800__011y = (v01798__011w**1)
v01800__011y = (v01800__011y*_011x_coeff).reshape((1, 2, 3, 40, 11))

# op _01OV expand_array_eval
# LANG: _01OO --> _01OW
# SHAPES: (1, 2) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03155__01OW = np.einsum('ab,cde->abcde', v03153__01OO.reshape((1, 2)) ,np.ones((3, 3, 11))).reshape((1, 2, 3, 3, 11))

# op _01P4 expand_array_eval
# LANG: aT --> _01P5
# SHAPES: (1, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03164__01P5 = np.einsum('ade,bc->abcde', v03069_aT.reshape((1, 3, 11)) ,np.ones((2, 3))).reshape((1, 2, 3, 3, 11))

# op _01P6 expand_array_eval
# LANG: bT --> _01P7
# SHAPES: (1, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03161__01P7 = np.einsum('ade,bc->abcde', v03085_bT.reshape((1, 3, 11)) ,np.ones((2, 3))).reshape((1, 2, 3, 3, 11))

# op _01P8 expand_array_eval
# LANG: aD --> _01P9
# SHAPES: (1, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03119__01P9 = np.einsum('ade,bc->abcde', v03077_aD.reshape((1, 3, 11)) ,np.ones((2, 3))).reshape((1, 2, 3, 3, 11))

# op _01PI_power_combination_eval
# LANG: _01PF, _01PH --> _01PJ
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03137__01PJ = (v03132__01PF**1)*(v03139__01PH**-1)
v03137__01PJ = (v03137__01PJ*_01PI_coeff).reshape((1, 2, 3, 3, 11))

# op _01P__exp_a_eval
# LANG: lam_var --> _01Q0
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03169__01Q0 = _01P__exp_a_eval_a**v03123_lam_var

# op _01Pa expand_array_eval
# LANG: bD --> _01Pb
# SHAPES: (1, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03115__01Pb = np.einsum('ade,bc->abcde', v03093_bD.reshape((1, 3, 11)) ,np.ones((2, 3))).reshape((1, 2, 3, 3, 11))

# op _01Pm_power_combination_eval
# LANG: n_var, _01OU --> _01Pn
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03151__01Pn = (v03121_n_var**1)*(v03130__01OU**1)
v03151__01Pn = (v03151__01Pn*_01Pm_coeff).reshape((1, 2, 3, 3, 11))

# op _01Pq_power_combination_eval
# LANG: _01P1 --> _01Pr
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03158__01Pr = (v03110__01P1**2)
v03158__01Pr = (v03158__01Pr*_01Pq_coeff).reshape((1, 2, 3, 3, 11))

# op _01QX_exp_a_eval
# LANG: lam_var --> _01QY
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03187__01QY = _01QX_exp_a_eval_a**v03123_lam_var

# op _01Ql_power_combination_eval
# LANG: A_lin_comb_sign_matrix, _01Qk --> _01Qm
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03143__01Qm = (v03142_A_lin_comb_sign_matrix**1)*(v03144__01Qk**1)
v03143__01Qm = (v03143__01Qm*_01Ql_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qn_linear_combination_eval
# LANG: n_var, lam_var --> _01Qo
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03146__01Qo = _01Qn_constant+1*v03121_n_var+1*v03123_lam_var

# op _01Ri_power_combination_eval
# LANG: B_lin_comb_sign_matrix, _01Rh --> _01Rj
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03202__01Rj = (v03185_B_lin_comb_sign_matrix**1)*(v03203__01Rh**1)
v03202__01Rj = (v03202__01Rj*_01Ri_coeff).reshape((1, 2, 3, 3, 11))

# op _01Rk_linear_combination_eval
# LANG: n_var, lam_var --> _01Rl
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03205__01Rl = _01Rk_constant+1*v03121_n_var+1*v03123_lam_var

# op _024X expand_array_eval
# LANG: _024Q --> _024Y
# SHAPES: (1, 2) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03669__024Y = np.einsum('ab,cde->abcde', v03667__024Q.reshape((1, 2)) ,np.ones((3, 3, 11))).reshape((1, 2, 3, 3, 11))

# op _0256 expand_array_eval
# LANG: aT --> _0257
# SHAPES: (1, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03678__0257 = np.einsum('ade,bc->abcde', v03583_aT.reshape((1, 3, 11)) ,np.ones((2, 3))).reshape((1, 2, 3, 3, 11))

# op _0258 expand_array_eval
# LANG: bT --> _0259
# SHAPES: (1, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03675__0259 = np.einsum('ade,bc->abcde', v03599_bT.reshape((1, 3, 11)) ,np.ones((2, 3))).reshape((1, 2, 3, 3, 11))

# op _025K_power_combination_eval
# LANG: _025H, _025J --> _025L
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03651__025L = (v03646__025H**1)*(v03653__025J**-1)
v03651__025L = (v03651__025L*_025K_coeff).reshape((1, 2, 3, 3, 11))

# op _025a expand_array_eval
# LANG: aD --> _025b
# SHAPES: (1, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03633__025b = np.einsum('ade,bc->abcde', v03591_aD.reshape((1, 3, 11)) ,np.ones((2, 3))).reshape((1, 2, 3, 3, 11))

# op _025c expand_array_eval
# LANG: bD --> _025d
# SHAPES: (1, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03629__025d = np.einsum('ade,bc->abcde', v03607_bD.reshape((1, 3, 11)) ,np.ones((2, 3))).reshape((1, 2, 3, 3, 11))

# op _025o_power_combination_eval
# LANG: n_var, _024W --> _025p
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03665__025p = (v03635_n_var**1)*(v03644__024W**1)
v03665__025p = (v03665__025p*_025o_coeff).reshape((1, 2, 3, 3, 11))

# op _025s_power_combination_eval
# LANG: _0253 --> _025t
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03672__025t = (v03624__0253**2)
v03672__025t = (v03672__025t*_025s_coeff).reshape((1, 2, 3, 3, 11))

# op _0261_exp_a_eval
# LANG: lam_var --> _0262
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03683__0262 = _0261_exp_a_eval_a**v03637_lam_var

# op _026Z_exp_a_eval
# LANG: lam_var --> _026_
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03701__026_ = _026Z_exp_a_eval_a**v03637_lam_var

# op _026n_power_combination_eval
# LANG: A_lin_comb_sign_matrix, _026m --> _026o
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03657__026o = (v03656_A_lin_comb_sign_matrix**1)*(v03658__026m**1)
v03657__026o = (v03657__026o*_026n_coeff).reshape((1, 2, 3, 3, 11))

# op _026p_linear_combination_eval
# LANG: n_var, lam_var --> _026q
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03660__026q = _026p_constant+1*v03635_n_var+1*v03637_lam_var

# op _027k_power_combination_eval
# LANG: B_lin_comb_sign_matrix, _027j --> _027l
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03716__027l = (v03699_B_lin_comb_sign_matrix**1)*(v03717__027j**1)
v03716__027l = (v03716__027l*_027k_coeff).reshape((1, 2, 3, 3, 11))

# op _027m_linear_combination_eval
# LANG: n_var, lam_var --> _027n
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03719__027n = _027m_constant+1*v03635_n_var+1*v03637_lam_var

# op _00HO_linear_combination_eval
# LANG: _00HL, _00HN --> _00HP
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01160__00HP = _00HO_constant+1*v01159__00HL+1*v01162__00HN

# op _00H__linear_combination_eval
# LANG: _00HX, _00HZ --> _00I0
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01194__00I0 = _00H__constant+1*v01193__00HX+1*v01195__00HZ

# op _00ID_power_combination_eval
# LANG: _00CJ, _00IC --> _00IE
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01180__00IE = (v01179__00IC**1)*(v01018__00CJ**1)
v01180__00IE = (v01180__00IE*_00ID_coeff).reshape((1, 2, 3, 40, 11))

# op _00IP_cos_eval
# LANG: _00CD --> _00IQ
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01197__00IQ = np.cos(v01164__00CD)

# op _00IZ_power_combination_eval
# LANG: _00CL, _00IY --> _00I_
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01205__00I_ = (v01204__00IY**1)*(v01175__00CL**1)
v01205__00I_ = (v01205__00I_*_00IZ_coeff).reshape((1, 2, 3, 40, 11))

# op _00Id_power_combination_eval
# LANG: _00CJ, _00Ic --> _00Ie
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01185__00Ie = (v01184__00Ic**1)*(v01018__00CJ**1)
v01185__00Ie = (v01185__00Ie*_00Id_coeff).reshape((1, 2, 3, 40, 11))

# op _00Il_cos_eval
# LANG: _00CD --> _00Im
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01165__00Im = np.cos(v01164__00CD)

# op _00Iv_power_combination_eval
# LANG: _00Iu, _00CL --> _00Iw
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01174__00Iw = (v01173__00Iu**1)*(v01175__00CL**1)
v01174__00Iw = (v01174__00Iw*_00Iv_coeff).reshape((1, 2, 3, 40, 11))

# op _00J6_power_combination_eval
# LANG: _00CJ, _00J5 --> _00J7
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01210__00J7 = (v01209__00J5**1)*(v01018__00CJ**1)
v01210__00J7 = (v01210__00J7*_00J6_coeff).reshape((1, 2, 3, 40, 11))

# op _00MT expand_scalar_eval
# LANG: Vx --> _00MU
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01316__00MU = np.empty((1, 1))
v01316__00MU.fill(v033_u.item())

# op _00MW expand_scalar_eval
# LANG: Vy --> _00MX
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01318__00MX = np.empty((1, 1))
v01318__00MX.fill(v034_v.item())

# op _00MY expand_scalar_eval
# LANG: Vz --> _00MZ
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01319__00MZ = np.empty((1, 1))
v01319__00MZ.fill(v035_w.item())

# op _010A_linear_combination_eval
# LANG: _010x, _010z --> _010B
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01790__010B = _010A_constant+1*v01789__010x+1*v01791__010z

# op _010O_power_combination_eval
# LANG: _00Wj, _010N --> _010P
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01781__010P = (v01780__010N**1)*(v01614__00Wj**1)
v01781__010P = (v01781__010P*_010O_coeff).reshape((1, 2, 3, 40, 11))

# op _010W_cos_eval
# LANG: _00Wd --> _010X
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01761__010X = np.cos(v01760__00Wd)

# op _010o_linear_combination_eval
# LANG: _010l, _010n --> _010p
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01756__010p = _010o_constant+1*v01755__010l+1*v01758__010n

# op _0115_power_combination_eval
# LANG: _0114, _00Wl --> _0116
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01770__0116 = (v01769__0114**1)*(v01771__00Wl**1)
v01770__0116 = (v01770__0116*_0115_coeff).reshape((1, 2, 3, 40, 11))

# op _011H_power_combination_eval
# LANG: _00Wj, _011G --> _011I
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01806__011I = (v01805__011G**1)*(v01614__00Wj**1)
v01806__011I = (v01806__011I*_011H_coeff).reshape((1, 2, 3, 40, 11))

# op _011d_power_combination_eval
# LANG: _00Wj, _011c --> _011e
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01776__011e = (v01775__011c**1)*(v01614__00Wj**1)
v01776__011e = (v01776__011e*_011d_coeff).reshape((1, 2, 3, 40, 11))

# op _011p_cos_eval
# LANG: _00Wd --> _011q
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01793__011q = np.cos(v01760__00Wd)

# op _011z_power_combination_eval
# LANG: _00Wl, _011y --> _011A
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01801__011A = (v01800__011y**1)*(v01771__00Wl**1)
v01801__011A = (v01801__011A*_011z_coeff).reshape((1, 2, 3, 40, 11))

# op _015t expand_scalar_eval
# LANG: Vx --> _015u
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01912__015u = np.empty((1, 1))
v01912__015u.fill(v033_u.item())

# op _015w expand_scalar_eval
# LANG: Vy --> _015x
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01914__015x = np.empty((1, 1))
v01914__015x.fill(v034_v.item())

# op _015y expand_scalar_eval
# LANG: Vz --> _015z
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01915__015z = np.empty((1, 1))
v01915__015z.fill(v035_w.item())

# op _01PK_power_combination_eval
# LANG: coeff_sign_matrix_even, _01P7 --> _01PL
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03160__01PL = (v03113_coeff_sign_matrix_even**1)*(v03161__01P7**1)
v03160__01PL = (v03160__01PL*_01PK_coeff).reshape((1, 2, 3, 3, 11))

# op _01PM_power_combination_eval
# LANG: coeff_sign_matrix_odd, _01P5 --> _01PN
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03163__01PN = (v03117_coeff_sign_matrix_odd**1)*(v03164__01P5**1)
v03163__01PN = (v03163__01PN*_01PM_coeff).reshape((1, 2, 3, 3, 11))

# op _01PQ_power_combination_eval
# LANG: coeff_sign_matrix_even, _01Pb --> _01PR
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03114__01PR = (v03113_coeff_sign_matrix_even**1)*(v03115__01Pb**1)
v03114__01PR = (v03114__01PR*_01PQ_coeff).reshape((1, 2, 3, 3, 11))

# op _01PS_power_combination_eval
# LANG: coeff_sign_matrix_odd, _01P9 --> _01PT
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03118__01PT = (v03117_coeff_sign_matrix_odd**1)*(v03119__01P9**1)
v03118__01PT = (v03118__01PT*_01PS_coeff).reshape((1, 2, 3, 3, 11))

# op _01Po_power_combination_eval
# LANG: _01Pn, _01OW --> _01Pp
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03152__01Pp = (v03151__01Pn**1)*(v03155__01OW**1)
v03152__01Pp = (v03152__01Pp*_01Po_coeff).reshape((1, 2, 3, 3, 11))

# op _01Ps_power_combination_eval
# LANG: _01O_, _01Pr --> _01Pt
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03157__01Pt = (v03138__01O_**1)*(v03158__01Pr**1)
v03157__01Pt = (v03157__01Pt*_01Ps_coeff).reshape((1, 2, 3, 3, 11))

# op _01Pw_power_combination_eval
# LANG: _01P3, _01P1 --> _01Px
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03102__01Px = (v03101__01P3**1)*(v03110__01P1**1)
v03102__01Px = (v03102__01Px*_01Pw_coeff).reshape((1, 2, 3, 3, 11))

# op _01Q1_power_combination_eval
# LANG: A_lin_comb_sign_matrix, _01Q0 --> _01Q2
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03168__01Q2 = (v03142_A_lin_comb_sign_matrix**1)*(v03169__01Q0**1)
v03168__01Q2 = (v03168__01Q2*_01Q1_coeff).reshape((1, 2, 3, 3, 11))

# op _01Q3_bessel_eval
# LANG: _01PJ --> _01Q4
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03171__01Q4=_01Q3_bessel_eval(_01Q3_bessel_eval_order,v03137__01PJ)

# op _01QH_power_combination_eval
# LANG: coeff_sign_matrix_even, _01P5 --> _01QI
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03179__01QI = (v03113_coeff_sign_matrix_even**1)*(v03164__01P5**1)
v03179__01QI = (v03179__01QI*_01QH_coeff).reshape((1, 2, 3, 3, 11))

# op _01QJ_power_combination_eval
# LANG: coeff_sign_matrix_odd, _01P7 --> _01QK
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03181__01QK = (v03117_coeff_sign_matrix_odd**1)*(v03161__01P7**1)
v03181__01QK = (v03181__01QK*_01QJ_coeff).reshape((1, 2, 3, 3, 11))

# op _01QN_power_combination_eval
# LANG: coeff_sign_matrix_even, _01P9 --> _01QO
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03194__01QO = (v03113_coeff_sign_matrix_even**1)*(v03119__01P9**1)
v03194__01QO = (v03194__01QO*_01QN_coeff).reshape((1, 2, 3, 3, 11))

# op _01QP_power_combination_eval
# LANG: _01Pb, coeff_sign_matrix_odd --> _01QQ
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03196__01QQ = (v03117_coeff_sign_matrix_odd**1)*(v03115__01Pb**1)
v03196__01QQ = (v03196__01QQ*_01QP_coeff).reshape((1, 2, 3, 3, 11))

# op _01QZ_power_combination_eval
# LANG: B_lin_comb_sign_matrix, _01QY --> _01Q_
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03186__01Q_ = (v03185_B_lin_comb_sign_matrix**1)*(v03187__01QY**1)
v03186__01Q_ = (v03186__01Q_*_01QZ_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qd_linear_combination_eval
# LANG: n_var, lam_var --> _01Qe
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03122__01Qe = _01Qd_constant+1*v03121_n_var+-1*v03123_lam_var

# op _01Qf_bessel_eval
# LANG: _01PJ --> _01Qg
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03140__01Qg=_01Qf_bessel_eval(_01Qf_bessel_eval_order,v03137__01PJ)

# op _01Qp_power_combination_eval
# LANG: _01Qm, _01Qo --> _01Qq
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03145__01Qq = (v03143__01Qm**1)*(v03146__01Qo**1)
v03145__01Qq = (v03145__01Qq*_01Qp_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qr_bessel_eval
# LANG: _01PJ --> _01Qs
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03148__01Qs=_01Qr_bessel_eval(_01Qr_bessel_eval_order,v03137__01PJ)

# op _01R0_bessel_eval
# LANG: _01PJ --> _01R1
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03189__01R1=_01R0_bessel_eval(_01R0_bessel_eval_order,v03137__01PJ)

# op _01Ra_linear_combination_eval
# LANG: n_var, lam_var --> _01Rb
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03198__01Rb = _01Ra_constant+1*v03121_n_var+-1*v03123_lam_var

# op _01Rc_bessel_eval
# LANG: _01PJ --> _01Rd
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03200__01Rd=_01Rc_bessel_eval(_01Rc_bessel_eval_order,v03137__01PJ)

# op _01Rm_power_combination_eval
# LANG: _01Rj, _01Rl --> _01Rn
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03204__01Rn = (v03202__01Rj**1)*(v03205__01Rl**1)
v03204__01Rn = (v03204__01Rn*_01Rm_coeff).reshape((1, 2, 3, 3, 11))

# op _01Ro_bessel_eval
# LANG: _01PJ --> _01Rp
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03207__01Rp=_01Ro_bessel_eval(_01Ro_bessel_eval_order,v03137__01PJ)

# op _01Uh expand_scalar_eval
# LANG: Vx --> _01Ui
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03286__01Ui = np.empty((1, 1))
v03286__01Ui.fill(v02074_u.item())

# op _01Uk expand_scalar_eval
# LANG: Vy --> _01Ul
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03288__01Ul = np.empty((1, 1))
v03288__01Ul.fill(v02079_v.item())

# op _01Um expand_scalar_eval
# LANG: Vz --> _01Un
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03289__01Un = np.empty((1, 1))
v03289__01Un.fill(v02083_w.item())

# op _025M_power_combination_eval
# LANG: coeff_sign_matrix_even, _0259 --> _025N
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03674__025N = (v03627_coeff_sign_matrix_even**1)*(v03675__0259**1)
v03674__025N = (v03674__025N*_025M_coeff).reshape((1, 2, 3, 3, 11))

# op _025O_power_combination_eval
# LANG: coeff_sign_matrix_odd, _0257 --> _025P
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03677__025P = (v03631_coeff_sign_matrix_odd**1)*(v03678__0257**1)
v03677__025P = (v03677__025P*_025O_coeff).reshape((1, 2, 3, 3, 11))

# op _025S_power_combination_eval
# LANG: coeff_sign_matrix_even, _025d --> _025T
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03628__025T = (v03627_coeff_sign_matrix_even**1)*(v03629__025d**1)
v03628__025T = (v03628__025T*_025S_coeff).reshape((1, 2, 3, 3, 11))

# op _025U_power_combination_eval
# LANG: coeff_sign_matrix_odd, _025b --> _025V
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03632__025V = (v03631_coeff_sign_matrix_odd**1)*(v03633__025b**1)
v03632__025V = (v03632__025V*_025U_coeff).reshape((1, 2, 3, 3, 11))

# op _025q_power_combination_eval
# LANG: _025p, _024Y --> _025r
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03666__025r = (v03665__025p**1)*(v03669__024Y**1)
v03666__025r = (v03666__025r*_025q_coeff).reshape((1, 2, 3, 3, 11))

# op _025u_power_combination_eval
# LANG: _0251, _025t --> _025v
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03671__025v = (v03652__0251**1)*(v03672__025t**1)
v03671__025v = (v03671__025v*_025u_coeff).reshape((1, 2, 3, 3, 11))

# op _025y_power_combination_eval
# LANG: _0255, _0253 --> _025z
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03616__025z = (v03615__0255**1)*(v03624__0253**1)
v03616__025z = (v03616__025z*_025y_coeff).reshape((1, 2, 3, 3, 11))

# op _0263_power_combination_eval
# LANG: A_lin_comb_sign_matrix, _0262 --> _0264
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03682__0264 = (v03656_A_lin_comb_sign_matrix**1)*(v03683__0262**1)
v03682__0264 = (v03682__0264*_0263_coeff).reshape((1, 2, 3, 3, 11))

# op _0265_bessel_eval
# LANG: _025L --> _0266
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03685__0266=_0265_bessel_eval(_0265_bessel_eval_order,v03651__025L)

# op _026J_power_combination_eval
# LANG: coeff_sign_matrix_even, _0257 --> _026K
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03693__026K = (v03627_coeff_sign_matrix_even**1)*(v03678__0257**1)
v03693__026K = (v03693__026K*_026J_coeff).reshape((1, 2, 3, 3, 11))

# op _026L_power_combination_eval
# LANG: coeff_sign_matrix_odd, _0259 --> _026M
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03695__026M = (v03631_coeff_sign_matrix_odd**1)*(v03675__0259**1)
v03695__026M = (v03695__026M*_026L_coeff).reshape((1, 2, 3, 3, 11))

# op _026P_power_combination_eval
# LANG: coeff_sign_matrix_even, _025b --> _026Q
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03708__026Q = (v03627_coeff_sign_matrix_even**1)*(v03633__025b**1)
v03708__026Q = (v03708__026Q*_026P_coeff).reshape((1, 2, 3, 3, 11))

# op _026R_power_combination_eval
# LANG: _025d, coeff_sign_matrix_odd --> _026S
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03710__026S = (v03631_coeff_sign_matrix_odd**1)*(v03629__025d**1)
v03710__026S = (v03710__026S*_026R_coeff).reshape((1, 2, 3, 3, 11))

# op _026f_linear_combination_eval
# LANG: n_var, lam_var --> _026g
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03636__026g = _026f_constant+1*v03635_n_var+-1*v03637_lam_var

# op _026h_bessel_eval
# LANG: _025L --> _026i
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03654__026i=_026h_bessel_eval(_026h_bessel_eval_order,v03651__025L)

# op _026r_power_combination_eval
# LANG: _026o, _026q --> _026s
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03659__026s = (v03657__026o**1)*(v03660__026q**1)
v03659__026s = (v03659__026s*_026r_coeff).reshape((1, 2, 3, 3, 11))

# op _026t_bessel_eval
# LANG: _025L --> _026u
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03662__026u=_026t_bessel_eval(_026t_bessel_eval_order,v03651__025L)

# op _0270_power_combination_eval
# LANG: B_lin_comb_sign_matrix, _026_ --> _0271
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03700__0271 = (v03699_B_lin_comb_sign_matrix**1)*(v03701__026_**1)
v03700__0271 = (v03700__0271*_0270_coeff).reshape((1, 2, 3, 3, 11))

# op _0272_bessel_eval
# LANG: _025L --> _0273
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03703__0273=_0272_bessel_eval(_0272_bessel_eval_order,v03651__025L)

# op _027c_linear_combination_eval
# LANG: n_var, lam_var --> _027d
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03712__027d = _027c_constant+1*v03635_n_var+-1*v03637_lam_var

# op _027e_bessel_eval
# LANG: _025L --> _027f
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03714__027f=_027e_bessel_eval(_027e_bessel_eval_order,v03651__025L)

# op _027o_power_combination_eval
# LANG: _027l, _027n --> _027p
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03718__027p = (v03716__027l**1)*(v03719__027n**1)
v03718__027p = (v03718__027p*_027o_coeff).reshape((1, 2, 3, 3, 11))

# op _027q_bessel_eval
# LANG: _025L --> _027r
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03721__027r=_027q_bessel_eval(_027q_bessel_eval_order,v03651__025L)

# op _02aj expand_scalar_eval
# LANG: Vx --> _02ak
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03800__02ak = np.empty((1, 1))
v03800__02ak.fill(v02074_u.item())

# op _02am expand_scalar_eval
# LANG: Vy --> _02an
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03802__02an = np.empty((1, 1))
v03802__02an.fill(v02079_v.item())

# op _02ao expand_scalar_eval
# LANG: Vz --> _02ap
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03803__02ap = np.empty((1, 1))
v03803__02ap.fill(v02083_w.item())

# op _00IF_power_combination_eval
# LANG: _00Iw, _00IE --> _00IG
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01176__00IG = (v01174__00Iw**1)*(v01180__00IE**-1)
v01176__00IG = (v01176__00IG*_00IF_coeff).reshape((1, 2, 3, 40, 11))

# op _00IR_power_combination_eval
# LANG: _00I0, _00IQ --> _00IS
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01196__00IS = (v01194__00I0**1)*(v01197__00IQ**1)
v01196__00IS = (v01196__00IS*_00IR_coeff).reshape((1, 2, 3, 40, 11))

# op _00If_power_combination_eval
# LANG: _00CL, _00Ie --> _00Ig
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01186__00Ig = (v01185__00Ie**1)*(v01175__00CL**-1)
v01186__00Ig = (v01186__00Ig*_00If_coeff).reshape((1, 2, 3, 40, 11))

# op _00Ih_sin_eval
# LANG: _00CD --> _00Ii
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01188__00Ii = np.sin(v01164__00CD)

# op _00In_power_combination_eval
# LANG: _00HP, _00Im --> _00Io
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01163__00Io = (v01160__00HP**1)*(v01165__00Im**1)
v01163__00Io = (v01163__00Io*_00In_coeff).reshape((1, 2, 3, 40, 11))

# op _00J8_power_combination_eval
# LANG: _00I_, _00J7 --> _00J9
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01206__00J9 = (v01205__00I_**1)*(v01210__00J7**-1)
v01206__00J9 = (v01206__00J9*_00J8_coeff).reshape((1, 2, 3, 40, 11))

# op _00MV_indexed_passthrough_eval
# LANG: _00MU, _00MX, _00MZ --> V_aircraft
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01317_V_aircraft__temp[i_v01316__00MU__00MV_indexed_passthrough_eval] = v01316__00MU.flatten()
v01317_V_aircraft = v01317_V_aircraft__temp.copy()
v01317_V_aircraft__temp[i_v01318__00MX__00MV_indexed_passthrough_eval] = v01318__00MX.flatten()
v01317_V_aircraft = v01317_V_aircraft__temp.copy()
v01317_V_aircraft__temp[i_v01319__00MZ__00MV_indexed_passthrough_eval] = v01319__00MZ.flatten()
v01317_V_aircraft = v01317_V_aircraft__temp.copy()

# op _010Q_power_combination_eval
# LANG: _00Wl, _010P --> _010R
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01782__010R = (v01781__010P**1)*(v01771__00Wl**-1)
v01782__010R = (v01782__010R*_010Q_coeff).reshape((1, 2, 3, 40, 11))

# op _010S_sin_eval
# LANG: _00Wd --> _010T
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01784__010T = np.sin(v01760__00Wd)

# op _010Y_power_combination_eval
# LANG: _010p, _010X --> _010Z
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01759__010Z = (v01756__010p**1)*(v01761__010X**1)
v01759__010Z = (v01759__010Z*_010Y_coeff).reshape((1, 2, 3, 40, 11))

# op _011J_power_combination_eval
# LANG: _011A, _011I --> _011K
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01802__011K = (v01801__011A**1)*(v01806__011I**-1)
v01802__011K = (v01802__011K*_011J_coeff).reshape((1, 2, 3, 40, 11))

# op _011f_power_combination_eval
# LANG: _0116, _011e --> _011g
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01772__011g = (v01770__0116**1)*(v01776__011e**-1)
v01772__011g = (v01772__011g*_011f_coeff).reshape((1, 2, 3, 40, 11))

# op _011r_power_combination_eval
# LANG: _010B, _011q --> _011s
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01792__011s = (v01790__010B**1)*(v01793__011q**1)
v01792__011s = (v01792__011s*_011r_coeff).reshape((1, 2, 3, 40, 11))

# op _015v_indexed_passthrough_eval
# LANG: _015u, _015x, _015z --> V_aircraft
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01913_V_aircraft__temp[i_v01912__015u__015v_indexed_passthrough_eval] = v01912__015u.flatten()
v01913_V_aircraft = v01913_V_aircraft__temp.copy()
v01913_V_aircraft__temp[i_v01914__015x__015v_indexed_passthrough_eval] = v01914__015x.flatten()
v01913_V_aircraft = v01913_V_aircraft__temp.copy()
v01913_V_aircraft__temp[i_v01915__015z__015v_indexed_passthrough_eval] = v01915__015z.flatten()
v01913_V_aircraft = v01913_V_aircraft__temp.copy()

# op _01PO_linear_combination_eval
# LANG: _01PL, _01PN --> _01PP
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03162__01PP = _01PO_constant+1*v03160__01PL+1*v03163__01PN

# op _01PU_linear_combination_eval
# LANG: _01PR, _01PT --> _01PV
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03116__01PV = _01PU_constant+1*v03114__01PR+1*v03118__01PT

# op _01PY_bessel_eval
# LANG: _01PJ --> _01PZ
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03166__01PZ=_01PY_bessel_eval(_01PY_bessel_eval_order,v03137__01PJ)

# op _01Pu_power_combination_eval
# LANG: _01Pp, _01Pt --> _01Pv
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03156__01Pv = (v03152__01Pp**1)*(v03157__01Pt**-1)
v03156__01Pv = (v03156__01Pv*_01Pu_coeff).reshape((1, 2, 3, 3, 11))

# op _01Py_power_combination_eval
# LANG: _01Px --> _01Pz
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03111__01Pz = (v03102__01Px**-1)
v03111__01Pz = (v03111__01Pz*_01Py_coeff).reshape((1, 2, 3, 3, 11))

# op _01Q5_power_combination_eval
# LANG: _01Q2, _01Q4 --> _01Q6
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03170__01Q6 = (v03168__01Q2**1)*(v03171__01Q4**1)
v03170__01Q6 = (v03170__01Q6*_01Q5_coeff).reshape((1, 2, 3, 3, 11))

# op _01QL_linear_combination_eval
# LANG: _01QI, _01QK --> _01QM
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03180__01QM = _01QL_constant+1*v03179__01QI+1*v03181__01QK

# op _01QR_linear_combination_eval
# LANG: _01QO, _01QQ --> _01QS
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03195__01QS = _01QR_constant+1*v03194__01QO+1*v03196__01QQ

# op _01QV_bessel_eval
# LANG: _01PJ --> _01QW
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03183__01QW=_01QV_bessel_eval(_01QV_bessel_eval_order,v03137__01PJ)

# op _01Qh_power_combination_eval
# LANG: _01Qe, _01Qg --> _01Qi
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03124__01Qi = (v03122__01Qe**1)*(v03140__01Qg**1)
v03124__01Qi = (v03124__01Qi*_01Qh_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qt_power_combination_eval
# LANG: _01Qq, _01Qs --> _01Qu
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03147__01Qu = (v03145__01Qq**1)*(v03148__01Qs**1)
v03147__01Qu = (v03147__01Qu*_01Qt_coeff).reshape((1, 2, 3, 3, 11))

# op _01R2_power_combination_eval
# LANG: _01Q_, _01R1 --> _01R3
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03188__01R3 = (v03186__01Q_**1)*(v03189__01R1**1)
v03188__01R3 = (v03188__01R3*_01R2_coeff).reshape((1, 2, 3, 3, 11))

# op _01Re_power_combination_eval
# LANG: _01Rb, _01Rd --> _01Rf
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03199__01Rf = (v03198__01Rb**1)*(v03200__01Rd**1)
v03199__01Rf = (v03199__01Rf*_01Re_coeff).reshape((1, 2, 3, 3, 11))

# op _01Rq_power_combination_eval
# LANG: _01Rn, _01Rp --> _01Rr
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03206__01Rr = (v03204__01Rn**1)*(v03207__01Rp**1)
v03206__01Rr = (v03206__01Rr*_01Rq_coeff).reshape((1, 2, 3, 3, 11))

# op _01Uj_indexed_passthrough_eval
# LANG: _01Ui, _01Ul, _01Un --> V_aircraft
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03287_V_aircraft__temp[i_v03286__01Ui__01Uj_indexed_passthrough_eval] = v03286__01Ui.flatten()
v03287_V_aircraft = v03287_V_aircraft__temp.copy()
v03287_V_aircraft__temp[i_v03288__01Ul__01Uj_indexed_passthrough_eval] = v03288__01Ul.flatten()
v03287_V_aircraft = v03287_V_aircraft__temp.copy()
v03287_V_aircraft__temp[i_v03289__01Un__01Uj_indexed_passthrough_eval] = v03289__01Un.flatten()
v03287_V_aircraft = v03287_V_aircraft__temp.copy()

# op _025A_power_combination_eval
# LANG: _025z --> _025B
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03625__025B = (v03616__025z**-1)
v03625__025B = (v03625__025B*_025A_coeff).reshape((1, 2, 3, 3, 11))

# op _025Q_linear_combination_eval
# LANG: _025N, _025P --> _025R
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03676__025R = _025Q_constant+1*v03674__025N+1*v03677__025P

# op _025W_linear_combination_eval
# LANG: _025T, _025V --> _025X
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03630__025X = _025W_constant+1*v03628__025T+1*v03632__025V

# op _025__bessel_eval
# LANG: _025L --> _0260
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03680__0260=_025__bessel_eval(_025__bessel_eval_order,v03651__025L)

# op _025w_power_combination_eval
# LANG: _025r, _025v --> _025x
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03670__025x = (v03666__025r**1)*(v03671__025v**-1)
v03670__025x = (v03670__025x*_025w_coeff).reshape((1, 2, 3, 3, 11))

# op _0267_power_combination_eval
# LANG: _0264, _0266 --> _0268
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03684__0268 = (v03682__0264**1)*(v03685__0266**1)
v03684__0268 = (v03684__0268*_0267_coeff).reshape((1, 2, 3, 3, 11))

# op _026N_linear_combination_eval
# LANG: _026K, _026M --> _026O
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03694__026O = _026N_constant+1*v03693__026K+1*v03695__026M

# op _026T_linear_combination_eval
# LANG: _026Q, _026S --> _026U
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03709__026U = _026T_constant+1*v03708__026Q+1*v03710__026S

# op _026X_bessel_eval
# LANG: _025L --> _026Y
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03697__026Y=_026X_bessel_eval(_026X_bessel_eval_order,v03651__025L)

# op _026j_power_combination_eval
# LANG: _026g, _026i --> _026k
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03638__026k = (v03636__026g**1)*(v03654__026i**1)
v03638__026k = (v03638__026k*_026j_coeff).reshape((1, 2, 3, 3, 11))

# op _026v_power_combination_eval
# LANG: _026s, _026u --> _026w
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03661__026w = (v03659__026s**1)*(v03662__026u**1)
v03661__026w = (v03661__026w*_026v_coeff).reshape((1, 2, 3, 3, 11))

# op _0274_power_combination_eval
# LANG: _0271, _0273 --> _0275
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03702__0275 = (v03700__0271**1)*(v03703__0273**1)
v03702__0275 = (v03702__0275*_0274_coeff).reshape((1, 2, 3, 3, 11))

# op _027g_power_combination_eval
# LANG: _027d, _027f --> _027h
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03713__027h = (v03712__027d**1)*(v03714__027f**1)
v03713__027h = (v03713__027h*_027g_coeff).reshape((1, 2, 3, 3, 11))

# op _027s_power_combination_eval
# LANG: _027p, _027r --> _027t
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03720__027t = (v03718__027p**1)*(v03721__027r**1)
v03720__027t = (v03720__027t*_027s_coeff).reshape((1, 2, 3, 3, 11))

# op _02al_indexed_passthrough_eval
# LANG: _02ak, _02an, _02ap --> V_aircraft
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03801_V_aircraft__temp[i_v03800__02ak__02al_indexed_passthrough_eval] = v03800__02ak.flatten()
v03801_V_aircraft = v03801_V_aircraft__temp.copy()
v03801_V_aircraft__temp[i_v03802__02an__02al_indexed_passthrough_eval] = v03802__02an.flatten()
v03801_V_aircraft = v03801_V_aircraft__temp.copy()
v03801_V_aircraft__temp[i_v03803__02ap__02al_indexed_passthrough_eval] = v03803__02ap.flatten()
v03801_V_aircraft = v03801_V_aircraft__temp.copy()

# op _00IH_linear_combination_eval
# LANG: _00Io, _00IG --> _00II
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01166__00II = _00IH_constant+1*v01163__00Io+-1*v01176__00IG

# op _00Ij_power_combination_eval
# LANG: _00Ig, _00Ii --> _00Ik
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01187__00Ik = (v01186__00Ig**1)*(v01188__00Ii**1)
v01187__00Ik = (v01187__00Ik*_00Ij_coeff).reshape((1, 2, 3, 40, 11))

# op _00Ja_linear_combination_eval
# LANG: _00IS, _00J9 --> _00Jb
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01198__00Jb = _00Ja_constant+1*v01196__00IS+-1*v01206__00J9

# op _00M_ expand_array_eval
# LANG: V_aircraft --> _00N0
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01326__00N0 = np.einsum('ab,c->abc', v01317_V_aircraft.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _00N5 expand_array_eval
# LANG: time_vectors --> _00N6
# SHAPES: (2,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01332__00N6 = np.einsum('c,ab->abc', v01331_time_vectors.reshape((2,)) ,np.ones((1, 3))).reshape((1, 3, 2))

# op _010U_power_combination_eval
# LANG: _010R, _010T --> _010V
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01783__010V = (v01782__010R**1)*(v01784__010T**1)
v01783__010V = (v01783__010V*_010U_coeff).reshape((1, 2, 3, 40, 11))

# op _011L_linear_combination_eval
# LANG: _011s, _011K --> _011M
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01794__011M = _011L_constant+1*v01792__011s+-1*v01802__011K

# op _011h_linear_combination_eval
# LANG: _010Z, _011g --> _011i
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01762__011i = _011h_constant+1*v01759__010Z+-1*v01772__011g

# op _015A expand_array_eval
# LANG: V_aircraft --> _015B
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01922__015B = np.einsum('ab,c->abc', v01913_V_aircraft.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _015G expand_array_eval
# LANG: time_vectors --> _015H
# SHAPES: (2,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01928__015H = np.einsum('c,ab->abc', v01927_time_vectors.reshape((2,)) ,np.ones((1, 3))).reshape((1, 3, 2))

# op _01PW_power_combination_eval
# LANG: _01Pv, _01PP --> _01PX
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03159__01PX = (v03156__01Pv**1)*(v03162__01PP**1)
v03159__01PX = (v03159__01PX*_01PW_coeff).reshape((1, 2, 3, 3, 11))

# op _01Q7_linear_combination_eval
# LANG: _01PZ, _01Q6 --> _01Q8
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03167__01Q8 = _01Q7_constant+1*v03166__01PZ+1*v03170__01Q6

# op _01QT_power_combination_eval
# LANG: _01Pv, _01QM --> _01QU
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03178__01QU = (v03156__01Pv**1)*(v03180__01QM**1)
v03178__01QU = (v03178__01QU*_01QT_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qb_power_combination_eval
# LANG: _01Pz, _01PV --> _01Qc
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03112__01Qc = (v03111__01Pz**1)*(v03116__01PV**1)
v03112__01Qc = (v03112__01Qc*_01Qb_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qv_linear_combination_eval
# LANG: _01Qi, _01Qu --> _01Qw
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03141__01Qw = _01Qv_constant+1*v03124__01Qi+1*v03147__01Qu

# op _01R4_linear_combination_eval
# LANG: _01QW, _01R3 --> _01R5
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03184__01R5 = _01R4_constant+1*v03183__01QW+1*v03188__01R3

# op _01R8_power_combination_eval
# LANG: _01Pz, _01QS --> _01R9
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03193__01R9 = (v03111__01Pz**1)*(v03195__01QS**1)
v03193__01R9 = (v03193__01R9*_01R8_coeff).reshape((1, 2, 3, 3, 11))

# op _01Rs_linear_combination_eval
# LANG: _01Rf, _01Rr --> _01Rt
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03201__01Rt = _01Rs_constant+1*v03199__01Rf+1*v03206__01Rr

# op _01Uo expand_array_eval
# LANG: V_aircraft --> _01Up
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03296__01Up = np.einsum('ab,c->abc', v03287_V_aircraft.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _01Uu expand_array_eval
# LANG: time_vectors --> _01Uv
# SHAPES: (2,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03302__01Uv = np.einsum('c,ab->abc', v03301_time_vectors.reshape((2,)) ,np.ones((1, 3))).reshape((1, 3, 2))

# op _025Y_power_combination_eval
# LANG: _025x, _025R --> _025Z
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03673__025Z = (v03670__025x**1)*(v03676__025R**1)
v03673__025Z = (v03673__025Z*_025Y_coeff).reshape((1, 2, 3, 3, 11))

# op _0269_linear_combination_eval
# LANG: _0260, _0268 --> _026a
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03681__026a = _0269_constant+1*v03680__0260+1*v03684__0268

# op _026V_power_combination_eval
# LANG: _025x, _026O --> _026W
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03692__026W = (v03670__025x**1)*(v03694__026O**1)
v03692__026W = (v03692__026W*_026V_coeff).reshape((1, 2, 3, 3, 11))

# op _026d_power_combination_eval
# LANG: _025B, _025X --> _026e
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03626__026e = (v03625__025B**1)*(v03630__025X**1)
v03626__026e = (v03626__026e*_026d_coeff).reshape((1, 2, 3, 3, 11))

# op _026x_linear_combination_eval
# LANG: _026k, _026w --> _026y
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03655__026y = _026x_constant+1*v03638__026k+1*v03661__026w

# op _0276_linear_combination_eval
# LANG: _026Y, _0275 --> _0277
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03698__0277 = _0276_constant+1*v03697__026Y+1*v03702__0275

# op _027a_power_combination_eval
# LANG: _025B, _026U --> _027b
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03707__027b = (v03625__025B**1)*(v03709__026U**1)
v03707__027b = (v03707__027b*_027a_coeff).reshape((1, 2, 3, 3, 11))

# op _027u_linear_combination_eval
# LANG: _027h, _027t --> _027v
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03715__027v = _027u_constant+1*v03713__027h+1*v03720__027t

# op _02aq expand_array_eval
# LANG: V_aircraft --> _02ar
# SHAPES: (1, 3) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03810__02ar = np.einsum('ab,c->abc', v03801_V_aircraft.reshape((1, 3)) ,np.ones((2,))).reshape((1, 3, 2))

# op _02aw expand_array_eval
# LANG: time_vectors --> _02ax
# SHAPES: (2,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03816__02ax = np.einsum('c,ab->abc', v03815_time_vectors.reshape((2,)) ,np.ones((1, 3))).reshape((1, 3, 2))

# op _00IJ_power_combination_eval
# LANG: coeff_matrix_A, _00II --> _00IK
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01157__00IK = (v01156_coeff_matrix_A**1)*(v01166__00II**1)
v01157__00IK = (v01157__00IK*_00IJ_coeff).reshape((1, 2, 3, 40, 11))

# op _00IL_bessel_eval
# LANG: _00Ik --> _00IM
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01189__00IM=_00IL_bessel_eval(_00IL_bessel_eval_order,v01187__00Ik)

# op _00Jc_power_combination_eval
# LANG: coeff_matrix_B, _00Jb --> _00Jd
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01192__00Jd = (v01191_coeff_matrix_B**1)*(v01198__00Jb**1)
v01192__00Jd = (v01192__00Jd*_00Jc_coeff).reshape((1, 2, 3, 40, 11))

# op _00Je_bessel_eval
# LANG: _00Ik --> _00Jf
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01212__00Jf=_00Je_bessel_eval(_00Je_bessel_eval_order,v01187__00Ik)

# op _00KR_power_combination_eval
# LANG: rotor_1_disk_origin --> origin
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((3,))
v01258_origin = (v012_rotor_1_disk_origin**1)
v01258_origin = (v01258_origin*_00KR_coeff).reshape((3,))
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((1, 3))

# op _00KU_power_combination_eval
# LANG: rotor_1_disk_in_plane_1 --> _00KV
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((3,))
v01259__00KV = (v08_rotor_1_disk_in_plane_1**1)
v01259__00KV = (v01259__00KV*_00KU_coeff).reshape((3,))
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((1, 3))

# op _00KX_power_combination_eval
# LANG: rotor_1_disk_in_plane_2 --> _00KY
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((3,))
v01278__00KY = (v010_rotor_1_disk_in_plane_2**1)
v01278__00KY = (v01278__00KY*_00KX_coeff).reshape((3,))
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((1, 3))

# op _00N2 expand_array_eval
# LANG: aircraft_location --> _00N3
# SHAPES: (3, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01321__00N3 = np.einsum('bc,a->abc', v01320_aircraft_location.reshape((3, 2)) ,np.ones((1,))).reshape((1, 3, 2))

# op _00N9_decompose_eval
# LANG: _00N0 --> _00Na, _00Ni, _00Np
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01327__00Na = ((v01326__00N0.flatten())[src_indices__00Na__00N9]).reshape((1, 1, 2))
v01328__00Ni = ((v01326__00N0.flatten())[src_indices__00Ni__00N9]).reshape((1, 1, 2))
v01329__00Np = ((v01326__00N0.flatten())[src_indices__00Np__00N9]).reshape((1, 1, 2))

# op _00Nb_decompose_eval
# LANG: _00N6 --> _00Nc, _00Nj, _00Nq
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01333__00Nc = ((v01332__00N6.flatten())[src_indices__00Nc__00Nb]).reshape((1, 1, 2))
v01334__00Nj = ((v01332__00N6.flatten())[src_indices__00Nj__00Nb]).reshape((1, 1, 2))
v01335__00Nq = ((v01332__00N6.flatten())[src_indices__00Nq__00Nb]).reshape((1, 1, 2))

# op _011N_power_combination_eval
# LANG: coeff_matrix_B, _011M --> _011O
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01788__011O = (v01787_coeff_matrix_B**1)*(v01794__011M**1)
v01788__011O = (v01788__011O*_011N_coeff).reshape((1, 2, 3, 40, 11))

# op _011P_bessel_eval
# LANG: _010V --> _011Q
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01808__011Q=_011P_bessel_eval(_011P_bessel_eval_order,v01783__010V)

# op _011j_power_combination_eval
# LANG: coeff_matrix_A, _011i --> _011k
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01753__011k = (v01752_coeff_matrix_A**1)*(v01762__011i**1)
v01753__011k = (v01753__011k*_011j_coeff).reshape((1, 2, 3, 40, 11))

# op _011l_bessel_eval
# LANG: _010V --> _011m
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01785__011m=_011l_bessel_eval(_011l_bessel_eval_order,v01783__010V)

# op _013r_power_combination_eval
# LANG: rotor_2_disk_origin --> origin
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((3,))
v01854_origin = (v022_rotor_2_disk_origin**1)
v01854_origin = (v01854_origin*_013r_coeff).reshape((3,))
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((1, 3))

# op _013u_power_combination_eval
# LANG: rotor_2_disk_in_plane_1 --> _013v
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((3,))
v01855__013v = (v018_rotor_2_disk_in_plane_1**1)
v01855__013v = (v01855__013v*_013u_coeff).reshape((3,))
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((1, 3))

# op _013x_power_combination_eval
# LANG: rotor_2_disk_in_plane_2 --> _013y
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((3,))
v01874__013y = (v020_rotor_2_disk_in_plane_2**1)
v01874__013y = (v01874__013y*_013x_coeff).reshape((3,))
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((1, 3))

# op _015D expand_array_eval
# LANG: aircraft_location --> _015E
# SHAPES: (3, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01917__015E = np.einsum('bc,a->abc', v01916_aircraft_location.reshape((3, 2)) ,np.ones((1,))).reshape((1, 3, 2))

# op _015K_decompose_eval
# LANG: _015B --> _015L, _015T, _015_
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01923__015L = ((v01922__015B.flatten())[src_indices__015L__015K]).reshape((1, 1, 2))
v01924__015T = ((v01922__015B.flatten())[src_indices__015T__015K]).reshape((1, 1, 2))
v01925__015_ = ((v01922__015B.flatten())[src_indices__015___015K]).reshape((1, 1, 2))

# op _015M_decompose_eval
# LANG: _015H --> _015N, _015U, _0160
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01929__015N = ((v01928__015H.flatten())[src_indices__015N__015M]).reshape((1, 1, 2))
v01930__015U = ((v01928__015H.flatten())[src_indices__015U__015M]).reshape((1, 1, 2))
v01931__0160 = ((v01928__015H.flatten())[src_indices__0160__015M]).reshape((1, 1, 2))

# op _01Q9_power_combination_eval
# LANG: _01PX, _01Q8 --> _01Qa
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03165__01Qa = (v03159__01PX**1)*(v03167__01Q8**1)
v03165__01Qa = (v03165__01Qa*_01Q9_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qx_power_combination_eval
# LANG: _01Qc, _01Qw --> asdf
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03120_asdf = (v03112__01Qc**1)*(v03141__01Qw**1)
v03120_asdf = (v03120_asdf*_01Qx_coeff).reshape((1, 2, 3, 3, 11))

# op _01R6_power_combination_eval
# LANG: _01QU, _01R5 --> _01R7
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03182__01R7 = (v03178__01QU**1)*(v03184__01R5**1)
v03182__01R7 = (v03182__01R7*_01R6_coeff).reshape((1, 2, 3, 3, 11))

# op _01Ru_power_combination_eval
# LANG: _01R9, _01Rt --> _01Rv
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03197__01Rv = (v03193__01R9**1)*(v03201__01Rt**1)
v03197__01Rv = (v03197__01Rv*_01Ru_coeff).reshape((1, 2, 3, 3, 11))

# op _01Sf_power_combination_eval
# LANG: rotor_1_disk_origin --> origin
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((3,))
v03227_origin = (v012_rotor_1_disk_origin**1)
v03227_origin = (v03227_origin*_01Sf_coeff).reshape((3,))
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((1, 3))

# op _01Si_power_combination_eval
# LANG: rotor_1_disk_in_plane_1 --> _01Sj
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((3,))
v03228__01Sj = (v08_rotor_1_disk_in_plane_1**1)
v03228__01Sj = (v03228__01Sj*_01Si_coeff).reshape((3,))
v08_rotor_1_disk_in_plane_1 = v08_rotor_1_disk_in_plane_1.reshape((1, 3))

# op _01Sl_power_combination_eval
# LANG: rotor_1_disk_in_plane_2 --> _01Sm
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((3,))
v03247__01Sm = (v010_rotor_1_disk_in_plane_2**1)
v03247__01Sm = (v03247__01Sm*_01Sl_coeff).reshape((3,))
v010_rotor_1_disk_in_plane_2 = v010_rotor_1_disk_in_plane_2.reshape((1, 3))

# op _01UA_decompose_eval
# LANG: _01Uv --> _01UB, _01UI, _01UP
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03303__01UB = ((v03302__01Uv.flatten())[src_indices__01UB__01UA]).reshape((1, 1, 2))
v03304__01UI = ((v03302__01Uv.flatten())[src_indices__01UI__01UA]).reshape((1, 1, 2))
v03305__01UP = ((v03302__01Uv.flatten())[src_indices__01UP__01UA]).reshape((1, 1, 2))

# op _01Ur expand_array_eval
# LANG: aircraft_location --> _01Us
# SHAPES: (3, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03291__01Us = np.einsum('bc,a->abc', v03290_aircraft_location.reshape((3, 2)) ,np.ones((1,))).reshape((1, 3, 2))

# op _01Uy_decompose_eval
# LANG: _01Up --> _01Uz, _01UH, _01UO
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03297__01Uz = ((v03296__01Up.flatten())[src_indices__01Uz__01Uy]).reshape((1, 1, 2))
v03298__01UH = ((v03296__01Up.flatten())[src_indices__01UH__01Uy]).reshape((1, 1, 2))
v03299__01UO = ((v03296__01Up.flatten())[src_indices__01UO__01Uy]).reshape((1, 1, 2))

# op _026b_power_combination_eval
# LANG: _025Z, _026a --> _026c
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03679__026c = (v03673__025Z**1)*(v03681__026a**1)
v03679__026c = (v03679__026c*_026b_coeff).reshape((1, 2, 3, 3, 11))

# op _026z_power_combination_eval
# LANG: _026e, _026y --> asdf
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03634_asdf = (v03626__026e**1)*(v03655__026y**1)
v03634_asdf = (v03634_asdf*_026z_coeff).reshape((1, 2, 3, 3, 11))

# op _0278_power_combination_eval
# LANG: _026W, _0277 --> _0279
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03696__0279 = (v03692__026W**1)*(v03698__0277**1)
v03696__0279 = (v03696__0279*_0278_coeff).reshape((1, 2, 3, 3, 11))

# op _027w_power_combination_eval
# LANG: _027b, _027v --> _027x
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03711__027x = (v03707__027b**1)*(v03715__027v**1)
v03711__027x = (v03711__027x*_027w_coeff).reshape((1, 2, 3, 3, 11))

# op _028h_power_combination_eval
# LANG: rotor_2_disk_origin --> origin
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((3,))
v03741_origin = (v022_rotor_2_disk_origin**1)
v03741_origin = (v03741_origin*_028h_coeff).reshape((3,))
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((1, 3))

# op _028k_power_combination_eval
# LANG: rotor_2_disk_in_plane_1 --> _028l
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((3,))
v03742__028l = (v018_rotor_2_disk_in_plane_1**1)
v03742__028l = (v03742__028l*_028k_coeff).reshape((3,))
v018_rotor_2_disk_in_plane_1 = v018_rotor_2_disk_in_plane_1.reshape((1, 3))

# op _028n_power_combination_eval
# LANG: rotor_2_disk_in_plane_2 --> _028o
# SHAPES: (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((3,))
v03761__028o = (v020_rotor_2_disk_in_plane_2**1)
v03761__028o = (v03761__028o*_028n_coeff).reshape((3,))
v020_rotor_2_disk_in_plane_2 = v020_rotor_2_disk_in_plane_2.reshape((1, 3))

# op _02aA_decompose_eval
# LANG: _02ar --> _02aB, _02aJ, _02aQ
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03811__02aB = ((v03810__02ar.flatten())[src_indices__02aB__02aA]).reshape((1, 1, 2))
v03812__02aJ = ((v03810__02ar.flatten())[src_indices__02aJ__02aA]).reshape((1, 1, 2))
v03813__02aQ = ((v03810__02ar.flatten())[src_indices__02aQ__02aA]).reshape((1, 1, 2))

# op _02aC_decompose_eval
# LANG: _02ax --> _02aD, _02aK, _02aR
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03817__02aD = ((v03816__02ax.flatten())[src_indices__02aD__02aC]).reshape((1, 1, 2))
v03818__02aK = ((v03816__02ax.flatten())[src_indices__02aK__02aC]).reshape((1, 1, 2))
v03819__02aR = ((v03816__02ax.flatten())[src_indices__02aR__02aC]).reshape((1, 1, 2))

# op _02at expand_array_eval
# LANG: aircraft_location --> _02au
# SHAPES: (3, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03805__02au = np.einsum('bc,a->abc', v03804_aircraft_location.reshape((3, 2)) ,np.ones((1,))).reshape((1, 3, 2))

# op _00IN_power_combination_eval
# LANG: _00IK, _00IM --> _00IO
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01181__00IO = (v01157__00IK**1)*(v01189__00IM**1)
v01181__00IO = (v01181__00IO*_00IN_coeff).reshape((1, 2, 3, 40, 11))

# op _00Jg_power_combination_eval
# LANG: _00Jd, _00Jf --> _00Jh
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01211__00Jh = (v01192__00Jd**1)*(v01212__00Jf**1)
v01211__00Jh = (v01211__00Jh*_00Jg_coeff).reshape((1, 2, 3, 40, 11))

# op _00Lw cross_product_eval
# LANG: _00KV, _00KY --> _00Lx
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01279__00Lx = np.cross(v01278__00KY, v01259__00KV, axisa = 0, axisb = 0, axisc = 0)

# op _00N7_decompose_eval
# LANG: _00N3 --> _00N8, _00Nh, _00No
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01322__00N8 = ((v01321__00N3.flatten())[src_indices__00N8__00N7]).reshape((1, 1, 2))
v01323__00Nh = ((v01321__00N3.flatten())[src_indices__00Nh__00N7]).reshape((1, 1, 2))
v01324__00No = ((v01321__00N3.flatten())[src_indices__00No__00N7]).reshape((1, 1, 2))

# op _00NC expand_array_eval
# LANG: origin --> _00ND
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01344__00ND = np.einsum('b,ac->abc', v01258_origin.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _00Nd_power_combination_eval
# LANG: _00Na, _00Nc --> _00Ne
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01330__00Ne = (v01327__00Na**1)*(v01333__00Nc**1)
v01330__00Ne = (v01330__00Ne*_00Nd_coeff).reshape((1, 1, 2))

# op _00Nk_power_combination_eval
# LANG: _00Ni, _00Nj --> _00Nl
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01337__00Nl = (v01328__00Ni**1)*(v01334__00Nj**1)
v01337__00Nl = (v01337__00Nl*_00Nk_coeff).reshape((1, 1, 2))

# op _00bJ_power_combination_eval
# LANG: _angular_speed --> _00bK
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0439__00bK = (v0213__angular_speed**1)
v0439__00bK = (v0439__00bK*_00bJ_coeff).reshape((1, 40, 30))

# op _00qM_power_combination_eval
# LANG: _angular_speed --> _00qN
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0812__00qN = (v0586__angular_speed**1)
v0812__00qN = (v0812__00qN*_00qM_coeff).reshape((1, 40, 30))

# op _011R_power_combination_eval
# LANG: _011O, _011Q --> _011S
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01807__011S = (v01788__011O**1)*(v01808__011Q**1)
v01807__011S = (v01807__011S*_011R_coeff).reshape((1, 2, 3, 40, 11))

# op _011n_power_combination_eval
# LANG: _011k, _011m --> _011o
# SHAPES: (1, 2, 3, 40, 11), (1, 2, 3, 40, 11) --> (1, 2, 3, 40, 11)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01777__011o = (v01753__011k**1)*(v01785__011m**1)
v01777__011o = (v01777__011o*_011n_coeff).reshape((1, 2, 3, 40, 11))

# op _0146 cross_product_eval
# LANG: _013v, _013y --> _0147
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01875__0147 = np.cross(v01874__013y, v01855__013v, axisa = 0, axisb = 0, axisc = 0)

# op _015I_decompose_eval
# LANG: _015E --> _015J, _015S, _015Z
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01918__015J = ((v01917__015E.flatten())[src_indices__015J__015I]).reshape((1, 1, 2))
v01919__015S = ((v01917__015E.flatten())[src_indices__015S__015I]).reshape((1, 1, 2))
v01920__015Z = ((v01917__015E.flatten())[src_indices__015Z__015I]).reshape((1, 1, 2))

# op _015O_power_combination_eval
# LANG: _015L, _015N --> _015P
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01926__015P = (v01923__015L**1)*(v01929__015N**1)
v01926__015P = (v01926__015P*_015O_coeff).reshape((1, 1, 2))

# op _015V_power_combination_eval
# LANG: _015T, _015U --> _015W
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01933__015W = (v01924__015T**1)*(v01930__015U**1)
v01933__015W = (v01933__015W*_015V_coeff).reshape((1, 1, 2))

# op _016c expand_array_eval
# LANG: origin --> _016d
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01940__016d = np.einsum('b,ac->abc', v01854_origin.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _01AJ_power_combination_eval
# LANG: _angular_speed --> _01AK
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02862__01AK = (v02636__angular_speed**1)
v02862__01AK = (v02862__01AK*_01AJ_coeff).reshape((1, 40, 30))

# op _01QB_power_combination_eval
# LANG: asdf, term_2_coeff_A --> _01QC
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03174__01QC = (v03173_term_2_coeff_A**1)*(v03120_asdf**1)
v03174__01QC = (v03174__01QC*_01QB_coeff).reshape((1, 2, 3, 3, 11))

# op _01Qz_power_combination_eval
# LANG: term_1_coeff_A, _01Qa --> _01QA
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03150__01QA = (v03149_term_1_coeff_A**1)*(v03165__01Qa**1)
v03150__01QA = (v03150__01QA*_01Qz_coeff).reshape((1, 2, 3, 3, 11))

# op _01Rw_power_combination_eval
# LANG: term_1_coeff_B, _01R7 --> _01Rx
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03177__01Rx = (v03176_term_1_coeff_B**1)*(v03182__01R7**1)
v03177__01Rx = (v03177__01Rx*_01Rw_coeff).reshape((1, 2, 3, 3, 11))

# op _01Ry_power_combination_eval
# LANG: term_2_coeff_B, _01Rv --> _01Rz
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03192__01Rz = (v03191_term_2_coeff_B**1)*(v03197__01Rv**1)
v03192__01Rz = (v03192__01Rz*_01Ry_coeff).reshape((1, 2, 3, 3, 11))

# op _01SV cross_product_eval
# LANG: _01Sj, _01Sm --> _01SW
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03248__01SW = np.cross(v03247__01Sm, v03228__01Sj, axisa = 0, axisb = 0, axisc = 0)

# op _01UC_power_combination_eval
# LANG: _01Uz, _01UB --> _01UD
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03300__01UD = (v03297__01Uz**1)*(v03303__01UB**1)
v03300__01UD = (v03300__01UD*_01UC_coeff).reshape((1, 1, 2))

# op _01UJ_power_combination_eval
# LANG: _01UH, _01UI --> _01UK
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03307__01UK = (v03298__01UH**1)*(v03304__01UI**1)
v03307__01UK = (v03307__01UK*_01UJ_coeff).reshape((1, 1, 2))

# op _01Uw_decompose_eval
# LANG: _01Us --> _01Ux, _01UG, _01UN
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03292__01Ux = ((v03291__01Us.flatten())[src_indices__01Ux__01Uw]).reshape((1, 1, 2))
v03293__01UG = ((v03291__01Us.flatten())[src_indices__01UG__01Uw]).reshape((1, 1, 2))
v03294__01UN = ((v03291__01Us.flatten())[src_indices__01UN__01Uw]).reshape((1, 1, 2))

# op _01V0 expand_array_eval
# LANG: origin --> _01V1
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03314__01V1 = np.einsum('b,ac->abc', v03227_origin.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _01lG_power_combination_eval
# LANG: _angular_speed --> _01lH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02489__01lH = (v02263__angular_speed**1)
v02489__01lH = (v02489__01lH*_01lG_coeff).reshape((1, 40, 30))

# op _026B_power_combination_eval
# LANG: term_1_coeff_A, _026c --> _026C
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03664__026C = (v03663_term_1_coeff_A**1)*(v03679__026c**1)
v03664__026C = (v03664__026C*_026B_coeff).reshape((1, 2, 3, 3, 11))

# op _026D_power_combination_eval
# LANG: asdf, term_2_coeff_A --> _026E
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03688__026E = (v03687_term_2_coeff_A**1)*(v03634_asdf**1)
v03688__026E = (v03688__026E*_026D_coeff).reshape((1, 2, 3, 3, 11))

# op _027A_power_combination_eval
# LANG: term_2_coeff_B, _027x --> _027B
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03706__027B = (v03705_term_2_coeff_B**1)*(v03711__027x**1)
v03706__027B = (v03706__027B*_027A_coeff).reshape((1, 2, 3, 3, 11))

# op _027y_power_combination_eval
# LANG: term_1_coeff_B, _0279 --> _027z
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03691__027z = (v03690_term_1_coeff_B**1)*(v03696__0279**1)
v03691__027z = (v03691__027z*_027y_coeff).reshape((1, 2, 3, 3, 11))

# op _028X cross_product_eval
# LANG: _028l, _028o --> _028Y
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03762__028Y = np.cross(v03761__028o, v03742__028l, axisa = 0, axisb = 0, axisc = 0)

# op _02aE_power_combination_eval
# LANG: _02aB, _02aD --> _02aF
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03814__02aF = (v03811__02aB**1)*(v03817__02aD**1)
v03814__02aF = (v03814__02aF*_02aE_coeff).reshape((1, 1, 2))

# op _02aL_power_combination_eval
# LANG: _02aJ, _02aK --> _02aM
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03821__02aM = (v03812__02aJ**1)*(v03818__02aK**1)
v03821__02aM = (v03821__02aM*_02aL_coeff).reshape((1, 1, 2))

# op _02ay_decompose_eval
# LANG: _02au --> _02az, _02aI, _02aP
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03806__02az = ((v03805__02au.flatten())[src_indices__02az__02ay]).reshape((1, 1, 2))
v03807__02aI = ((v03805__02au.flatten())[src_indices__02aI__02ay]).reshape((1, 1, 2))
v03808__02aP = ((v03805__02au.flatten())[src_indices__02aP__02ay]).reshape((1, 1, 2))

# op _02b2 expand_array_eval
# LANG: origin --> _02b3
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03828__02b3 = np.einsum('b,ac->abc', v03741_origin.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _00Ji_single_tensor_sum_with_axis_eval
# LANG: _00IO --> An
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01190_An = np.sum(v01181__00IO, axis = (4,)).reshape((1, 2, 3, 40))

# op _00Jk_single_tensor_sum_with_axis_eval
# LANG: _00Jh --> Bn
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01213_Bn = np.sum(v01211__00Jh, axis = (4,)).reshape((1, 2, 3, 40))

# op _00KZ pnorm_eval
# LANG: _00KV --> _00K_
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01260__00K_ = np.linalg.norm(v01259__00KV.flatten(), ord=2)

# op _00L3 pnorm_axis_eval
# LANG: rotor_1_blade_chord_length --> _00L4
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01262__00L4 = np.sum(v014_rotor_1_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _00Lb_linear_combination_eval
# LANG: theta --> _00Lc
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01266__00Lc = _00Lb_constant+1*v01265_theta

# op _00Ld_linear_combination_eval
# LANG: theta --> _00Le
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01268__00Le = _00Ld_constant+1*v01265_theta

# op _00Lk_sin_eval
# LANG: theta --> _00Ll
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01271__00Ll = np.sin(v01265_theta)

# op _00Lo_sin_eval
# LANG: theta --> _00Lp
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01273__00Lp = np.sin(v01265_theta)

# op _00Ls_cos_eval
# LANG: theta --> _00Lt
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01275__00Lt = np.cos(v01265_theta)

# op _00Ly pnorm_eval
# LANG: _00Lx --> _00Lz
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01281__00Lz = np.linalg.norm(v01279__00Lx.flatten(), ord=2)

# op _00NE_decompose_eval
# LANG: _00ND --> _00NF, _00NK, _00NP
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01345__00NF = ((v01344__00ND.flatten())[src_indices__00NF__00NE]).reshape((1, 1, 2))
v01346__00NK = ((v01344__00ND.flatten())[src_indices__00NK__00NE]).reshape((1, 1, 2))
v01347__00NP = ((v01344__00ND.flatten())[src_indices__00NP__00NE]).reshape((1, 1, 2))

# op _00Nf_linear_combination_eval
# LANG: _00N8, _00Ne --> aircraft_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01325_aircraft_x_pos = _00Nf_constant+1*v01322__00N8+1*v01330__00Ne

# op _00Nm_linear_combination_eval
# LANG: _00Nh, _00Nl --> aircraft_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01336_aircraft_y_pos = _00Nm_constant+1*v01323__00Nh+1*v01337__00Nl

# op _00Nr_power_combination_eval
# LANG: _00Np, _00Nq --> _00Ns
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01339__00Ns = (v01329__00Np**1)*(v01335__00Nq**1)
v01339__00Ns = (v01339__00Ns*_00Nr_coeff).reshape((1, 1, 2))

# op _00bL_power_combination_eval
# LANG: _00bK --> _00bM
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0440__00bM = (v0439__00bK**1)
v0440__00bM = (v0440__00bM*_00bL_coeff).reshape((1, 40, 30))

# op _00qO_power_combination_eval
# LANG: _00qN --> _00qP
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0813__00qP = (v0812__00qN**1)
v0813__00qP = (v0813__00qP*_00qO_coeff).reshape((1, 40, 30))

# op _011T_single_tensor_sum_with_axis_eval
# LANG: _011o --> An
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01786_An = np.sum(v01777__011o, axis = (4,)).reshape((1, 2, 3, 40))

# op _011V_single_tensor_sum_with_axis_eval
# LANG: _011S --> Bn
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 40)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01809_Bn = np.sum(v01807__011S, axis = (4,)).reshape((1, 2, 3, 40))

# op _013E pnorm_axis_eval
# LANG: rotor_2_blade_chord_length --> _013F
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01858__013F = np.sum(v024_rotor_2_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _013M_linear_combination_eval
# LANG: theta --> _013N
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01862__013N = _013M_constant+1*v01861_theta

# op _013O_linear_combination_eval
# LANG: theta --> _013P
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01864__013P = _013O_constant+1*v01861_theta

# op _013V_sin_eval
# LANG: theta --> _013W
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01867__013W = np.sin(v01861_theta)

# op _013Z_sin_eval
# LANG: theta --> _013_
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01869__013_ = np.sin(v01861_theta)

# op _013z pnorm_eval
# LANG: _013v --> _013A
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01856__013A = np.linalg.norm(v01855__013v.flatten(), ord=2)

# op _0142_cos_eval
# LANG: theta --> _0143
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01871__0143 = np.cos(v01861_theta)

# op _0148 pnorm_eval
# LANG: _0147 --> _0149
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01877__0149 = np.linalg.norm(v01875__0147.flatten(), ord=2)

# op _015Q_linear_combination_eval
# LANG: _015J, _015P --> aircraft_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01921_aircraft_x_pos = _015Q_constant+1*v01918__015J+1*v01926__015P

# op _015X_linear_combination_eval
# LANG: _015S, _015W --> aircraft_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01932_aircraft_y_pos = _015X_constant+1*v01919__015S+1*v01933__015W

# op _0161_power_combination_eval
# LANG: _015_, _0160 --> _0162
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01935__0162 = (v01925__015_**1)*(v01931__0160**1)
v01935__0162 = (v01935__0162*_0161_coeff).reshape((1, 1, 2))

# op _016e_decompose_eval
# LANG: _016d --> _016f, _016k, _016p
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01941__016f = ((v01940__016d.flatten())[src_indices__016f__016e]).reshape((1, 1, 2))
v01942__016k = ((v01940__016d.flatten())[src_indices__016k__016e]).reshape((1, 1, 2))
v01943__016p = ((v01940__016d.flatten())[src_indices__016p__016e]).reshape((1, 1, 2))

# op _01AL_power_combination_eval
# LANG: _01AK --> _01AM
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02863__01AM = (v02862__01AK**1)
v02863__01AM = (v02863__01AM*_01AL_coeff).reshape((1, 40, 30))

# op _01QD_linear_combination_eval
# LANG: _01QA, _01QC --> _01QE
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03172__01QE = _01QD_constant+1*v03150__01QA+1*v03174__01QC

# op _01RA_linear_combination_eval
# LANG: _01Rx, _01Rz --> _01RB
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03190__01RB = _01RA_constant+1*v03177__01Rx+1*v03192__01Rz

# op _01SA_linear_combination_eval
# LANG: theta --> _01SB
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03235__01SB = _01SA_constant+1*v03234_theta

# op _01SC_linear_combination_eval
# LANG: theta --> _01SD
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03237__01SD = _01SC_constant+1*v03234_theta

# op _01SJ_sin_eval
# LANG: theta --> _01SK
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03240__01SK = np.sin(v03234_theta)

# op _01SN_sin_eval
# LANG: theta --> _01SO
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03242__01SO = np.sin(v03234_theta)

# op _01SR_cos_eval
# LANG: theta --> _01SS
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03244__01SS = np.cos(v03234_theta)

# op _01SX pnorm_eval
# LANG: _01SW --> _01SY
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03250__01SY = np.linalg.norm(v03248__01SW.flatten(), ord=2)

# op _01Sn pnorm_eval
# LANG: _01Sj --> _01So
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03229__01So = np.linalg.norm(v03228__01Sj.flatten(), ord=2)

# op _01Ss pnorm_axis_eval
# LANG: rotor_1_blade_chord_length --> _01St
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03231__01St = np.sum(v014_rotor_1_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _01UE_linear_combination_eval
# LANG: _01Ux, _01UD --> aircraft_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03295_aircraft_x_pos = _01UE_constant+1*v03292__01Ux+1*v03300__01UD

# op _01UL_linear_combination_eval
# LANG: _01UG, _01UK --> aircraft_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03306_aircraft_y_pos = _01UL_constant+1*v03293__01UG+1*v03307__01UK

# op _01UQ_power_combination_eval
# LANG: _01UO, _01UP --> _01UR
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03309__01UR = (v03299__01UO**1)*(v03305__01UP**1)
v03309__01UR = (v03309__01UR*_01UQ_coeff).reshape((1, 1, 2))

# op _01V2_decompose_eval
# LANG: _01V1 --> _01V3, _01V8, _01Vd
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03315__01V3 = ((v03314__01V1.flatten())[src_indices__01V3__01V2]).reshape((1, 1, 2))
v03316__01V8 = ((v03314__01V1.flatten())[src_indices__01V8__01V2]).reshape((1, 1, 2))
v03317__01Vd = ((v03314__01V1.flatten())[src_indices__01Vd__01V2]).reshape((1, 1, 2))

# op _01lI_power_combination_eval
# LANG: _01lH --> _01lJ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02490__01lJ = (v02489__01lH**1)
v02490__01lJ = (v02490__01lJ*_01lI_coeff).reshape((1, 40, 30))

# op _026F_linear_combination_eval
# LANG: _026C, _026E --> _026G
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03686__026G = _026F_constant+1*v03664__026C+1*v03688__026E

# op _027C_linear_combination_eval
# LANG: _027z, _027B --> _027D
# SHAPES: (1, 2, 3, 3, 11), (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03704__027D = _027C_constant+1*v03691__027z+1*v03706__027B

# op _028C_linear_combination_eval
# LANG: theta --> _028D
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03749__028D = _028C_constant+1*v03748_theta

# op _028E_linear_combination_eval
# LANG: theta --> _028F
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03751__028F = _028E_constant+1*v03748_theta

# op _028L_sin_eval
# LANG: theta --> _028M
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03754__028M = np.sin(v03748_theta)

# op _028P_sin_eval
# LANG: theta --> _028Q
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03756__028Q = np.sin(v03748_theta)

# op _028T_cos_eval
# LANG: theta --> _028U
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03758__028U = np.cos(v03748_theta)

# op _028Z pnorm_eval
# LANG: _028Y --> _028_
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03764__028_ = np.linalg.norm(v03762__028Y.flatten(), ord=2)

# op _028p pnorm_eval
# LANG: _028l --> _028q
# SHAPES: (3,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03743__028q = np.linalg.norm(v03742__028l.flatten(), ord=2)

# op _028u pnorm_axis_eval
# LANG: rotor_2_blade_chord_length --> _028v
# SHAPES: (40, 3) --> (40,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03745__028v = np.sum(v024_rotor_2_blade_chord_length**2,axis=(1,))**(1 / 2)

# op _02aG_linear_combination_eval
# LANG: _02az, _02aF --> aircraft_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03809_aircraft_x_pos = _02aG_constant+1*v03806__02az+1*v03814__02aF

# op _02aN_linear_combination_eval
# LANG: _02aI, _02aM --> aircraft_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03820_aircraft_y_pos = _02aN_constant+1*v03807__02aI+1*v03821__02aM

# op _02aS_power_combination_eval
# LANG: _02aQ, _02aR --> _02aT
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03823__02aT = (v03813__02aQ**1)*(v03819__02aR**1)
v03823__02aT = (v03823__02aT*_02aS_coeff).reshape((1, 1, 2))

# op _02b4_decompose_eval
# LANG: _02b3 --> _02b5, _02ba, _02bf
# SHAPES: (1, 3, 2) --> (1, 1, 2), (1, 1, 2), (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03829__02b5 = ((v03828__02b3.flatten())[src_indices__02b5__02b4]).reshape((1, 1, 2))
v03830__02ba = ((v03828__02b3.flatten())[src_indices__02ba__02b4]).reshape((1, 1, 2))
v03831__02bf = ((v03828__02b3.flatten())[src_indices__02bf__02b4]).reshape((1, 1, 2))

# op _00C5 reshape_eval
# LANG: rel_obs_dist --> _00C6
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01220__00C6 = v0970_rel_obs_dist.reshape((1, 2))

# op _00Jq_decompose_eval
# LANG: n_var --> _00Jr
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01214__00Jr = ((v01171_n_var.flatten())[src_indices__00Jr__00Jq]).reshape((1, 2, 3, 1, 1))

# op _00KC_decompose_eval
# LANG: Bn --> _00KD, _00KE
# SHAPES: (1, 2, 3, 40) --> (1, 2, 3, 39), (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01251__00KD = ((v01213_Bn.flatten())[src_indices__00KD__00KC]).reshape((1, 2, 3, 39))
v01252__00KE = ((v01213_Bn.flatten())[src_indices__00KE__00KC]).reshape((1, 2, 3, 39))

# op _00Kn_decompose_eval
# LANG: An --> _00Ko, _00Kp
# SHAPES: (1, 2, 3, 40) --> (1, 2, 3, 39), (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01244__00Ko = ((v01190_An.flatten())[src_indices__00Ko__00Kn]).reshape((1, 2, 3, 39))
v01245__00Kp = ((v01190_An.flatten())[src_indices__00Kp__00Kn]).reshape((1, 2, 3, 39))

# op _00L0_power_combination_eval
# LANG: _00K_ --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01261_propeller_radius = (v01260__00K_**1)
v01261_propeller_radius = (v01261_propeller_radius*_00L0_coeff).reshape((1,))

# op _00L5 reshape_eval
# LANG: _00L4 --> _00L6
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01263__00L6 = v01262__00L4.reshape((40, 1))

# op _00LA expand_scalar_eval
# LANG: _00Lz --> _00LB
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01282__00LB = np.empty((3,))
v01282__00LB.fill(v01281__00Lz.item())

# op _00Lf_power_combination_eval
# LANG: _00Lc, _00Le --> _00Lg
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01267__00Lg = (v01266__00Lc**1)*(v01268__00Le**-1)
v01267__00Lg = (v01267__00Lg*_00Lf_coeff).reshape((1, 1))

# op _00Li_cos_eval
# LANG: theta --> _00Lj
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01270__00Lj = np.cos(v01265_theta)

# op _00Lm_power_combination_eval
# LANG: _00Ll --> _00Ln
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01272__00Ln = (v01271__00Ll**1)
v01272__00Ln = (v01272__00Ln*_00Lm_coeff).reshape((1, 1))

# op _00Lq_power_combination_eval
# LANG: _00Lp --> _00Lr
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01274__00Lr = (v01273__00Lp**1)
v01274__00Lr = (v01274__00Lr*_00Lq_coeff).reshape((1, 1))

# op _00Lu_power_combination_eval
# LANG: _00Lt --> _00Lv
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01276__00Lv = (v01275__00Lt**1)
v01276__00Lv = (v01276__00Lv*_00Lu_coeff).reshape((1, 1))

# op _00NG_linear_combination_eval
# LANG: aircraft_x_pos, _00NF --> _00NH
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01343__00NH = _00NG_constant+1*v01325_aircraft_x_pos+1*v01345__00NF

# op _00NL_linear_combination_eval
# LANG: aircraft_y_pos, _00NK --> _00NM
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01351__00NM = _00NL_constant+1*v01336_aircraft_y_pos+1*v01346__00NK

# op _00Nt_linear_combination_eval
# LANG: _00No, _00Ns --> aircraft_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01338_aircraft_z_pos = _00Nt_constant+1*v01324__00No+1*v01339__00Ns

# op _00Nv expand_array_eval
# LANG: init_obs_x_loc --> _00Nw
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01341__00Nw = np.einsum('c,ab->abc', v01340_init_obs_x_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00Nx expand_array_eval
# LANG: init_obs_y_loc --> _00Ny
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01349__00Ny = np.einsum('c,ab->abc', v01348_init_obs_y_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00VG reshape_eval
# LANG: rel_obs_dist --> _00VH
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01816__00VH = v01566_rel_obs_dist.reshape((1, 2))

# op _00h3_single_tensor_sum_with_axis_eval
# LANG: _00bM --> _00h4
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0441__00h4 = np.sum(v0440__00bM, axis = (1, 2)).reshape((1,))

# op _00hd_single_tensor_sum_with_axis_eval
# LANG: _rotor_radius --> _00he
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0446__00he = np.sum(v0201__rotor_radius, axis = (1, 2)).reshape((1,))

# op _00w6_single_tensor_sum_with_axis_eval
# LANG: _00qP --> _00w7
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0814__00w7 = np.sum(v0813__00qP, axis = (1, 2)).reshape((1,))

# op _00wg_single_tensor_sum_with_axis_eval
# LANG: _rotor_radius --> _00wh
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0819__00wh = np.sum(v0574__rotor_radius, axis = (1, 2)).reshape((1,))

# op _0120_decompose_eval
# LANG: n_var --> _0121
# SHAPES: (1, 2, 3, 40, 11) --> (1, 2, 3, 1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01810__0121 = ((v01767_n_var.flatten())[src_indices__0121__0120]).reshape((1, 2, 3, 1, 1))

# op _012Y_decompose_eval
# LANG: An --> _012Z, _012_
# SHAPES: (1, 2, 3, 40) --> (1, 2, 3, 39), (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01840__012Z = ((v01786_An.flatten())[src_indices__012Z__012Y]).reshape((1, 2, 3, 39))
v01841__012_ = ((v01786_An.flatten())[src_indices__012___012Y]).reshape((1, 2, 3, 39))

# op _013B_power_combination_eval
# LANG: _013A --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01857_propeller_radius = (v01856__013A**1)
v01857_propeller_radius = (v01857_propeller_radius*_013B_coeff).reshape((1,))

# op _013G reshape_eval
# LANG: _013F --> _013H
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01859__013H = v01858__013F.reshape((40, 1))

# op _013Q_power_combination_eval
# LANG: _013N, _013P --> _013R
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01863__013R = (v01862__013N**1)*(v01864__013P**-1)
v01863__013R = (v01863__013R*_013Q_coeff).reshape((1, 1))

# op _013T_cos_eval
# LANG: theta --> _013U
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01866__013U = np.cos(v01861_theta)

# op _013X_power_combination_eval
# LANG: _013W --> _013Y
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01868__013Y = (v01867__013W**1)
v01868__013Y = (v01868__013Y*_013X_coeff).reshape((1, 1))

# op _013c_decompose_eval
# LANG: Bn --> _013d, _013e
# SHAPES: (1, 2, 3, 40) --> (1, 2, 3, 39), (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01847__013d = ((v01809_Bn.flatten())[src_indices__013d__013c]).reshape((1, 2, 3, 39))
v01848__013e = ((v01809_Bn.flatten())[src_indices__013e__013c]).reshape((1, 2, 3, 39))

# op _0140_power_combination_eval
# LANG: _013_ --> _0141
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01870__0141 = (v01869__013_**1)
v01870__0141 = (v01870__0141*_0140_coeff).reshape((1, 1))

# op _0144_power_combination_eval
# LANG: _0143 --> _0145
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01872__0145 = (v01871__0143**1)
v01872__0145 = (v01872__0145*_0144_coeff).reshape((1, 1))

# op _014a expand_scalar_eval
# LANG: _0149 --> _014b
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01878__014b = np.empty((3,))
v01878__014b.fill(v01877__0149.item())

# op _0163_linear_combination_eval
# LANG: _015Z, _0162 --> aircraft_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01934_aircraft_z_pos = _0163_constant+1*v01920__015Z+1*v01935__0162

# op _0165 expand_array_eval
# LANG: init_obs_x_loc --> _0166
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01937__0166 = np.einsum('c,ab->abc', v01936_init_obs_x_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _0167 expand_array_eval
# LANG: init_obs_y_loc --> _0168
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01945__0168 = np.einsum('c,ab->abc', v01944_init_obs_y_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _016g_linear_combination_eval
# LANG: aircraft_x_pos, _016f --> _016h
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01939__016h = _016g_constant+1*v01921_aircraft_x_pos+1*v01941__016f

# op _016l_linear_combination_eval
# LANG: aircraft_y_pos, _016k --> _016m
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01947__016m = _016l_constant+1*v01932_aircraft_y_pos+1*v01942__016k

# op _01G3_single_tensor_sum_with_axis_eval
# LANG: _01AM --> _01G4
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02864__01G4 = np.sum(v02863__01AM, axis = (1, 2)).reshape((1,))

# op _01Gd_single_tensor_sum_with_axis_eval
# LANG: _rotor_radius --> _01Ge
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02869__01Ge = np.sum(v02624__rotor_radius, axis = (1, 2)).reshape((1,))

# op _01QF_power_combination_eval
# LANG: _01QE --> An
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03175_An = (v03172__01QE**1)
v03175_An = (v03175_An*_01QF_coeff).reshape((1, 2, 3, 3, 11))

# op _01RC_power_combination_eval
# LANG: _01RB --> Bn
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03208_Bn = (v03190__01RB**1)
v03208_Bn = (v03208_Bn*_01RC_coeff).reshape((1, 2, 3, 3, 11))

# op _01SE_power_combination_eval
# LANG: _01SB, _01SD --> _01SF
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03236__01SF = (v03235__01SB**1)*(v03237__01SD**-1)
v03236__01SF = (v03236__01SF*_01SE_coeff).reshape((1, 1))

# op _01SH_cos_eval
# LANG: theta --> _01SI
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03239__01SI = np.cos(v03234_theta)

# op _01SL_power_combination_eval
# LANG: _01SK --> _01SM
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03241__01SM = (v03240__01SK**1)
v03241__01SM = (v03241__01SM*_01SL_coeff).reshape((1, 1))

# op _01SP_power_combination_eval
# LANG: _01SO --> _01SQ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03243__01SQ = (v03242__01SO**1)
v03243__01SQ = (v03243__01SQ*_01SP_coeff).reshape((1, 1))

# op _01ST_power_combination_eval
# LANG: _01SS --> _01SU
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03245__01SU = (v03244__01SS**1)
v03245__01SU = (v03245__01SU*_01ST_coeff).reshape((1, 1))

# op _01SZ expand_scalar_eval
# LANG: _01SY --> _01S_
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03251__01S_ = np.empty((3,))
v03251__01S_.fill(v03250__01SY.item())

# op _01Sp_power_combination_eval
# LANG: _01So --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03230_propeller_radius = (v03229__01So**1)
v03230_propeller_radius = (v03230_propeller_radius*_01Sp_coeff).reshape((1,))

# op _01Su reshape_eval
# LANG: _01St --> _01Sv
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03232__01Sv = v03231__01St.reshape((40, 1))

# op _01US_linear_combination_eval
# LANG: _01UN, _01UR --> aircraft_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03308_aircraft_z_pos = _01US_constant+1*v03294__01UN+1*v03309__01UR

# op _01UU expand_array_eval
# LANG: init_obs_x_loc --> _01UV
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03311__01UV = np.einsum('c,ab->abc', v03310_init_obs_x_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _01UW expand_array_eval
# LANG: init_obs_y_loc --> _01UX
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03319__01UX = np.einsum('c,ab->abc', v03318_init_obs_y_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _01V4_linear_combination_eval
# LANG: aircraft_x_pos, _01V3 --> _01V5
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03313__01V5 = _01V4_constant+1*v03295_aircraft_x_pos+1*v03315__01V3

# op _01V9_linear_combination_eval
# LANG: aircraft_y_pos, _01V8 --> _01Va
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03321__01Va = _01V9_constant+1*v03306_aircraft_y_pos+1*v03316__01V8

# op _01r0_single_tensor_sum_with_axis_eval
# LANG: _01lJ --> _01r1
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02491__01r1 = np.sum(v02490__01lJ, axis = (1, 2)).reshape((1,))

# op _01ra_single_tensor_sum_with_axis_eval
# LANG: _rotor_radius --> _01rb
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02496__01rb = np.sum(v02251__rotor_radius, axis = (1, 2)).reshape((1,))

# op _026H_power_combination_eval
# LANG: _026G --> An
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03689_An = (v03686__026G**1)
v03689_An = (v03689_An*_026H_coeff).reshape((1, 2, 3, 3, 11))

# op _027E_power_combination_eval
# LANG: _027D --> Bn
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3, 11)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03722_Bn = (v03704__027D**1)
v03722_Bn = (v03722_Bn*_027E_coeff).reshape((1, 2, 3, 3, 11))

# op _028G_power_combination_eval
# LANG: _028D, _028F --> _028H
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03750__028H = (v03749__028D**1)*(v03751__028F**-1)
v03750__028H = (v03750__028H*_028G_coeff).reshape((1, 1))

# op _028J_cos_eval
# LANG: theta --> _028K
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03753__028K = np.cos(v03748_theta)

# op _028N_power_combination_eval
# LANG: _028M --> _028O
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03755__028O = (v03754__028M**1)
v03755__028O = (v03755__028O*_028N_coeff).reshape((1, 1))

# op _028R_power_combination_eval
# LANG: _028Q --> _028S
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03757__028S = (v03756__028Q**1)
v03757__028S = (v03757__028S*_028R_coeff).reshape((1, 1))

# op _028V_power_combination_eval
# LANG: _028U --> _028W
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03759__028W = (v03758__028U**1)
v03759__028W = (v03759__028W*_028V_coeff).reshape((1, 1))

# op _028r_power_combination_eval
# LANG: _028q --> propeller_radius
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03744_propeller_radius = (v03743__028q**1)
v03744_propeller_radius = (v03744_propeller_radius*_028r_coeff).reshape((1,))

# op _028w reshape_eval
# LANG: _028v --> _028x
# SHAPES: (40,) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03746__028x = v03745__028v.reshape((40, 1))

# op _0290 expand_scalar_eval
# LANG: _028_ --> _0291
# SHAPES: (1,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03765__0291 = np.empty((3,))
v03765__0291.fill(v03764__028_.item())

# op _02aU_linear_combination_eval
# LANG: _02aP, _02aT --> aircraft_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03822_aircraft_z_pos = _02aU_constant+1*v03808__02aP+1*v03823__02aT

# op _02aW expand_array_eval
# LANG: init_obs_x_loc --> _02aX
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03825__02aX = np.einsum('c,ab->abc', v03824_init_obs_x_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _02aY expand_array_eval
# LANG: init_obs_y_loc --> _02aZ
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03833__02aZ = np.einsum('c,ab->abc', v03832_init_obs_y_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _02b6_linear_combination_eval
# LANG: aircraft_x_pos, _02b5 --> _02b7
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03827__02b7 = _02b6_constant+1*v03809_aircraft_x_pos+1*v03829__02b5

# op _02bb_linear_combination_eval
# LANG: aircraft_y_pos, _02ba --> _02bc
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03835__02bc = _02bb_constant+1*v03820_aircraft_y_pos+1*v03830__02ba

# op _00Js reshape_eval
# LANG: _00Jr --> _00Jt
# SHAPES: (1, 2, 3, 1, 1) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01215__00Jt = v01214__00Jr.reshape((1, 2, 3))

# op _00Jw expand_array_eval
# LANG: _00C6 --> _00Jx
# SHAPES: (1, 2) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01221__00Jx = np.einsum('ab,c->abc', v01220__00C6.reshape((1, 2)) ,np.ones((3,))).reshape((1, 2, 3))

# op _00KF_linear_combination_eval
# LANG: _00KD, _00KE --> _00KG
# SHAPES: (1, 2, 3, 39), (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01253__00KG = _00KF_constant+1*v01251__00KD+1*v01252__00KE

# op _00KH expand_scalar_eval
# LANG: dr --> _00KI
# SHAPES: (1,) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01255__00KI = np.empty((1, 2, 3, 39))
v01255__00KI.fill(v0874_dr.item())

# op _00Kq_linear_combination_eval
# LANG: _00Ko, _00Kp --> _00Kr
# SHAPES: (1, 2, 3, 39), (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01246__00Kr = _00Kq_constant+1*v01244__00Ko+1*v01245__00Kp

# op _00Ks expand_scalar_eval
# LANG: dr --> _00Kt
# SHAPES: (1,) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01248__00Kt = np.empty((1, 2, 3, 39))
v01248__00Kt.fill(v0874_dr.item())

# op _00L7_power_combination_eval
# LANG: _00L6 --> chord_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01264_chord_profile = (v01263__00L6**1)
v01264_chord_profile = (v01264_chord_profile*_00L7_coeff).reshape((40, 1))

# op _00LC_power_combination_eval
# LANG: _00Lx, _00LB --> _00LD
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01280__00LD = (v01279__00Lx**1)*(v01282__00LB**-1)
v01280__00LD = (v01280__00LD*_00LC_coeff).reshape((3,))

# op _00LI_power_combination_eval
# LANG: propeller_radius --> _00LJ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01283__00LJ = (v01261_propeller_radius**1)
v01283__00LJ = (v01283__00LJ*_00LI_coeff).reshape((1,))

# op _00Lh_indexed_passthrough_eval
# LANG: _00Lg, _00Lj, _00Ln, _00Lr, _00Lv --> rot_mat
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01269_rot_mat__temp[i_v01267__00Lg__00Lh_indexed_passthrough_eval] = v01267__00Lg.flatten()
v01269_rot_mat = v01269_rot_mat__temp.copy()
v01269_rot_mat__temp[i_v01270__00Lj__00Lh_indexed_passthrough_eval] = v01270__00Lj.flatten()
v01269_rot_mat = v01269_rot_mat__temp.copy()
v01269_rot_mat__temp[i_v01272__00Ln__00Lh_indexed_passthrough_eval] = v01272__00Ln.flatten()
v01269_rot_mat = v01269_rot_mat__temp.copy()
v01269_rot_mat__temp[i_v01274__00Lr__00Lh_indexed_passthrough_eval] = v01274__00Lr.flatten()
v01269_rot_mat = v01269_rot_mat__temp.copy()
v01269_rot_mat__temp[i_v01276__00Lv__00Lh_indexed_passthrough_eval] = v01276__00Lv.flatten()
v01269_rot_mat = v01269_rot_mat__temp.copy()

# op _00NI_linear_combination_eval
# LANG: _00Nw, _00NH --> rel_obs_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01342_rel_obs_x_pos = _00NI_constant+1*v01341__00Nw+-1*v01343__00NH

# op _00NN_linear_combination_eval
# LANG: _00Ny, _00NM --> rel_obs_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01350_rel_obs_y_pos = _00NN_constant+1*v01349__00Ny+-1*v01351__00NM

# op _00NQ_linear_combination_eval
# LANG: aircraft_z_pos, _00NP --> _00NR
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01355__00NR = _00NQ_constant+1*v01338_aircraft_z_pos+1*v01347__00NP

# op _00Nz expand_array_eval
# LANG: init_obs_z_loc --> _00NA
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01353__00NA = np.einsum('c,ab->abc', v01352_init_obs_z_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _00g6_single_tensor_sum_with_axis_eval
# LANG: _local_thrust --> _00g7
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0340__00g7 = np.sum(v0325__local_thrust, axis = (1, 2)).reshape((1,))

# op _00h5_power_combination_eval
# LANG: _00h4 --> _00h6
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0442__00h6 = (v0441__00h4**1)
v0442__00h6 = (v0442__00h6*_00h5_coeff).reshape((1,))

# op _00hf_power_combination_eval
# LANG: _00he --> _00hg
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0447__00hg = (v0446__00he**1)
v0447__00hg = (v0447__00hg*_00hf_coeff).reshape((1,))

# op _00v9_single_tensor_sum_with_axis_eval
# LANG: _local_thrust --> _00va
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0713__00va = np.sum(v0698__local_thrust, axis = (1, 2)).reshape((1,))

# op _00w8_power_combination_eval
# LANG: _00w7 --> _00w9
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0815__00w9 = (v0814__00w7**1)
v0815__00w9 = (v0815__00w9*_00w8_coeff).reshape((1,))

# op _00wi_power_combination_eval
# LANG: _00wh --> _00wj
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0820__00wj = (v0819__00wh**1)
v0820__00wj = (v0820__00wj*_00wi_coeff).reshape((1,))

# op _0122 reshape_eval
# LANG: _0121 --> _0123
# SHAPES: (1, 2, 3, 1, 1) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01811__0123 = v01810__0121.reshape((1, 2, 3))

# op _0126 expand_array_eval
# LANG: _00VH --> _0127
# SHAPES: (1, 2) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01817__0127 = np.einsum('ab,c->abc', v01816__00VH.reshape((1, 2)) ,np.ones((3,))).reshape((1, 2, 3))

# op _0130_linear_combination_eval
# LANG: _012Z, _012_ --> _0131
# SHAPES: (1, 2, 3, 39), (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01842__0131 = _0130_constant+1*v01840__012Z+1*v01841__012_

# op _0132 expand_scalar_eval
# LANG: dr --> _0133
# SHAPES: (1,) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01844__0133 = np.empty((1, 2, 3, 39))
v01844__0133.fill(v01470_dr.item())

# op _013I_power_combination_eval
# LANG: _013H --> chord_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01860_chord_profile = (v01859__013H**1)
v01860_chord_profile = (v01860_chord_profile*_013I_coeff).reshape((40, 1))

# op _013S_indexed_passthrough_eval
# LANG: _013R, _013U, _013Y, _0141, _0145 --> rot_mat
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01865_rot_mat__temp[i_v01863__013R__013S_indexed_passthrough_eval] = v01863__013R.flatten()
v01865_rot_mat = v01865_rot_mat__temp.copy()
v01865_rot_mat__temp[i_v01866__013U__013S_indexed_passthrough_eval] = v01866__013U.flatten()
v01865_rot_mat = v01865_rot_mat__temp.copy()
v01865_rot_mat__temp[i_v01868__013Y__013S_indexed_passthrough_eval] = v01868__013Y.flatten()
v01865_rot_mat = v01865_rot_mat__temp.copy()
v01865_rot_mat__temp[i_v01870__0141__013S_indexed_passthrough_eval] = v01870__0141.flatten()
v01865_rot_mat = v01865_rot_mat__temp.copy()
v01865_rot_mat__temp[i_v01872__0145__013S_indexed_passthrough_eval] = v01872__0145.flatten()
v01865_rot_mat = v01865_rot_mat__temp.copy()

# op _013f_linear_combination_eval
# LANG: _013d, _013e --> _013g
# SHAPES: (1, 2, 3, 39), (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01849__013g = _013f_constant+1*v01847__013d+1*v01848__013e

# op _013h expand_scalar_eval
# LANG: dr --> _013i
# SHAPES: (1,) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01851__013i = np.empty((1, 2, 3, 39))
v01851__013i.fill(v01470_dr.item())

# op _014c_power_combination_eval
# LANG: _0147, _014b --> _014d
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01876__014d = (v01875__0147**1)*(v01878__014b**-1)
v01876__014d = (v01876__014d*_014c_coeff).reshape((3,))

# op _014i_power_combination_eval
# LANG: propeller_radius --> _014j
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01879__014j = (v01857_propeller_radius**1)
v01879__014j = (v01879__014j*_014i_coeff).reshape((1,))

# op _0169 expand_array_eval
# LANG: init_obs_z_loc --> _016a
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01949__016a = np.einsum('c,ab->abc', v01948_init_obs_z_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _016i_linear_combination_eval
# LANG: _0166, _016h --> rel_obs_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01938_rel_obs_x_pos = _016i_constant+1*v01937__0166+-1*v01939__016h

# op _016n_linear_combination_eval
# LANG: _0168, _016m --> rel_obs_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01946_rel_obs_y_pos = _016n_constant+1*v01945__0168+-1*v01947__016m

# op _016q_linear_combination_eval
# LANG: aircraft_z_pos, _016p --> _016r
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01951__016r = _016q_constant+1*v01934_aircraft_z_pos+1*v01943__016p

# op _01F6_single_tensor_sum_with_axis_eval
# LANG: _local_thrust --> _01F7
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02763__01F7 = np.sum(v02748__local_thrust, axis = (1, 2)).reshape((1,))

# op _01G5_power_combination_eval
# LANG: _01G4 --> _01G6
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02865__01G6 = (v02864__01G4**1)
v02865__01G6 = (v02865__01G6*_01G5_coeff).reshape((1,))

# op _01Gf_power_combination_eval
# LANG: _01Ge --> _01Gg
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02870__01Gg = (v02869__01Ge**1)
v02870__01Gg = (v02870__01Gg*_01Gf_coeff).reshape((1,))

# op _01RE_single_tensor_sum_with_axis_eval
# LANG: An --> _01RF
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03209__01RF = np.sum(v03175_An, axis = (4,)).reshape((1, 2, 3, 3))

# op _01RG_single_tensor_sum_with_axis_eval
# LANG: Bn --> _01RH
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03212__01RH = np.sum(v03208_Bn, axis = (4,)).reshape((1, 2, 3, 3))

# op _01SG_indexed_passthrough_eval
# LANG: _01SF, _01SI, _01SM, _01SQ, _01SU --> rot_mat
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03238_rot_mat__temp[i_v03236__01SF__01SG_indexed_passthrough_eval] = v03236__01SF.flatten()
v03238_rot_mat = v03238_rot_mat__temp.copy()
v03238_rot_mat__temp[i_v03239__01SI__01SG_indexed_passthrough_eval] = v03239__01SI.flatten()
v03238_rot_mat = v03238_rot_mat__temp.copy()
v03238_rot_mat__temp[i_v03241__01SM__01SG_indexed_passthrough_eval] = v03241__01SM.flatten()
v03238_rot_mat = v03238_rot_mat__temp.copy()
v03238_rot_mat__temp[i_v03243__01SQ__01SG_indexed_passthrough_eval] = v03243__01SQ.flatten()
v03238_rot_mat = v03238_rot_mat__temp.copy()
v03238_rot_mat__temp[i_v03245__01SU__01SG_indexed_passthrough_eval] = v03245__01SU.flatten()
v03238_rot_mat = v03238_rot_mat__temp.copy()

# op _01Sw_power_combination_eval
# LANG: _01Sv --> chord_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03233_chord_profile = (v03232__01Sv**1)
v03233_chord_profile = (v03233_chord_profile*_01Sw_coeff).reshape((40, 1))

# op _01T0_power_combination_eval
# LANG: _01SW, _01S_ --> _01T1
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03249__01T1 = (v03248__01SW**1)*(v03251__01S_**-1)
v03249__01T1 = (v03249__01T1*_01T0_coeff).reshape((3,))

# op _01T6_power_combination_eval
# LANG: propeller_radius --> _01T7
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03252__01T7 = (v03230_propeller_radius**1)
v03252__01T7 = (v03252__01T7*_01T6_coeff).reshape((1,))

# op _01UY expand_array_eval
# LANG: init_obs_z_loc --> _01UZ
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03323__01UZ = np.einsum('c,ab->abc', v03322_init_obs_z_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _01V6_linear_combination_eval
# LANG: _01UV, _01V5 --> rel_obs_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03312_rel_obs_x_pos = _01V6_constant+1*v03311__01UV+-1*v03313__01V5

# op _01Vb_linear_combination_eval
# LANG: _01UX, _01Va --> rel_obs_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03320_rel_obs_y_pos = _01Vb_constant+1*v03319__01UX+-1*v03321__01Va

# op _01Ve_linear_combination_eval
# LANG: aircraft_z_pos, _01Vd --> _01Vf
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03325__01Vf = _01Ve_constant+1*v03308_aircraft_z_pos+1*v03317__01Vd

# op _01q3_single_tensor_sum_with_axis_eval
# LANG: _local_thrust --> _01q4
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02390__01q4 = np.sum(v02375__local_thrust, axis = (1, 2)).reshape((1,))

# op _01r2_power_combination_eval
# LANG: _01r1 --> _01r3
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02492__01r3 = (v02491__01r1**1)
v02492__01r3 = (v02492__01r3*_01r2_coeff).reshape((1,))

# op _01rc_power_combination_eval
# LANG: _01rb --> _01rd
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02497__01rd = (v02496__01rb**1)
v02497__01rd = (v02497__01rd*_01rc_coeff).reshape((1,))

# op _027G_single_tensor_sum_with_axis_eval
# LANG: An --> _027H
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03723__027H = np.sum(v03689_An, axis = (4,)).reshape((1, 2, 3, 3))

# op _027I_single_tensor_sum_with_axis_eval
# LANG: Bn --> _027J
# SHAPES: (1, 2, 3, 3, 11) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03726__027J = np.sum(v03722_Bn, axis = (4,)).reshape((1, 2, 3, 3))

# op _028I_indexed_passthrough_eval
# LANG: _028H, _028K, _028O, _028S, _028W --> rot_mat
# SHAPES: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1) --> (3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03752_rot_mat__temp[i_v03750__028H__028I_indexed_passthrough_eval] = v03750__028H.flatten()
v03752_rot_mat = v03752_rot_mat__temp.copy()
v03752_rot_mat__temp[i_v03753__028K__028I_indexed_passthrough_eval] = v03753__028K.flatten()
v03752_rot_mat = v03752_rot_mat__temp.copy()
v03752_rot_mat__temp[i_v03755__028O__028I_indexed_passthrough_eval] = v03755__028O.flatten()
v03752_rot_mat = v03752_rot_mat__temp.copy()
v03752_rot_mat__temp[i_v03757__028S__028I_indexed_passthrough_eval] = v03757__028S.flatten()
v03752_rot_mat = v03752_rot_mat__temp.copy()
v03752_rot_mat__temp[i_v03759__028W__028I_indexed_passthrough_eval] = v03759__028W.flatten()
v03752_rot_mat = v03752_rot_mat__temp.copy()

# op _028y_power_combination_eval
# LANG: _028x --> chord_profile
# SHAPES: (40, 1) --> (40, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03747_chord_profile = (v03746__028x**1)
v03747_chord_profile = (v03747_chord_profile*_028y_coeff).reshape((40, 1))

# op _0292_power_combination_eval
# LANG: _028Y, _0291 --> _0293
# SHAPES: (3,), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03763__0293 = (v03762__028Y**1)*(v03765__0291**-1)
v03763__0293 = (v03763__0293*_0292_coeff).reshape((3,))

# op _0298_power_combination_eval
# LANG: propeller_radius --> _0299
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03766__0299 = (v03744_propeller_radius**1)
v03766__0299 = (v03766__0299*_0298_coeff).reshape((1,))

# op _02a_ expand_array_eval
# LANG: init_obs_z_loc --> _02b0
# SHAPES: (2,) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03837__02b0 = np.einsum('c,ab->abc', v03836_init_obs_z_loc.reshape((2,)) ,np.ones((1, 1))).reshape((1, 1, 2))

# op _02b8_linear_combination_eval
# LANG: _02aX, _02b7 --> rel_obs_x_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03826_rel_obs_x_pos = _02b8_constant+1*v03825__02aX+-1*v03827__02b7

# op _02bd_linear_combination_eval
# LANG: _02aZ, _02bc --> rel_obs_y_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03834_rel_obs_y_pos = _02bd_constant+1*v03833__02aZ+-1*v03835__02bc

# op _02bg_linear_combination_eval
# LANG: aircraft_z_pos, _02bf --> _02bh
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03839__02bh = _02bg_constant+1*v03822_aircraft_z_pos+1*v03831__02bf

# op _00JA_power_combination_eval
# LANG: _00Jt --> _00JB
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01216__00JB = (v01215__00Jt**1)
v01216__00JB = (v01216__00JB*_00JA_coeff).reshape((1, 2, 3))

# op _00JE_power_combination_eval
# LANG: _00Jx --> _00JF
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01222__00JF = (v01221__00Jx**1)
v01222__00JF = (v01222__00JF*_00JE_coeff).reshape((1, 2, 3))

# op _00JM_power_combination_eval
# LANG: _00Jt --> _00JN
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01228__00JN = (v01215__00Jt**1)
v01228__00JN = (v01228__00JN*_00JM_coeff).reshape((1, 2, 3))

# op _00JQ_power_combination_eval
# LANG: _00Jx --> _00JR
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01231__00JR = (v01221__00Jx**1)
v01231__00JR = (v01231__00JR*_00JQ_coeff).reshape((1, 2, 3))

# op _00Ju expand_scalar_eval
# LANG: _00Ce --> _00Jv
# SHAPES: (1,) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01218__00Jv = np.empty((1, 2, 3))
v01218__00Jv.fill(v01008__00Ce.item())

# op _00Jy expand_scalar_eval
# LANG: speed_of_sound --> _00Jz
# SHAPES: (1,) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01224__00Jz = np.empty((1, 2, 3))
v01224__00Jz.fill(v0923_speed_of_sound.item())

# op _00KJ_power_combination_eval
# LANG: _00KG, _00KI --> _00KK
# SHAPES: (1, 2, 3, 39), (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01254__00KK = (v01253__00KG**1)*(v01255__00KI**1)
v01254__00KK = (v01254__00KK*_00KJ_coeff).reshape((1, 2, 3, 39))

# op _00Ku_power_combination_eval
# LANG: _00Kr, _00Kt --> _00Kv
# SHAPES: (1, 2, 3, 39), (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01247__00Kv = (v01246__00Kr**1)*(v01248__00Kt**1)
v01247__00Kv = (v01247__00Kv*_00Ku_coeff).reshape((1, 2, 3, 39))

# op _00LE_matvec_eval
# LANG: rot_mat, _00LD --> thrust_dir
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01277_thrust_dir = v01269_rot_mat@v01280__00LD

# op _00LK_power_combination_eval
# LANG: _00LJ --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01284_dr = (v01283__00LJ**1)
v01284_dr = (v01284_dr*_00LK_coeff).reshape((1,))

# op _00LO_power_combination_eval
# LANG: rpm --> _00LP
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01286__00LP = (v0531_rpm**1)
v01286__00LP = (v01286__00LP*_00LO_coeff).reshape((1, 1))

# op _00NS_linear_combination_eval
# LANG: _00NA, _00NR --> rel_obs_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01354_rel_obs_z_pos = _00NS_constant+1*v01353__00NA+-1*v01355__00NR

# op _00NW_power_combination_eval
# LANG: rel_obs_x_pos --> _00NX
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01357__00NX = (v01342_rel_obs_x_pos**2)
v01357__00NX = (v01357__00NX*_00NW_coeff).reshape((1, 1, 2))

# op _00NY_power_combination_eval
# LANG: rel_obs_y_pos --> _00NZ
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01359__00NZ = (v01350_rel_obs_y_pos**2)
v01359__00NZ = (v01359__00NZ*_00NY_coeff).reshape((1, 1, 2))

# op _00OO_power_combination_eval
# LANG: rpm --> _00OP
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v0531_rpm = v0531_rpm.reshape((1,))
v01389__00OP = (v0531_rpm**1)
v01389__00OP = (v01389__00OP*_00OO_coeff).reshape((1,))
v0531_rpm = v0531_rpm.reshape((1, 1))

# op _00P4 single_tensor_sum_no_axis_eval
# LANG: chord_profile --> _00P5
# SHAPES: (40, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01381__00P5 = np.sum(v01264_chord_profile).reshape((1,))

# op _00S1_power_combination_eval
# LANG: rpm --> _00S2
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01472__00S2 = (v0158_rpm**1)
v01472__00S2 = (v01472__00S2*_00S1_coeff).reshape((1, 1))

# op _00g8_power_combination_eval
# LANG: _00g7 --> T
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0341_T = (v0340__00g7**1)
v0341_T = (v0341_T*_00g8_coeff).reshape((1,))

# op _00h7_power_combination_eval
# LANG: _00h6 --> _00h8
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0443__00h8 = (v0442__00h6**1)
v0443__00h8 = (v0443__00h8*_00h7_coeff).reshape((1,))

# op _00hh_power_combination_eval
# LANG: _00hg --> _00hi
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0448__00hi = (v0447__00hg**1)
v0448__00hi = (v0448__00hi*_00hh_coeff).reshape((1,))

# op _00vb_power_combination_eval
# LANG: _00va --> T
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0714_T = (v0713__00va**1)
v0714_T = (v0714_T*_00vb_coeff).reshape((1,))

# op _00wa_power_combination_eval
# LANG: _00w9 --> _00wb
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0816__00wb = (v0815__00w9**1)
v0816__00wb = (v0816__00wb*_00wa_coeff).reshape((1,))

# op _00wk_power_combination_eval
# LANG: _00wj --> _00wl
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0821__00wl = (v0820__00wj**1)
v0821__00wl = (v0821__00wl*_00wk_coeff).reshape((1,))

# op _00yr_power_combination_eval
# LANG: rpm --> _00ys
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0876__00ys = (v0531_rpm**1)
v0876__00ys = (v0876__00ys*_00yr_coeff).reshape((1, 1))

# op _0124 expand_scalar_eval
# LANG: _00VP --> _0125
# SHAPES: (1,) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01814__0125 = np.empty((1, 2, 3))
v01814__0125.fill(v01604__00VP.item())

# op _0128 expand_scalar_eval
# LANG: speed_of_sound --> _0129
# SHAPES: (1,) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01820__0129 = np.empty((1, 2, 3))
v01820__0129.fill(v01519_speed_of_sound.item())

# op _012a_power_combination_eval
# LANG: _0123 --> _012b
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01812__012b = (v01811__0123**1)
v01812__012b = (v01812__012b*_012a_coeff).reshape((1, 2, 3))

# op _012e_power_combination_eval
# LANG: _0127 --> _012f
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01818__012f = (v01817__0127**1)
v01818__012f = (v01818__012f*_012e_coeff).reshape((1, 2, 3))

# op _012m_power_combination_eval
# LANG: _0123 --> _012n
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01824__012n = (v01811__0123**1)
v01824__012n = (v01824__012n*_012m_coeff).reshape((1, 2, 3))

# op _012q_power_combination_eval
# LANG: _0127 --> _012r
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01827__012r = (v01817__0127**1)
v01827__012r = (v01827__012r*_012q_coeff).reshape((1, 2, 3))

# op _0134_power_combination_eval
# LANG: _0131, _0133 --> _0135
# SHAPES: (1, 2, 3, 39), (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01843__0135 = (v01842__0131**1)*(v01844__0133**1)
v01843__0135 = (v01843__0135*_0134_coeff).reshape((1, 2, 3, 39))

# op _013j_power_combination_eval
# LANG: _013g, _013i --> _013k
# SHAPES: (1, 2, 3, 39), (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01850__013k = (v01849__013g**1)*(v01851__013i**1)
v01850__013k = (v01850__013k*_013j_coeff).reshape((1, 2, 3, 39))

# op _014e_matvec_eval
# LANG: rot_mat, _014d --> thrust_dir
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01873_thrust_dir = v01865_rot_mat@v01876__014d

# op _014k_power_combination_eval
# LANG: _014j --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01880_dr = (v01879__014j**1)
v01880_dr = (v01880_dr*_014k_coeff).reshape((1,))

# op _014o_power_combination_eval
# LANG: rpm --> _014p
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01882__014p = (v0158_rpm**1)
v01882__014p = (v01882__014p*_014o_coeff).reshape((1, 1))

# op _016s_linear_combination_eval
# LANG: _016a, _016r --> rel_obs_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01950_rel_obs_z_pos = _016s_constant+1*v01949__016a+-1*v01951__016r

# op _016w_power_combination_eval
# LANG: rel_obs_x_pos --> _016x
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01953__016x = (v01938_rel_obs_x_pos**2)
v01953__016x = (v01953__016x*_016w_coeff).reshape((1, 1, 2))

# op _016y_power_combination_eval
# LANG: rel_obs_y_pos --> _016z
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01955__016z = (v01946_rel_obs_y_pos**2)
v01955__016z = (v01955__016z*_016y_coeff).reshape((1, 1, 2))

# op _017F single_tensor_sum_no_axis_eval
# LANG: chord_profile --> _017G
# SHAPES: (40, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01977__017G = np.sum(v01860_chord_profile).reshape((1,))

# op _017o_power_combination_eval
# LANG: rpm --> _017p
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v0158_rpm = v0158_rpm.reshape((1,))
v01985__017p = (v0158_rpm**1)
v01985__017p = (v01985__017p*_017o_coeff).reshape((1,))
v0158_rpm = v0158_rpm.reshape((1, 1))

# op _01F8_power_combination_eval
# LANG: _01F7 --> T
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02764_T = (v02763__01F7**1)
v02764_T = (v02764_T*_01F8_coeff).reshape((1,))

# op _01G7_power_combination_eval
# LANG: _01G6 --> _01G8
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02866__01G8 = (v02865__01G6**1)
v02866__01G8 = (v02866__01G8*_01G7_coeff).reshape((1,))

# op _01Gh_power_combination_eval
# LANG: _01Gg --> _01Gi
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02871__01Gi = (v02870__01Gg**1)
v02871__01Gi = (v02871__01Gi*_01Gh_coeff).reshape((1,))

# op _01Iv_power_combination_eval
# LANG: rpm --> _01Iw
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02929__01Iw = (v02928_rpm**1)
v02929__01Iw = (v02929__01Iw*_01Iv_coeff).reshape((1, 1))

# op _01RI_power_combination_eval
# LANG: _01RF --> _01RJ
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03210__01RJ = (v03209__01RF**2)
v03210__01RJ = (v03210__01RJ*_01RI_coeff).reshape((1, 2, 3, 3))

# op _01RK_power_combination_eval
# LANG: _01RH --> _01RL
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03213__01RL = (v03212__01RH**2)
v03213__01RL = (v03213__01RL*_01RK_coeff).reshape((1, 2, 3, 3))

# op _01T2_matvec_eval
# LANG: rot_mat, _01T1 --> thrust_dir
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03246_thrust_dir = v03238_rot_mat@v03249__01T1

# op _01T8_power_combination_eval
# LANG: _01T7 --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03253_dr = (v03252__01T7**1)
v03253_dr = (v03253_dr*_01T8_coeff).reshape((1,))

# op _01Tc_power_combination_eval
# LANG: rpm --> _01Td
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03256__01Td = (v03255_rpm**1)
v03256__01Td = (v03256__01Td*_01Tc_coeff).reshape((1, 1))

# op _01Vg_linear_combination_eval
# LANG: _01UZ, _01Vf --> rel_obs_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03324_rel_obs_z_pos = _01Vg_constant+1*v03323__01UZ+-1*v03325__01Vf

# op _01Vk_power_combination_eval
# LANG: rel_obs_x_pos --> _01Vl
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03327__01Vl = (v03312_rel_obs_x_pos**2)
v03327__01Vl = (v03327__01Vl*_01Vk_coeff).reshape((1, 1, 2))

# op _01Vm_power_combination_eval
# LANG: rel_obs_y_pos --> _01Vn
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03329__01Vn = (v03320_rel_obs_y_pos**2)
v03329__01Vn = (v03329__01Vn*_01Vm_coeff).reshape((1, 1, 2))

# op _01Wc_power_combination_eval
# LANG: rpm --> _01Wd
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03255_rpm = v03255_rpm.reshape((1,))
v03359__01Wd = (v03255_rpm**1)
v03359__01Wd = (v03359__01Wd*_01Wc_coeff).reshape((1,))
v03255_rpm = v03255_rpm.reshape((1, 1))

# op _01Wt single_tensor_sum_no_axis_eval
# LANG: chord_profile --> _01Wu
# SHAPES: (40, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03351__01Wu = np.sum(v03233_chord_profile).reshape((1,))

# op _01Zx_power_combination_eval
# LANG: rpm --> _01Zy
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03444__01Zy = (v02928_rpm**1)
v03444__01Zy = (v03444__01Zy*_01Zx_coeff).reshape((1, 1))

# op _01q5_power_combination_eval
# LANG: _01q4 --> T
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02391_T = (v02390__01q4**1)
v02391_T = (v02391_T*_01q5_coeff).reshape((1,))

# op _01r4_power_combination_eval
# LANG: _01r3 --> _01r5
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02493__01r5 = (v02492__01r3**1)
v02493__01r5 = (v02493__01r5*_01r4_coeff).reshape((1,))

# op _01re_power_combination_eval
# LANG: _01rd --> _01rf
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02498__01rf = (v02497__01rd**1)
v02498__01rf = (v02498__01rf*_01re_coeff).reshape((1,))

# op _027K_power_combination_eval
# LANG: _027H --> _027L
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03724__027L = (v03723__027H**2)
v03724__027L = (v03724__027L*_027K_coeff).reshape((1, 2, 3, 3))

# op _027M_power_combination_eval
# LANG: _027J --> _027N
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03727__027N = (v03726__027J**2)
v03727__027N = (v03727__027N*_027M_coeff).reshape((1, 2, 3, 3))

# op _0294_matvec_eval
# LANG: rot_mat, _0293 --> thrust_dir
# SHAPES: (3, 3), (3,) --> (3,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03760_thrust_dir = v03752_rot_mat@v03763__0293

# op _029a_power_combination_eval
# LANG: _0299 --> dr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03767_dr = (v03766__0299**1)
v03767_dr = (v03767_dr*_029a_coeff).reshape((1,))

# op _029e_power_combination_eval
# LANG: rpm --> _029f
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03770__029f = (v03769_rpm**1)
v03770__029f = (v03770__029f*_029e_coeff).reshape((1, 1))

# op _02bi_linear_combination_eval
# LANG: _02b0, _02bh --> rel_obs_z_pos
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03838_rel_obs_z_pos = _02bi_constant+1*v03837__02b0+-1*v03839__02bh

# op _02bm_power_combination_eval
# LANG: rel_obs_x_pos --> _02bn
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03841__02bn = (v03826_rel_obs_x_pos**2)
v03841__02bn = (v03841__02bn*_02bm_coeff).reshape((1, 1, 2))

# op _02bo_power_combination_eval
# LANG: rel_obs_y_pos --> _02bp
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03843__02bp = (v03834_rel_obs_y_pos**2)
v03843__02bp = (v03843__02bp*_02bo_coeff).reshape((1, 1, 2))

# op _02ce_power_combination_eval
# LANG: rpm --> _02cf
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03769_rpm = v03769_rpm.reshape((1,))
v03873__02cf = (v03769_rpm**1)
v03873__02cf = (v03873__02cf*_02ce_coeff).reshape((1,))
v03769_rpm = v03769_rpm.reshape((1, 1))

# op _02cv single_tensor_sum_no_axis_eval
# LANG: chord_profile --> _02cw
# SHAPES: (40, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03865__02cw = np.sum(v03747_chord_profile).reshape((1,))

# op _00JC_power_combination_eval
# LANG: _00JB, _00Jv --> _00JD
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01217__00JD = (v01216__00JB**1)*(v01218__00Jv**1)
v01217__00JD = (v01217__00JD*_00JC_coeff).reshape((1, 2, 3))

# op _00JG_power_combination_eval
# LANG: _00JF, _00Jz --> _00JH
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01223__00JH = (v01222__00JF**1)*(v01224__00Jz**1)
v01223__00JH = (v01223__00JH*_00JG_coeff).reshape((1, 2, 3))

# op _00JO_power_combination_eval
# LANG: _00Jv, _00JN --> _00JP
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01229__00JP = (v01228__00JN**1)*(v01218__00Jv**1)
v01229__00JP = (v01229__00JP*_00JO_coeff).reshape((1, 2, 3))

# op _00JS_power_combination_eval
# LANG: _00Jz, _00JR --> _00JT
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01232__00JT = (v01231__00JR**1)*(v01224__00Jz**1)
v01232__00JT = (v01232__00JT*_00JS_coeff).reshape((1, 2, 3))

# op _00KL_power_combination_eval
# LANG: _00KK --> _00KM
# SHAPES: (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01256__00KM = (v01254__00KK**1)
v01256__00KM = (v01256__00KM*_00KL_coeff).reshape((1, 2, 3, 39))

# op _00Kw_power_combination_eval
# LANG: _00Kv --> _00Kx
# SHAPES: (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01249__00Kx = (v01247__00Kv**1)
v01249__00Kx = (v01249__00Kx*_00Kw_coeff).reshape((1, 2, 3, 39))

# op _00LQ_power_combination_eval
# LANG: _00LP --> _00LR
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01287__00LR = (v01286__00LP**1)
v01287__00LR = (v01287__00LR*_00LQ_coeff).reshape((1, 1))

# op _00NV_indexed_passthrough_eval
# LANG: rel_obs_x_pos, rel_obs_y_pos, rel_obs_z_pos --> rel_obs_position
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01356_rel_obs_position__temp[i_v01342_rel_obs_x_pos__00NV_indexed_passthrough_eval] = v01342_rel_obs_x_pos.flatten()
v01356_rel_obs_position = v01356_rel_obs_position__temp.copy()
v01356_rel_obs_position__temp[i_v01350_rel_obs_y_pos__00NV_indexed_passthrough_eval] = v01350_rel_obs_y_pos.flatten()
v01356_rel_obs_position = v01356_rel_obs_position__temp.copy()
v01356_rel_obs_position__temp[i_v01354_rel_obs_z_pos__00NV_indexed_passthrough_eval] = v01354_rel_obs_z_pos.flatten()
v01356_rel_obs_position = v01356_rel_obs_position__temp.copy()

# op _00N__linear_combination_eval
# LANG: _00NX, _00NZ --> _00O0
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01358__00O0 = _00N__constant+1*v01357__00NX+1*v01359__00NZ

# op _00O1_power_combination_eval
# LANG: rel_obs_z_pos --> _00O2
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01361__00O2 = (v01354_rel_obs_z_pos**2)
v01361__00O2 = (v01361__00O2*_00O1_coeff).reshape((1, 1, 2))

# op _00O8 expand_array_eval
# LANG: thrust_dir --> _00O9
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01364__00O9 = np.einsum('b,ac->abc', v01277_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _00OQ_power_combination_eval
# LANG: _00OP --> _00OR
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01390__00OR = (v01389__00OP**1)
v01390__00OR = (v01390__00OR*_00OQ_coeff).reshape((1,))

# op _00P6_power_combination_eval
# LANG: _00P5, dr --> _00P7
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01382__00P7 = (v01381__00P5**1)*(v01284_dr**1)
v01382__00P7 = (v01382__00P7*_00P6_coeff).reshape((1,))

# op _00Pc expand_scalar_eval
# LANG: propeller_radius --> _00Pd
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01386__00Pd = np.empty((1, 2))
v01386__00Pd.fill(v01261_propeller_radius.item())

# op _00S3_power_combination_eval
# LANG: _00S2 --> _00S4
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01473__00S4 = (v01472__00S2**1)
v01473__00S4 = (v01473__00S4*_00S3_coeff).reshape((1, 1))

# op _00h1_power_combination_eval
# LANG: T, density --> _00h2
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0242_density = v0242_density.reshape((1,))
v0437__00h2 = (v0341_T**1)*(v0242_density**-1)
v0437__00h2 = (v0437__00h2*_00h1_coeff).reshape((1,))
v0242_density = v0242_density.reshape((1, 1))

# op _00h9_power_combination_eval
# LANG: _00h8 --> _00ha
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0444__00ha = (v0443__00h8**2)
v0444__00ha = (v0444__00ha*_00h9_coeff).reshape((1,))

# op _00hj_power_combination_eval
# LANG: _00hi --> _00hk
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0449__00hk = (v0448__00hi**1)
v0449__00hk = (v0449__00hk*_00hj_coeff).reshape((1,))

# op _00w4_power_combination_eval
# LANG: T, density --> _00w5
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0615_density = v0615_density.reshape((1,))
v0810__00w5 = (v0714_T**1)*(v0615_density**-1)
v0810__00w5 = (v0810__00w5*_00w4_coeff).reshape((1,))
v0615_density = v0615_density.reshape((1, 1))

# op _00wc_power_combination_eval
# LANG: _00wb --> _00wd
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0817__00wd = (v0816__00wb**2)
v0817__00wd = (v0817__00wd*_00wc_coeff).reshape((1,))

# op _00wm_power_combination_eval
# LANG: _00wl --> _00wn
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0822__00wn = (v0821__00wl**1)
v0822__00wn = (v0822__00wn*_00wm_coeff).reshape((1,))

# op _00yt_power_combination_eval
# LANG: _00ys --> _00yu
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0877__00yu = (v0876__00ys**1)
v0877__00yu = (v0877__00yu*_00yt_coeff).reshape((1, 1))

# op _012c_power_combination_eval
# LANG: _012b, _0125 --> _012d
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01813__012d = (v01812__012b**1)*(v01814__0125**1)
v01813__012d = (v01813__012d*_012c_coeff).reshape((1, 2, 3))

# op _012g_power_combination_eval
# LANG: _012f, _0129 --> _012h
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01819__012h = (v01818__012f**1)*(v01820__0129**1)
v01819__012h = (v01819__012h*_012g_coeff).reshape((1, 2, 3))

# op _012o_power_combination_eval
# LANG: _0125, _012n --> _012p
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01825__012p = (v01824__012n**1)*(v01814__0125**1)
v01825__012p = (v01825__012p*_012o_coeff).reshape((1, 2, 3))

# op _012s_power_combination_eval
# LANG: _0129, _012r --> _012t
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01828__012t = (v01827__012r**1)*(v01820__0129**1)
v01828__012t = (v01828__012t*_012s_coeff).reshape((1, 2, 3))

# op _0136_power_combination_eval
# LANG: _0135 --> _0137
# SHAPES: (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01845__0137 = (v01843__0135**1)
v01845__0137 = (v01845__0137*_0136_coeff).reshape((1, 2, 3, 39))

# op _013l_power_combination_eval
# LANG: _013k --> _013m
# SHAPES: (1, 2, 3, 39) --> (1, 2, 3, 39)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01852__013m = (v01850__013k**1)
v01852__013m = (v01852__013m*_013l_coeff).reshape((1, 2, 3, 39))

# op _014q_power_combination_eval
# LANG: _014p --> _014r
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01883__014r = (v01882__014p**1)
v01883__014r = (v01883__014r*_014q_coeff).reshape((1, 1))

# op _016A_linear_combination_eval
# LANG: _016x, _016z --> _016B
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01954__016B = _016A_constant+1*v01953__016x+1*v01955__016z

# op _016C_power_combination_eval
# LANG: rel_obs_z_pos --> _016D
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01957__016D = (v01950_rel_obs_z_pos**2)
v01957__016D = (v01957__016D*_016C_coeff).reshape((1, 1, 2))

# op _016J expand_array_eval
# LANG: thrust_dir --> _016K
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01960__016K = np.einsum('b,ac->abc', v01873_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _016v_indexed_passthrough_eval
# LANG: rel_obs_x_pos, rel_obs_y_pos, rel_obs_z_pos --> rel_obs_position
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01952_rel_obs_position__temp[i_v01938_rel_obs_x_pos__016v_indexed_passthrough_eval] = v01938_rel_obs_x_pos.flatten()
v01952_rel_obs_position = v01952_rel_obs_position__temp.copy()
v01952_rel_obs_position__temp[i_v01946_rel_obs_y_pos__016v_indexed_passthrough_eval] = v01946_rel_obs_y_pos.flatten()
v01952_rel_obs_position = v01952_rel_obs_position__temp.copy()
v01952_rel_obs_position__temp[i_v01950_rel_obs_z_pos__016v_indexed_passthrough_eval] = v01950_rel_obs_z_pos.flatten()
v01952_rel_obs_position = v01952_rel_obs_position__temp.copy()

# op _017H_power_combination_eval
# LANG: _017G, dr --> _017I
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01978__017I = (v01977__017G**1)*(v01880_dr**1)
v01978__017I = (v01978__017I*_017H_coeff).reshape((1,))

# op _017N expand_scalar_eval
# LANG: propeller_radius --> _017O
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01982__017O = np.empty((1, 2))
v01982__017O.fill(v01857_propeller_radius.item())

# op _017q_power_combination_eval
# LANG: _017p --> _017r
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01986__017r = (v01985__017p**1)
v01986__017r = (v01986__017r*_017q_coeff).reshape((1,))

# op _01G1_power_combination_eval
# LANG: T, density --> _01G2
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02665_density = v02665_density.reshape((1,))
v02860__01G2 = (v02764_T**1)*(v02665_density**-1)
v02860__01G2 = (v02860__01G2*_01G1_coeff).reshape((1,))
v02665_density = v02665_density.reshape((1, 1))

# op _01G9_power_combination_eval
# LANG: _01G8 --> _01Ga
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02867__01Ga = (v02866__01G8**2)
v02867__01Ga = (v02867__01Ga*_01G9_coeff).reshape((1,))

# op _01Gj_power_combination_eval
# LANG: _01Gi --> _01Gk
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02872__01Gk = (v02871__01Gi**1)
v02872__01Gk = (v02872__01Gk*_01Gj_coeff).reshape((1,))

# op _01Ix_power_combination_eval
# LANG: _01Iw --> _01Iy
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02930__01Iy = (v02929__01Iw**1)
v02930__01Iy = (v02930__01Iy*_01Ix_coeff).reshape((1, 1))

# op _01RM_linear_combination_eval
# LANG: _01RJ, _01RL --> _01RN
# SHAPES: (1, 2, 3, 3), (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03211__01RN = _01RM_constant+1*v03210__01RJ+1*v03213__01RL

# op _01Te_power_combination_eval
# LANG: _01Td --> _01Tf
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03257__01Tf = (v03256__01Td**1)
v03257__01Tf = (v03257__01Tf*_01Te_coeff).reshape((1, 1))

# op _01Vj_indexed_passthrough_eval
# LANG: rel_obs_x_pos, rel_obs_y_pos, rel_obs_z_pos --> rel_obs_position
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03326_rel_obs_position__temp[i_v03312_rel_obs_x_pos__01Vj_indexed_passthrough_eval] = v03312_rel_obs_x_pos.flatten()
v03326_rel_obs_position = v03326_rel_obs_position__temp.copy()
v03326_rel_obs_position__temp[i_v03320_rel_obs_y_pos__01Vj_indexed_passthrough_eval] = v03320_rel_obs_y_pos.flatten()
v03326_rel_obs_position = v03326_rel_obs_position__temp.copy()
v03326_rel_obs_position__temp[i_v03324_rel_obs_z_pos__01Vj_indexed_passthrough_eval] = v03324_rel_obs_z_pos.flatten()
v03326_rel_obs_position = v03326_rel_obs_position__temp.copy()

# op _01Vo_linear_combination_eval
# LANG: _01Vl, _01Vn --> _01Vp
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03328__01Vp = _01Vo_constant+1*v03327__01Vl+1*v03329__01Vn

# op _01Vq_power_combination_eval
# LANG: rel_obs_z_pos --> _01Vr
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03331__01Vr = (v03324_rel_obs_z_pos**2)
v03331__01Vr = (v03331__01Vr*_01Vq_coeff).reshape((1, 1, 2))

# op _01Vx expand_array_eval
# LANG: thrust_dir --> _01Vy
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03334__01Vy = np.einsum('b,ac->abc', v03246_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _01WB expand_scalar_eval
# LANG: propeller_radius --> _01WC
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03356__01WC = np.empty((1, 2))
v03356__01WC.fill(v03230_propeller_radius.item())

# op _01We_power_combination_eval
# LANG: _01Wd --> _01Wf
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03360__01Wf = (v03359__01Wd**1)
v03360__01Wf = (v03360__01Wf*_01We_coeff).reshape((1,))

# op _01Wv_power_combination_eval
# LANG: _01Wu, dr --> _01Ww
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03352__01Ww = (v03351__01Wu**1)*(v03253_dr**1)
v03352__01Ww = (v03352__01Ww*_01Wv_coeff).reshape((1,))

# op _01Zz_power_combination_eval
# LANG: _01Zy --> _01ZA
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03445__01ZA = (v03444__01Zy**1)
v03445__01ZA = (v03445__01ZA*_01Zz_coeff).reshape((1, 1))

# op _01qZ_power_combination_eval
# LANG: T, density --> _01q_
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02292_density = v02292_density.reshape((1,))
v02487__01q_ = (v02391_T**1)*(v02292_density**-1)
v02487__01q_ = (v02487__01q_*_01qZ_coeff).reshape((1,))
v02292_density = v02292_density.reshape((1, 1))

# op _01r6_power_combination_eval
# LANG: _01r5 --> _01r7
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02494__01r7 = (v02493__01r5**2)
v02494__01r7 = (v02494__01r7*_01r6_coeff).reshape((1,))

# op _01rg_power_combination_eval
# LANG: _01rf --> _01rh
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02499__01rh = (v02498__01rf**1)
v02499__01rh = (v02499__01rh*_01rg_coeff).reshape((1,))

# op _027O_linear_combination_eval
# LANG: _027L, _027N --> _027P
# SHAPES: (1, 2, 3, 3), (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03725__027P = _027O_constant+1*v03724__027L+1*v03727__027N

# op _029g_power_combination_eval
# LANG: _029f --> _029h
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03771__029h = (v03770__029f**1)
v03771__029h = (v03771__029h*_029g_coeff).reshape((1, 1))

# op _02bl_indexed_passthrough_eval
# LANG: rel_obs_x_pos, rel_obs_y_pos, rel_obs_z_pos --> rel_obs_position
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03840_rel_obs_position__temp[i_v03826_rel_obs_x_pos__02bl_indexed_passthrough_eval] = v03826_rel_obs_x_pos.flatten()
v03840_rel_obs_position = v03840_rel_obs_position__temp.copy()
v03840_rel_obs_position__temp[i_v03834_rel_obs_y_pos__02bl_indexed_passthrough_eval] = v03834_rel_obs_y_pos.flatten()
v03840_rel_obs_position = v03840_rel_obs_position__temp.copy()
v03840_rel_obs_position__temp[i_v03838_rel_obs_z_pos__02bl_indexed_passthrough_eval] = v03838_rel_obs_z_pos.flatten()
v03840_rel_obs_position = v03840_rel_obs_position__temp.copy()

# op _02bq_linear_combination_eval
# LANG: _02bn, _02bp --> _02br
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03842__02br = _02bq_constant+1*v03841__02bn+1*v03843__02bp

# op _02bs_power_combination_eval
# LANG: rel_obs_z_pos --> _02bt
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03845__02bt = (v03838_rel_obs_z_pos**2)
v03845__02bt = (v03845__02bt*_02bs_coeff).reshape((1, 1, 2))

# op _02bz expand_array_eval
# LANG: thrust_dir --> _02bA
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03848__02bA = np.einsum('b,ac->abc', v03760_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _02cD expand_scalar_eval
# LANG: propeller_radius --> _02cE
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03870__02cE = np.empty((1, 2))
v03870__02cE.fill(v03744_propeller_radius.item())

# op _02cg_power_combination_eval
# LANG: _02cf --> _02ch
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03874__02ch = (v03873__02cf**1)
v03874__02ch = (v03874__02ch*_02cg_coeff).reshape((1,))

# op _02cx_power_combination_eval
# LANG: _02cw, dr --> _02cy
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03866__02cy = (v03865__02cw**1)*(v03767_dr**1)
v03866__02cy = (v03866__02cy*_02cx_coeff).reshape((1,))

# op _00JI_power_combination_eval
# LANG: _00JD, _00JH --> _00JJ
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01219__00JJ = (v01217__00JD**1)*(v01223__00JH**-1)
v01219__00JJ = (v01219__00JJ*_00JI_coeff).reshape((1, 2, 3))

# op _00JU_power_combination_eval
# LANG: _00JP, _00JT --> _00JV
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01230__00JV = (v01229__00JP**1)*(v01232__00JT**-1)
v01230__00JV = (v01230__00JV*_00JU_coeff).reshape((1, 2, 3))

# op _00KN_single_tensor_sum_with_axis_eval
# LANG: _00KM --> C_imag_integrand
# SHAPES: (1, 2, 3, 39) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01257_C_imag_integrand = np.sum(v01256__00KM, axis = (3,)).reshape((1, 2, 3))

# op _00Ky_single_tensor_sum_with_axis_eval
# LANG: _00Kx --> C_real_integrand
# SHAPES: (1, 2, 3, 39) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01250_C_real_integrand = np.sum(v01249__00Kx, axis = (3,)).reshape((1, 2, 3))

# op _00LS_power_combination_eval
# LANG: _00LR --> _00LT
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01288__00LT = (v01287__00LR**1)
v01288__00LT = (v01288__00LT*_00LS_coeff).reshape((1, 1))

# op _00O3_linear_combination_eval
# LANG: _00O0, _00O2 --> _00O4
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01360__00O4 = _00O3_constant+1*v01358__00O0+1*v01361__00O2

# op _00OS_power_combination_eval
# LANG: _00OR --> _00OT
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01391__00OT = (v01390__00OR**1)
v01391__00OT = (v01391__00OT*_00OS_coeff).reshape((1,))

# op _00OU expand_scalar_eval
# LANG: propeller_radius --> _00OV
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01393__00OV = np.empty((1,))
v01393__00OV.fill(v01261_propeller_radius.item())

# op _00Oa_tensor_dot_product_eval
# LANG: rel_obs_position, _00O9 --> normal_proj
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01363_normal_proj = np.sum(v01356_rel_obs_position * v01364__00O9, axis=1)

# op _00P8 expand_scalar_eval
# LANG: _00P7 --> _00P9
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01383__00P9 = np.empty((1, 2))
v01383__00P9.fill(v01382__00P7.item())

# op _00Pe_power_combination_eval
# LANG: _00Pd --> _00Pf
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01387__00Pf = (v01386__00Pd**2)
v01387__00Pf = (v01387__00Pf*_00Pe_coeff).reshape((1, 2))

# op _00S5_power_combination_eval
# LANG: _00S4 --> _00S6
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01474__00S6 = (v01473__00S4**1)
v01474__00S6 = (v01474__00S6*_00S5_coeff).reshape((1, 1))

# op _00hb_power_combination_eval
# LANG: _00h2, _00ha --> _00hc
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0438__00hc = (v0437__00h2**1)*(v0444__00ha**-1)
v0438__00hc = (v0438__00hc*_00hb_coeff).reshape((1,))

# op _00hl_power_combination_eval
# LANG: _00hk --> _00hm
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0450__00hm = (v0449__00hk**4)
v0450__00hm = (v0450__00hm*_00hl_coeff).reshape((1,))

# op _00we_power_combination_eval
# LANG: _00w5, _00wd --> _00wf
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0811__00wf = (v0810__00w5**1)*(v0817__00wd**-1)
v0811__00wf = (v0811__00wf*_00we_coeff).reshape((1,))

# op _00wo_power_combination_eval
# LANG: _00wn --> _00wp
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0823__00wp = (v0822__00wn**4)
v0823__00wp = (v0823__00wp*_00wo_coeff).reshape((1,))

# op _00yv_power_combination_eval
# LANG: _00yu --> _00yw
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0878__00yw = (v0877__00yu**1)
v0878__00yw = (v0878__00yw*_00yv_coeff).reshape((1, 1))

# op _012i_power_combination_eval
# LANG: _012d, _012h --> _012j
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01815__012j = (v01813__012d**1)*(v01819__012h**-1)
v01815__012j = (v01815__012j*_012i_coeff).reshape((1, 2, 3))

# op _012u_power_combination_eval
# LANG: _012p, _012t --> _012v
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01826__012v = (v01825__012p**1)*(v01828__012t**-1)
v01826__012v = (v01826__012v*_012u_coeff).reshape((1, 2, 3))

# op _0138_single_tensor_sum_with_axis_eval
# LANG: _0137 --> C_real_integrand
# SHAPES: (1, 2, 3, 39) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.An_integration_model
v01846_C_real_integrand = np.sum(v01845__0137, axis = (3,)).reshape((1, 2, 3))

# op _013n_single_tensor_sum_with_axis_eval
# LANG: _013m --> C_imag_integrand
# SHAPES: (1, 2, 3, 39) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model.Bn_integration_model
v01853_C_imag_integrand = np.sum(v01852__013m, axis = (3,)).reshape((1, 2, 3))

# op _014s_power_combination_eval
# LANG: _014r --> _014t
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01884__014t = (v01883__014r**1)
v01884__014t = (v01884__014t*_014s_coeff).reshape((1, 1))

# op _016E_linear_combination_eval
# LANG: _016B, _016D --> _016F
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01956__016F = _016E_constant+1*v01954__016B+1*v01957__016D

# op _016L_tensor_dot_product_eval
# LANG: rel_obs_position, _016K --> normal_proj
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01959_normal_proj = np.sum(v01952_rel_obs_position * v01960__016K, axis=1)

# op _017J expand_scalar_eval
# LANG: _017I --> _017K
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01979__017K = np.empty((1, 2))
v01979__017K.fill(v01978__017I.item())

# op _017P_power_combination_eval
# LANG: _017O --> _017Q
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01983__017Q = (v01982__017O**2)
v01983__017Q = (v01983__017Q*_017P_coeff).reshape((1, 2))

# op _017s_power_combination_eval
# LANG: _017r --> _017t
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01987__017t = (v01986__017r**1)
v01987__017t = (v01987__017t*_017s_coeff).reshape((1,))

# op _017u expand_scalar_eval
# LANG: propeller_radius --> _017v
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01989__017v = np.empty((1,))
v01989__017v.fill(v01857_propeller_radius.item())

# op _01Gb_power_combination_eval
# LANG: _01G2, _01Ga --> _01Gc
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02861__01Gc = (v02860__01G2**1)*(v02867__01Ga**-1)
v02861__01Gc = (v02861__01Gc*_01Gb_coeff).reshape((1,))

# op _01Gl_power_combination_eval
# LANG: _01Gk --> _01Gm
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02873__01Gm = (v02872__01Gk**4)
v02873__01Gm = (v02873__01Gm*_01Gl_coeff).reshape((1,))

# op _01Iz_power_combination_eval
# LANG: _01Iy --> _01IA
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02931__01IA = (v02930__01Iy**1)
v02931__01IA = (v02931__01IA*_01Iz_coeff).reshape((1, 1))

# op _01RO_power_combination_eval
# LANG: _01RN --> _01RP
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03214__01RP = (v03211__01RN**1)
v03214__01RP = (v03214__01RP*_01RO_coeff).reshape((1, 2, 3, 3))

# op _01Tg_power_combination_eval
# LANG: _01Tf --> _01Th
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03258__01Th = (v03257__01Tf**1)
v03258__01Th = (v03258__01Th*_01Tg_coeff).reshape((1, 1))

# op _01Vs_linear_combination_eval
# LANG: _01Vp, _01Vr --> _01Vt
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03330__01Vt = _01Vs_constant+1*v03328__01Vp+1*v03331__01Vr

# op _01Vz_tensor_dot_product_eval
# LANG: rel_obs_position, _01Vy --> normal_proj
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03333_normal_proj = np.sum(v03326_rel_obs_position * v03334__01Vy, axis=1)

# op _01WD_power_combination_eval
# LANG: _01WC --> _01WE
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03357__01WE = (v03356__01WC**2)
v03357__01WE = (v03357__01WE*_01WD_coeff).reshape((1, 2))

# op _01Wg_power_combination_eval
# LANG: _01Wf --> _01Wh
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03361__01Wh = (v03360__01Wf**1)
v03361__01Wh = (v03361__01Wh*_01Wg_coeff).reshape((1,))

# op _01Wi expand_scalar_eval
# LANG: propeller_radius --> _01Wj
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03363__01Wj = np.empty((1,))
v03363__01Wj.fill(v03230_propeller_radius.item())

# op _01Wx expand_scalar_eval
# LANG: _01Ww --> _01Wy
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03353__01Wy = np.empty((1, 2))
v03353__01Wy.fill(v03352__01Ww.item())

# op _01ZB_power_combination_eval
# LANG: _01ZA --> _01ZC
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03446__01ZC = (v03445__01ZA**1)
v03446__01ZC = (v03446__01ZC*_01ZB_coeff).reshape((1, 1))

# op _01r8_power_combination_eval
# LANG: _01q_, _01r7 --> _01r9
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02488__01r9 = (v02487__01q_**1)*(v02494__01r7**-1)
v02488__01r9 = (v02488__01r9*_01r8_coeff).reshape((1,))

# op _01ri_power_combination_eval
# LANG: _01rh --> _01rj
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02500__01rj = (v02499__01rh**4)
v02500__01rj = (v02500__01rj*_01ri_coeff).reshape((1,))

# op _027Q_power_combination_eval
# LANG: _027P --> _027R
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03728__027R = (v03725__027P**1)
v03728__027R = (v03728__027R*_027Q_coeff).reshape((1, 2, 3, 3))

# op _029i_power_combination_eval
# LANG: _029h --> _029j
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03772__029j = (v03771__029h**1)
v03772__029j = (v03772__029j*_029i_coeff).reshape((1, 1))

# op _02bB_tensor_dot_product_eval
# LANG: rel_obs_position, _02bA --> normal_proj
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03847_normal_proj = np.sum(v03840_rel_obs_position * v03848__02bA, axis=1)

# op _02bu_linear_combination_eval
# LANG: _02br, _02bt --> _02bv
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03844__02bv = _02bu_constant+1*v03842__02br+1*v03845__02bt

# op _02cF_power_combination_eval
# LANG: _02cE --> _02cG
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03871__02cG = (v03870__02cE**2)
v03871__02cG = (v03871__02cG*_02cF_coeff).reshape((1, 2))

# op _02ci_power_combination_eval
# LANG: _02ch --> _02cj
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03875__02cj = (v03874__02ch**1)
v03875__02cj = (v03875__02cj*_02ci_coeff).reshape((1,))

# op _02ck expand_scalar_eval
# LANG: propeller_radius --> _02cl
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03877__02cl = np.empty((1,))
v03877__02cl.fill(v03744_propeller_radius.item())

# op _02cz expand_scalar_eval
# LANG: _02cy --> _02cA
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03867__02cA = np.empty((1, 2))
v03867__02cA.fill(v03866__02cy.item())

# op _00JK_power_combination_eval
# LANG: _00JJ, C_real_integrand --> _00JL
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01225__00JL = (v01219__00JJ**1)*(v01250_C_real_integrand**1)
v01225__00JL = (v01225__00JL*_00JK_coeff).reshape((1, 2, 3))

# op _00JW_power_combination_eval
# LANG: _00JV, C_imag_integrand --> _00JX
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01233__00JX = (v01230__00JV**1)*(v01257_C_imag_integrand**1)
v01233__00JX = (v01233__00JX*_00JW_coeff).reshape((1, 2, 3))

# op _00M2_power_combination_eval
# LANG: _00LT --> _00M3
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01295__00M3 = (v01288__00LT**2)
v01295__00M3 = (v01295__00M3*_00M2_coeff).reshape((1, 1))

# op _00M6_power_combination_eval
# LANG: _00LT --> _00M7
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01298__00M7 = (v01288__00LT**2)
v01298__00M7 = (v01298__00M7*_00M6_coeff).reshape((1, 1))

# op _00O5_power_combination_eval
# LANG: _00O4 --> rel_obs_dist
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01362_rel_obs_dist = (v01360__00O4**0.5)
v01362_rel_obs_dist = (v01362_rel_obs_dist*_00O5_coeff).reshape((1, 1, 2))

# op _00OW_power_combination_eval
# LANG: _00OT, _00OV --> _00OX
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01392__00OX = (v01391__00OT**1)*(v01393__00OV**1)
v01392__00OX = (v01392__00OX*_00OW_coeff).reshape((1,))

# op _00Og expand_array_eval
# LANG: normal_proj --> _00Oh
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01365__00Oh = np.einsum('ac,b->abc', v01363_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _00Pa_power_combination_eval
# LANG: _00P9 --> Ab
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01384_Ab = (v01383__00P9**1)
v01384_Ab = (v01384_Ab*_00Pa_coeff).reshape((1, 2))

# op _00Pg_power_combination_eval
# LANG: _00Pf --> _00Ph
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01388__00Ph = (v01387__00Pf**1)
v01388__00Ph = (v01388__00Ph*_00Pg_coeff).reshape((1, 2))

# op _00Sg_power_combination_eval
# LANG: _00S6 --> _00Sh
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01481__00Sh = (v01474__00S6**2)
v01481__00Sh = (v01481__00Sh*_00Sg_coeff).reshape((1, 1))

# op _00Sk_power_combination_eval
# LANG: _00S6 --> _00Sl
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01484__00Sl = (v01474__00S6**2)
v01484__00Sl = (v01484__00Sl*_00Sk_coeff).reshape((1, 1))

# op _00hn_power_combination_eval
# LANG: _00hc, _00hm --> C_T
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0445_C_T = (v0438__00hc**1)*(v0450__00hm**-1)
v0445_C_T = (v0445_C_T*_00hn_coeff).reshape((1,))

# op _00wq_power_combination_eval
# LANG: _00wf, _00wp --> C_T
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0818_C_T = (v0811__00wf**1)*(v0823__00wp**-1)
v0818_C_T = (v0818_C_T*_00wq_coeff).reshape((1,))

# op _00yG_power_combination_eval
# LANG: _00yw --> _00yH
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0885__00yH = (v0878__00yw**2)
v0885__00yH = (v0885__00yH*_00yG_coeff).reshape((1, 1))

# op _00yK_power_combination_eval
# LANG: _00yw --> _00yL
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0888__00yL = (v0878__00yw**2)
v0888__00yL = (v0888__00yL*_00yK_coeff).reshape((1, 1))

# op _012k_power_combination_eval
# LANG: _012j, C_real_integrand --> _012l
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01821__012l = (v01815__012j**1)*(v01846_C_real_integrand**1)
v01821__012l = (v01821__012l*_012k_coeff).reshape((1, 2, 3))

# op _012w_power_combination_eval
# LANG: _012v, C_imag_integrand --> _012x
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01829__012x = (v01826__012v**1)*(v01853_C_imag_integrand**1)
v01829__012x = (v01829__012x*_012w_coeff).reshape((1, 2, 3))

# op _014D_power_combination_eval
# LANG: _014t --> _014E
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01891__014E = (v01884__014t**2)
v01891__014E = (v01891__014E*_014D_coeff).reshape((1, 1))

# op _014H_power_combination_eval
# LANG: _014t --> _014I
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01894__014I = (v01884__014t**2)
v01894__014I = (v01894__014I*_014H_coeff).reshape((1, 1))

# op _016G_power_combination_eval
# LANG: _016F --> rel_obs_dist
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01958_rel_obs_dist = (v01956__016F**0.5)
v01958_rel_obs_dist = (v01958_rel_obs_dist*_016G_coeff).reshape((1, 1, 2))

# op _016R expand_array_eval
# LANG: normal_proj --> _016S
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01961__016S = np.einsum('ac,b->abc', v01959_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _017L_power_combination_eval
# LANG: _017K --> Ab
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01980_Ab = (v01979__017K**1)
v01980_Ab = (v01980_Ab*_017L_coeff).reshape((1, 2))

# op _017R_power_combination_eval
# LANG: _017Q --> _017S
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01984__017S = (v01983__017Q**1)
v01984__017S = (v01984__017S*_017R_coeff).reshape((1, 2))

# op _017w_power_combination_eval
# LANG: _017t, _017v --> _017x
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01988__017x = (v01987__017t**1)*(v01989__017v**1)
v01988__017x = (v01988__017x*_017w_coeff).reshape((1,))

# op _01Gn_power_combination_eval
# LANG: _01Gc, _01Gm --> C_T
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02868_C_T = (v02861__01Gc**1)*(v02873__01Gm**-1)
v02868_C_T = (v02868_C_T*_01Gn_coeff).reshape((1,))

# op _01IK_power_combination_eval
# LANG: _01IA --> _01IL
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02938__01IL = (v02931__01IA**2)
v02938__01IL = (v02938__01IL*_01IK_coeff).reshape((1, 1))

# op _01IO_power_combination_eval
# LANG: _01IA --> _01IP
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02941__01IP = (v02931__01IA**2)
v02941__01IP = (v02941__01IP*_01IO_coeff).reshape((1, 1))

# op _01RQ_log10_eval
# LANG: _01RP --> _01RR
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03215__01RR = np.log10(v03214__01RP)

# op _01Tr_power_combination_eval
# LANG: _01Th --> _01Ts
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03265__01Ts = (v03258__01Th**2)
v03265__01Ts = (v03265__01Ts*_01Tr_coeff).reshape((1, 1))

# op _01Tv_power_combination_eval
# LANG: _01Th --> _01Tw
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03268__01Tw = (v03258__01Th**2)
v03268__01Tw = (v03268__01Tw*_01Tv_coeff).reshape((1, 1))

# op _01VF expand_array_eval
# LANG: normal_proj --> _01VG
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03335__01VG = np.einsum('ac,b->abc', v03333_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _01Vu_power_combination_eval
# LANG: _01Vt --> rel_obs_dist
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03332_rel_obs_dist = (v03330__01Vt**0.5)
v03332_rel_obs_dist = (v03332_rel_obs_dist*_01Vu_coeff).reshape((1, 1, 2))

# op _01WF_power_combination_eval
# LANG: _01WE --> _01WG
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03358__01WG = (v03357__01WE**1)
v03358__01WG = (v03358__01WG*_01WF_coeff).reshape((1, 2))

# op _01Wk_power_combination_eval
# LANG: _01Wh, _01Wj --> _01Wl
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03362__01Wl = (v03361__01Wh**1)*(v03363__01Wj**1)
v03362__01Wl = (v03362__01Wl*_01Wk_coeff).reshape((1,))

# op _01Wz_power_combination_eval
# LANG: _01Wy --> Ab
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03354_Ab = (v03353__01Wy**1)
v03354_Ab = (v03354_Ab*_01Wz_coeff).reshape((1, 2))

# op _01ZM_power_combination_eval
# LANG: _01ZC --> _01ZN
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03453__01ZN = (v03446__01ZC**2)
v03453__01ZN = (v03453__01ZN*_01ZM_coeff).reshape((1, 1))

# op _01ZQ_power_combination_eval
# LANG: _01ZC --> _01ZR
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03456__01ZR = (v03446__01ZC**2)
v03456__01ZR = (v03456__01ZR*_01ZQ_coeff).reshape((1, 1))

# op _01rk_power_combination_eval
# LANG: _01r9, _01rj --> C_T
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02495_C_T = (v02488__01r9**1)*(v02500__01rj**-1)
v02495_C_T = (v02495_C_T*_01rk_coeff).reshape((1,))

# op _027S_log10_eval
# LANG: _027R --> _027T
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03729__027T = np.log10(v03728__027R)

# op _029t_power_combination_eval
# LANG: _029j --> _029u
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03779__029u = (v03772__029j**2)
v03779__029u = (v03779__029u*_029t_coeff).reshape((1, 1))

# op _029x_power_combination_eval
# LANG: _029j --> _029y
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03782__029y = (v03772__029j**2)
v03782__029y = (v03782__029y*_029x_coeff).reshape((1, 1))

# op _02bH expand_array_eval
# LANG: normal_proj --> _02bI
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03849__02bI = np.einsum('ac,b->abc', v03847_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02bw_power_combination_eval
# LANG: _02bv --> rel_obs_dist
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03846_rel_obs_dist = (v03844__02bv**0.5)
v03846_rel_obs_dist = (v03846_rel_obs_dist*_02bw_coeff).reshape((1, 1, 2))

# op _02cB_power_combination_eval
# LANG: _02cA --> Ab
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03868_Ab = (v03867__02cA**1)
v03868_Ab = (v03868_Ab*_02cB_coeff).reshape((1, 2))

# op _02cH_power_combination_eval
# LANG: _02cG --> _02cI
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03872__02cI = (v03871__02cG**1)
v03872__02cI = (v03872__02cI*_02cH_coeff).reshape((1, 2))

# op _02cm_power_combination_eval
# LANG: _02cj, _02cl --> _02cn
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03876__02cn = (v03875__02cj**1)*(v03877__02cl**1)
v03876__02cn = (v03876__02cn*_02cm_coeff).reshape((1,))

# op _00JY_power_combination_eval
# LANG: _00JL --> _00JZ
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01226__00JZ = (v01225__00JL**2)
v01226__00JZ = (v01226__00JZ*_00JY_coeff).reshape((1, 2, 3))

# op _00J__power_combination_eval
# LANG: _00JX --> _00K0
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01234__00K0 = (v01233__00JX**2)
v01234__00K0 = (v01234__00K0*_00J__coeff).reshape((1, 2, 3))

# op _00M4_linear_combination_eval
# LANG: _00M3 --> _00M5
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01296__00M5 = _00M4_constant+1*v01295__00M3

# op _00M8_linear_combination_eval
# LANG: _00M7 --> _00M9
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01299__00M9 = _00M8_constant+1*v01298__00M7

# op _00OY expand_scalar_eval
# LANG: _00OX --> _00OZ
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01394__00OZ = np.empty((1, 2))
v01394__00OZ.fill(v01392__00OX.item())

# op _00Oi_power_combination_eval
# LANG: rel_obs_dist, _00Oh --> _00Oj
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01366__00Oj = (v01365__00Oh**1)*(v01362_rel_obs_dist**-1)
v01366__00Oj = (v01366__00Oj*_00Oi_coeff).reshape((1, 1, 2))

# op _00P0 expand_scalar_eval
# LANG: CT --> _00P1
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01399__00P1 = np.empty((1, 2))
v01399__00P1.fill(v0818_C_T.item())

# op _00Pi_power_combination_eval
# LANG: Ab, _00Ph --> sigma
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01385_sigma = (v01384_Ab**1)*(v01388__00Ph**-1)
v01385_sigma = (v01385_sigma*_00Pi_coeff).reshape((1, 2))

# op _00Si_linear_combination_eval
# LANG: _00Sh --> _00Sj
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01482__00Sj = _00Si_constant+1*v01481__00Sh

# op _00Sm_linear_combination_eval
# LANG: _00Sl --> _00Sn
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01485__00Sn = _00Sm_constant+1*v01484__00Sl

# op _00yI_linear_combination_eval
# LANG: _00yH --> _00yJ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0886__00yJ = _00yI_constant+1*v0885__00yH

# op _00yM_linear_combination_eval
# LANG: _00yL --> _00yN
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0889__00yN = _00yM_constant+1*v0888__00yL

# op _012A_power_combination_eval
# LANG: _012x --> _012B
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01830__012B = (v01829__012x**2)
v01830__012B = (v01830__012B*_012A_coeff).reshape((1, 2, 3))

# op _012y_power_combination_eval
# LANG: _012l --> _012z
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01822__012z = (v01821__012l**2)
v01822__012z = (v01822__012z*_012y_coeff).reshape((1, 2, 3))

# op _014F_linear_combination_eval
# LANG: _014E --> _014G
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01892__014G = _014F_constant+1*v01891__014E

# op _014J_linear_combination_eval
# LANG: _014I --> _014K
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01895__014K = _014J_constant+1*v01894__014I

# op _016T_power_combination_eval
# LANG: rel_obs_dist, _016S --> _016U
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01962__016U = (v01961__016S**1)*(v01958_rel_obs_dist**-1)
v01962__016U = (v01962__016U*_016T_coeff).reshape((1, 1, 2))

# op _017B expand_scalar_eval
# LANG: CT --> _017C
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01995__017C = np.empty((1, 2))
v01995__017C.fill(v0445_C_T.item())

# op _017T_power_combination_eval
# LANG: Ab, _017S --> sigma
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01981_sigma = (v01980_Ab**1)*(v01984__017S**-1)
v01981_sigma = (v01981_sigma*_017T_coeff).reshape((1, 2))

# op _017y expand_scalar_eval
# LANG: _017x --> _017z
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01990__017z = np.empty((1, 2))
v01990__017z.fill(v01988__017x.item())

# op _01IM_linear_combination_eval
# LANG: _01IL --> _01IN
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02939__01IN = _01IM_constant+1*v02938__01IL

# op _01IQ_linear_combination_eval
# LANG: _01IP --> _01IR
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02942__01IR = _01IQ_constant+1*v02941__01IP

# op _01RS_power_combination_eval
# LANG: _01RR --> bladeSPL
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03216_bladeSPL = (v03215__01RR**1)
v03216_bladeSPL = (v03216_bladeSPL*_01RS_coeff).reshape((1, 2, 3, 3))

# op _01Tt_linear_combination_eval
# LANG: _01Ts --> _01Tu
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03266__01Tu = _01Tt_constant+1*v03265__01Ts

# op _01Tx_linear_combination_eval
# LANG: _01Tw --> _01Ty
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03269__01Ty = _01Tx_constant+1*v03268__01Tw

# op _01VH_power_combination_eval
# LANG: rel_obs_dist, _01VG --> _01VI
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03336__01VI = (v03335__01VG**1)*(v03332_rel_obs_dist**-1)
v03336__01VI = (v03336__01VI*_01VH_coeff).reshape((1, 1, 2))

# op _01WH_power_combination_eval
# LANG: Ab, _01WG --> sigma
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03355_sigma = (v03354_Ab**1)*(v03358__01WG**-1)
v03355_sigma = (v03355_sigma*_01WH_coeff).reshape((1, 2))

# op _01Wm expand_scalar_eval
# LANG: _01Wl --> _01Wn
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03364__01Wn = np.empty((1, 2))
v03364__01Wn.fill(v03362__01Wl.item())

# op _01Wp expand_scalar_eval
# LANG: CT --> _01Wq
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03369__01Wq = np.empty((1, 2))
v03369__01Wq.fill(v02868_C_T.item())

# op _01ZO_linear_combination_eval
# LANG: _01ZN --> _01ZP
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03454__01ZP = _01ZO_constant+1*v03453__01ZN

# op _01ZS_linear_combination_eval
# LANG: _01ZR --> _01ZT
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03457__01ZT = _01ZS_constant+1*v03456__01ZR

# op _027U_power_combination_eval
# LANG: _027T --> bladeSPL
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03730_bladeSPL = (v03729__027T**1)
v03730_bladeSPL = (v03730_bladeSPL*_027U_coeff).reshape((1, 2, 3, 3))

# op _029v_linear_combination_eval
# LANG: _029u --> _029w
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03780__029w = _029v_constant+1*v03779__029u

# op _029z_linear_combination_eval
# LANG: _029y --> _029A
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03783__029A = _029z_constant+1*v03782__029y

# op _02bJ_power_combination_eval
# LANG: rel_obs_dist, _02bI --> _02bK
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03850__02bK = (v03849__02bI**1)*(v03846_rel_obs_dist**-1)
v03850__02bK = (v03850__02bK*_02bJ_coeff).reshape((1, 1, 2))

# op _02cJ_power_combination_eval
# LANG: Ab, _02cI --> sigma
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03869_sigma = (v03868_Ab**1)*(v03872__02cI**-1)
v03869_sigma = (v03869_sigma*_02cJ_coeff).reshape((1, 2))

# op _02co expand_scalar_eval
# LANG: _02cn --> _02cp
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03878__02cp = np.empty((1, 2))
v03878__02cp.fill(v03876__02cn.item())

# op _02cr expand_scalar_eval
# LANG: CT --> _02cs
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03883__02cs = np.empty((1, 2))
v03883__02cs.fill(v02495_C_T.item())

# op _00K1_linear_combination_eval
# LANG: _00JZ, _00K0 --> _00K2
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01227__00K2 = _00K1_constant+1*v01226__00JZ+1*v01234__00K0

# op _00LZ_power_combination_eval
# LANG: _00LT --> _00L_
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01292__00L_ = (v01288__00LT**2)
v01292__00L_ = (v01292__00L_*_00LZ_coeff).reshape((1, 1))

# op _00Ma_power_combination_eval
# LANG: _00M5, _00M9 --> _00Mb
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01297__00Mb = (v01296__00M5**1)*(v01299__00M9**1)
v01297__00Mb = (v01297__00Mb*_00Ma_coeff).reshape((1, 1))

# op _00Ok_arcsin_eval
# LANG: _00Oj --> _00Ol
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01367__00Ol = np.arcsin(v01366__00Oj)

# op _00PC_power_combination_eval
# LANG: _00OZ --> _00PD
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01412__00PD = (v01394__00OZ**7.44)
v01412__00PD = (v01412__00PD*_00PC_coeff).reshape((1, 2))

# op _00PE_power_combination_eval
# LANG: Ab --> _00PF
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01414__00PF = (v01384_Ab**0.9)
v01414__00PF = (v01414__00PF*_00PE_coeff).reshape((1, 2))

# op _00PI_power_combination_eval
# LANG: sigma, _00P1 --> _00PJ
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01416__00PJ = (v01399__00P1**1)*(v01385_sigma**-1)
v01416__00PJ = (v01416__00PJ*_00PI_coeff).reshape((1, 2))

# op _00Pk_power_combination_eval
# LANG: _00OZ --> _00Pl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01395__00Pl = (v01394__00OZ**3.68)
v01395__00Pl = (v01395__00Pl*_00Pk_coeff).reshape((1, 2))

# op _00Pm_power_combination_eval
# LANG: Ab --> _00Pn
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01397__00Pn = (v01384_Ab**0.9)
v01397__00Pn = (v01397__00Pn*_00Pm_coeff).reshape((1, 2))

# op _00Pq_power_combination_eval
# LANG: sigma, _00P1 --> _00Pr
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01400__00Pr = (v01399__00P1**1)*(v01385_sigma**-1)
v01400__00Pr = (v01400__00Pr*_00Pq_coeff).reshape((1, 2))

# op _00Sc_power_combination_eval
# LANG: _00S6 --> _00Sd
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01478__00Sd = (v01474__00S6**2)
v01478__00Sd = (v01478__00Sd*_00Sc_coeff).reshape((1, 1))

# op _00So_power_combination_eval
# LANG: _00Sj, _00Sn --> _00Sp
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01483__00Sp = (v01482__00Sj**1)*(v01485__00Sn**1)
v01483__00Sp = (v01483__00Sp*_00So_coeff).reshape((1, 1))

# op _00yC_power_combination_eval
# LANG: _00yw --> _00yD
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0882__00yD = (v0878__00yw**2)
v0882__00yD = (v0882__00yD*_00yC_coeff).reshape((1, 1))

# op _00yO_power_combination_eval
# LANG: _00yJ, _00yN --> _00yP
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0887__00yP = (v0886__00yJ**1)*(v0889__00yN**1)
v0887__00yP = (v0887__00yP*_00yO_coeff).reshape((1, 1))

# op _012C_linear_combination_eval
# LANG: _012z, _012B --> _012D
# SHAPES: (1, 2, 3), (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01823__012D = _012C_constant+1*v01822__012z+1*v01830__012B

# op _014L_power_combination_eval
# LANG: _014G, _014K --> _014M
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01893__014M = (v01892__014G**1)*(v01895__014K**1)
v01893__014M = (v01893__014M*_014L_coeff).reshape((1, 1))

# op _014z_power_combination_eval
# LANG: _014t --> _014A
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01888__014A = (v01884__014t**2)
v01888__014A = (v01888__014A*_014z_coeff).reshape((1, 1))

# op _016V_arcsin_eval
# LANG: _016U --> _016W
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01963__016W = np.arcsin(v01962__016U)

# op _017V_power_combination_eval
# LANG: _017z --> _017W
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01991__017W = (v01990__017z**3.68)
v01991__017W = (v01991__017W*_017V_coeff).reshape((1, 2))

# op _017X_power_combination_eval
# LANG: Ab --> _017Y
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01993__017Y = (v01980_Ab**0.9)
v01993__017Y = (v01993__017Y*_017X_coeff).reshape((1, 2))

# op _0180_power_combination_eval
# LANG: sigma, _017C --> _0181
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01996__0181 = (v01995__017C**1)*(v01981_sigma**-1)
v01996__0181 = (v01996__0181*_0180_coeff).reshape((1, 2))

# op _018c_power_combination_eval
# LANG: _017z --> _018d
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02008__018d = (v01990__017z**7.44)
v02008__018d = (v02008__018d*_018c_coeff).reshape((1, 2))

# op _018e_power_combination_eval
# LANG: Ab --> _018f
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02010__018f = (v01980_Ab**0.9)
v02010__018f = (v02010__018f*_018e_coeff).reshape((1, 2))

# op _018i_power_combination_eval
# LANG: sigma, _017C --> _018j
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02012__018j = (v01995__017C**1)*(v01981_sigma**-1)
v02012__018j = (v02012__018j*_018i_coeff).reshape((1, 2))

# op _01IG_power_combination_eval
# LANG: _01IA --> _01IH
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02935__01IH = (v02931__01IA**2)
v02935__01IH = (v02935__01IH*_01IG_coeff).reshape((1, 1))

# op _01IS_power_combination_eval
# LANG: _01IN, _01IR --> _01IT
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02940__01IT = (v02939__01IN**1)*(v02942__01IR**1)
v02940__01IT = (v02940__01IT*_01IS_coeff).reshape((1, 1))

# op _01RU_power_combination_eval
# LANG: bladeSPL --> _01RV
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03217__01RV = (v03216_bladeSPL**1)
v03217__01RV = (v03217__01RV*_01RU_coeff).reshape((1, 2, 3, 3))

# op _01Tn_power_combination_eval
# LANG: _01Th --> _01To
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03262__01To = (v03258__01Th**2)
v03262__01To = (v03262__01To*_01Tn_coeff).reshape((1, 1))

# op _01Tz_power_combination_eval
# LANG: _01Tu, _01Ty --> _01TA
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03267__01TA = (v03266__01Tu**1)*(v03269__01Ty**1)
v03267__01TA = (v03267__01TA*_01Tz_coeff).reshape((1, 1))

# op _01VJ_arcsin_eval
# LANG: _01VI --> _01VK
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03337__01VK = np.arcsin(v03336__01VI)

# op _01WJ_power_combination_eval
# LANG: _01Wn --> _01WK
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03365__01WK = (v03364__01Wn**3.68)
v03365__01WK = (v03365__01WK*_01WJ_coeff).reshape((1, 2))

# op _01WL_power_combination_eval
# LANG: Ab --> _01WM
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03367__01WM = (v03354_Ab**0.9)
v03367__01WM = (v03367__01WM*_01WL_coeff).reshape((1, 2))

# op _01WP_power_combination_eval
# LANG: sigma, _01Wq --> _01WQ
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03370__01WQ = (v03369__01Wq**1)*(v03355_sigma**-1)
v03370__01WQ = (v03370__01WQ*_01WP_coeff).reshape((1, 2))

# op _01X0_power_combination_eval
# LANG: _01Wn --> _01X1
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03382__01X1 = (v03364__01Wn**7.44)
v03382__01X1 = (v03382__01X1*_01X0_coeff).reshape((1, 2))

# op _01X2_power_combination_eval
# LANG: Ab --> _01X3
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03384__01X3 = (v03354_Ab**0.9)
v03384__01X3 = (v03384__01X3*_01X2_coeff).reshape((1, 2))

# op _01X6_power_combination_eval
# LANG: sigma, _01Wq --> _01X7
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03386__01X7 = (v03369__01Wq**1)*(v03355_sigma**-1)
v03386__01X7 = (v03386__01X7*_01X6_coeff).reshape((1, 2))

# op _01ZI_power_combination_eval
# LANG: _01ZC --> _01ZJ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03450__01ZJ = (v03446__01ZC**2)
v03450__01ZJ = (v03450__01ZJ*_01ZI_coeff).reshape((1, 1))

# op _01ZU_power_combination_eval
# LANG: _01ZP, _01ZT --> _01ZV
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03455__01ZV = (v03454__01ZP**1)*(v03457__01ZT**1)
v03455__01ZV = (v03455__01ZV*_01ZU_coeff).reshape((1, 1))

# op _027W_power_combination_eval
# LANG: bladeSPL --> _027X
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03731__027X = (v03730_bladeSPL**1)
v03731__027X = (v03731__027X*_027W_coeff).reshape((1, 2, 3, 3))

# op _029B_power_combination_eval
# LANG: _029w, _029A --> _029C
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03781__029C = (v03780__029w**1)*(v03783__029A**1)
v03781__029C = (v03781__029C*_029B_coeff).reshape((1, 1))

# op _029p_power_combination_eval
# LANG: _029j --> _029q
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03776__029q = (v03772__029j**2)
v03776__029q = (v03776__029q*_029p_coeff).reshape((1, 1))

# op _02bL_arcsin_eval
# LANG: _02bK --> _02bM
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03851__02bM = np.arcsin(v03850__02bK)

# op _02cL_power_combination_eval
# LANG: _02cp --> _02cM
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03879__02cM = (v03878__02cp**3.68)
v03879__02cM = (v03879__02cM*_02cL_coeff).reshape((1, 2))

# op _02cN_power_combination_eval
# LANG: Ab --> _02cO
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03881__02cO = (v03868_Ab**0.9)
v03881__02cO = (v03881__02cO*_02cN_coeff).reshape((1, 2))

# op _02cR_power_combination_eval
# LANG: sigma, _02cs --> _02cS
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03884__02cS = (v03883__02cs**1)*(v03869_sigma**-1)
v03884__02cS = (v03884__02cS*_02cR_coeff).reshape((1, 2))

# op _02d2_power_combination_eval
# LANG: _02cp --> _02d3
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03896__02d3 = (v03878__02cp**7.44)
v03896__02d3 = (v03896__02d3*_02d2_coeff).reshape((1, 2))

# op _02d4_power_combination_eval
# LANG: Ab --> _02d5
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03898__02d5 = (v03868_Ab**0.9)
v03898__02d5 = (v03898__02d5*_02d4_coeff).reshape((1, 2))

# op _02d8_power_combination_eval
# LANG: sigma, _02cs --> _02d9
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03900__02d9 = (v03883__02cs**1)*(v03869_sigma**-1)
v03900__02d9 = (v03900__02d9*_02d8_coeff).reshape((1, 2))

# op _00K3_power_combination_eval
# LANG: _00K2 --> _00K4
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01235__00K4 = (v01227__00K2**1)
v01235__00K4 = (v01235__00K4*_00K3_coeff).reshape((1, 2, 3))

# op _00M0_linear_combination_eval
# LANG: _00L_ --> _00M1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01293__00M1 = _00M0_constant+1*v01292__00L_

# op _00Mc_power_combination_eval
# LANG: _00Mb --> _00Md
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01300__00Md = (v01297__00Mb**0.5)
v01300__00Md = (v01300__00Md*_00Mc_coeff).reshape((1, 1))

# op _00Mg_power_combination_eval
# LANG: _00LT --> _00Mh
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01302__00Mh = (v01288__00LT**2)
v01302__00Mh = (v01302__00Mh*_00Mg_coeff).reshape((1, 1))

# op _00Os reshape_eval
# LANG: _00Ol --> rel_angle_plane
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01368_rel_angle_plane = v01367__00Ol.reshape((1, 2))

# op _00PG_power_combination_eval
# LANG: _00PD, _00PF --> _00PH
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01413__00PH = (v01412__00PD**1)*(v01414__00PF**1)
v01413__00PH = (v01413__00PH*_00PG_coeff).reshape((1, 2))

# op _00PK_power_combination_eval
# LANG: _00PJ --> _00PL
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01417__00PL = (v01416__00PJ**1.6)
v01417__00PL = (v01417__00PL*_00PK_coeff).reshape((1, 2))

# op _00PU_linear_combination_eval
# LANG: Ab --> _00PV
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01406__00PV = _00PU_constant+-1*v01384_Ab

# op _00Po_power_combination_eval
# LANG: _00Pl, _00Pn --> _00Pp
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01396__00Pp = (v01395__00Pl**1)*(v01397__00Pn**1)
v01396__00Pp = (v01396__00Pp*_00Po_coeff).reshape((1, 2))

# op _00Ps_power_combination_eval
# LANG: _00Pr --> _00Pt
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01401__00Pt = (v01400__00Pr**1.6)
v01401__00Pt = (v01401__00Pt*_00Ps_coeff).reshape((1, 2))

# op _00Q5_linear_combination_eval
# LANG: Ab --> _00Q6
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01422__00Q6 = _00Q5_constant+1*v01384_Ab

# op _00Se_linear_combination_eval
# LANG: _00Sd --> _00Sf
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01479__00Sf = _00Se_constant+1*v01478__00Sd

# op _00Sq_power_combination_eval
# LANG: _00Sp --> _00Sr
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01486__00Sr = (v01483__00Sp**0.5)
v01486__00Sr = (v01486__00Sr*_00Sq_coeff).reshape((1, 1))

# op _00Su_power_combination_eval
# LANG: _00S6 --> _00Sv
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01488__00Sv = (v01474__00S6**2)
v01488__00Sv = (v01488__00Sv*_00Su_coeff).reshape((1, 1))

# op _00yE_linear_combination_eval
# LANG: _00yD --> _00yF
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0883__00yF = _00yE_constant+1*v0882__00yD

# op _00yQ_power_combination_eval
# LANG: _00yP --> _00yR
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0890__00yR = (v0887__00yP**0.5)
v0890__00yR = (v0890__00yR*_00yQ_coeff).reshape((1, 1))

# op _00yU_power_combination_eval
# LANG: _00yw --> _00yV
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0892__00yV = (v0878__00yw**2)
v0892__00yV = (v0892__00yV*_00yU_coeff).reshape((1, 1))

# op _012E_power_combination_eval
# LANG: _012D --> _012F
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01831__012F = (v01823__012D**1)
v01831__012F = (v01831__012F*_012E_coeff).reshape((1, 2, 3))

# op _014B_linear_combination_eval
# LANG: _014A --> _014C
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01889__014C = _014B_constant+1*v01888__014A

# op _014N_power_combination_eval
# LANG: _014M --> _014O
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01896__014O = (v01893__014M**0.5)
v01896__014O = (v01896__014O*_014N_coeff).reshape((1, 1))

# op _014R_power_combination_eval
# LANG: _014t --> _014S
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01898__014S = (v01884__014t**2)
v01898__014S = (v01898__014S*_014R_coeff).reshape((1, 1))

# op _0172 reshape_eval
# LANG: _016W --> rel_angle_plane
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01964_rel_angle_plane = v01963__016W.reshape((1, 2))

# op _017Z_power_combination_eval
# LANG: _017W, _017Y --> _017_
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01992__017_ = (v01991__017W**1)*(v01993__017Y**1)
v01992__017_ = (v01992__017_*_017Z_coeff).reshape((1, 2))

# op _0182_power_combination_eval
# LANG: _0181 --> _0183
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01997__0183 = (v01996__0181**1.6)
v01997__0183 = (v01997__0183*_0182_coeff).reshape((1, 2))

# op _018G_linear_combination_eval
# LANG: Ab --> _018H
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02018__018H = _018G_constant+1*v01980_Ab

# op _018g_power_combination_eval
# LANG: _018d, _018f --> _018h
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02009__018h = (v02008__018d**1)*(v02010__018f**1)
v02009__018h = (v02009__018h*_018g_coeff).reshape((1, 2))

# op _018k_power_combination_eval
# LANG: _018j --> _018l
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02013__018l = (v02012__018j**1.6)
v02013__018l = (v02013__018l*_018k_coeff).reshape((1, 2))

# op _018u_linear_combination_eval
# LANG: Ab --> _018v
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02002__018v = _018u_constant+-1*v01980_Ab

# op _01II_linear_combination_eval
# LANG: _01IH --> _01IJ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02936__01IJ = _01II_constant+1*v02935__01IH

# op _01IU_power_combination_eval
# LANG: _01IT --> _01IV
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02943__01IV = (v02940__01IT**0.5)
v02943__01IV = (v02943__01IV*_01IU_coeff).reshape((1, 1))

# op _01IY_power_combination_eval
# LANG: _01IA --> _01IZ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02945__01IZ = (v02931__01IA**2)
v02945__01IZ = (v02945__01IZ*_01IY_coeff).reshape((1, 1))

# op _01RW_exp_a_eval
# LANG: _01RV --> _01RX
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03218__01RX = _01RW_exp_a_eval_a**v03217__01RV

# op _01TB_power_combination_eval
# LANG: _01TA --> _01TC
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03270__01TC = (v03267__01TA**0.5)
v03270__01TC = (v03270__01TC*_01TB_coeff).reshape((1, 1))

# op _01TF_power_combination_eval
# LANG: _01Th --> _01TG
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03272__01TG = (v03258__01Th**2)
v03272__01TG = (v03272__01TG*_01TF_coeff).reshape((1, 1))

# op _01Tp_linear_combination_eval
# LANG: _01To --> _01Tq
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03263__01Tq = _01Tp_constant+1*v03262__01To

# op _01VR reshape_eval
# LANG: _01VK --> rel_angle_plane
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03338_rel_angle_plane = v03337__01VK.reshape((1, 2))

# op _01WN_power_combination_eval
# LANG: _01WK, _01WM --> _01WO
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03366__01WO = (v03365__01WK**1)*(v03367__01WM**1)
v03366__01WO = (v03366__01WO*_01WN_coeff).reshape((1, 2))

# op _01WR_power_combination_eval
# LANG: _01WQ --> _01WS
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03371__01WS = (v03370__01WQ**1.6)
v03371__01WS = (v03371__01WS*_01WR_coeff).reshape((1, 2))

# op _01X4_power_combination_eval
# LANG: _01X1, _01X3 --> _01X5
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03383__01X5 = (v03382__01X1**1)*(v03384__01X3**1)
v03383__01X5 = (v03383__01X5*_01X4_coeff).reshape((1, 2))

# op _01X8_power_combination_eval
# LANG: _01X7 --> _01X9
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03387__01X9 = (v03386__01X7**1.6)
v03387__01X9 = (v03387__01X9*_01X8_coeff).reshape((1, 2))

# op _01Xi_linear_combination_eval
# LANG: Ab --> _01Xj
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03376__01Xj = _01Xi_constant+-1*v03354_Ab

# op _01Xu_linear_combination_eval
# LANG: Ab --> _01Xv
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03392__01Xv = _01Xu_constant+1*v03354_Ab

# op _01ZK_linear_combination_eval
# LANG: _01ZJ --> _01ZL
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03451__01ZL = _01ZK_constant+1*v03450__01ZJ

# op _01ZW_power_combination_eval
# LANG: _01ZV --> _01ZX
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03458__01ZX = (v03455__01ZV**0.5)
v03458__01ZX = (v03458__01ZX*_01ZW_coeff).reshape((1, 1))

# op _01Z__power_combination_eval
# LANG: _01ZC --> _01_0
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03460__01_0 = (v03446__01ZC**2)
v03460__01_0 = (v03460__01_0*_01Z__coeff).reshape((1, 1))

# op _027Y_exp_a_eval
# LANG: _027X --> _027Z
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03732__027Z = _027Y_exp_a_eval_a**v03731__027X

# op _029D_power_combination_eval
# LANG: _029C --> _029E
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03784__029E = (v03781__029C**0.5)
v03784__029E = (v03784__029E*_029D_coeff).reshape((1, 1))

# op _029H_power_combination_eval
# LANG: _029j --> _029I
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03786__029I = (v03772__029j**2)
v03786__029I = (v03786__029I*_029H_coeff).reshape((1, 1))

# op _029r_linear_combination_eval
# LANG: _029q --> _029s
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03777__029s = _029r_constant+1*v03776__029q

# op _02bT reshape_eval
# LANG: _02bM --> rel_angle_plane
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03852_rel_angle_plane = v03851__02bM.reshape((1, 2))

# op _02cP_power_combination_eval
# LANG: _02cM, _02cO --> _02cQ
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03880__02cQ = (v03879__02cM**1)*(v03881__02cO**1)
v03880__02cQ = (v03880__02cQ*_02cP_coeff).reshape((1, 2))

# op _02cT_power_combination_eval
# LANG: _02cS --> _02cU
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03885__02cU = (v03884__02cS**1.6)
v03885__02cU = (v03885__02cU*_02cT_coeff).reshape((1, 2))

# op _02d6_power_combination_eval
# LANG: _02d3, _02d5 --> _02d7
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03897__02d7 = (v03896__02d3**1)*(v03898__02d5**1)
v03897__02d7 = (v03897__02d7*_02d6_coeff).reshape((1, 2))

# op _02da_power_combination_eval
# LANG: _02d9 --> _02db
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03901__02db = (v03900__02d9**1.6)
v03901__02db = (v03901__02db*_02da_coeff).reshape((1, 2))

# op _02dk_linear_combination_eval
# LANG: Ab --> _02dl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03890__02dl = _02dk_constant+-1*v03868_Ab

# op _02dw_linear_combination_eval
# LANG: Ab --> _02dx
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03906__02dx = _02dw_constant+1*v03868_Ab

# op _00K5_power_combination_eval
# LANG: _00K4 --> _00K6
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01236__00K6 = (v01235__00K4**1)
v01236__00K6 = (v01236__00K6*_00K5_coeff).reshape((1, 2, 3))

# op _00LV_power_combination_eval
# LANG: _00LT --> _00LW
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01289__00LW = (v01288__00LT**4)
v01289__00LW = (v01289__00LW*_00LV_coeff).reshape((1, 1))

# op _00Me_power_combination_eval
# LANG: _00M1, _00Md --> _00Mf
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01294__00Mf = (v01293__00M1**1)*(v01300__00Md**1)
v01294__00Mf = (v01294__00Mf*_00Me_coeff).reshape((1, 1))

# op _00Mi_linear_combination_eval
# LANG: _00Mh --> _00Mj
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01303__00Mj = _00Mi_constant+1*v01302__00Mh

# op _00PM_power_combination_eval
# LANG: _00PH, _00PL --> _00PN
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01415__00PN = (v01413__00PH**1)*(v01417__00PL**1)
v01415__00PN = (v01415__00PN*_00PM_coeff).reshape((1, 2))

# op _00PW_power_combination_eval
# LANG: _00PV --> _00PX
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01407__00PX = (v01406__00PV**1)
v01407__00PX = (v01407__00PX*_00PW_coeff).reshape((1, 2))

# op _00Pu_power_combination_eval
# LANG: _00Pp, _00Pt --> _00Pv
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01398__00Pv = (v01396__00Pp**1)*(v01401__00Pt**1)
v01398__00Pv = (v01398__00Pv*_00Pu_coeff).reshape((1, 2))

# op _00Q7_power_combination_eval
# LANG: _00Q6 --> _00Q8
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01423__00Q8 = (v01422__00Q6**1)
v01423__00Q8 = (v01423__00Q8*_00Q7_coeff).reshape((1, 2))

# op _00QI_power_combination_eval
# LANG: rel_angle_plane --> _00QJ
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01439__00QJ = (v01368_rel_angle_plane**2)
v01439__00QJ = (v01439__00QJ*_00QI_coeff).reshape((1, 2))

# op _00S8_power_combination_eval
# LANG: _00S6 --> _00S9
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01475__00S9 = (v01474__00S6**4)
v01475__00S9 = (v01475__00S9*_00S8_coeff).reshape((1, 1))

# op _00Ss_power_combination_eval
# LANG: _00Sf, _00Sr --> _00St
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01480__00St = (v01479__00Sf**1)*(v01486__00Sr**1)
v01480__00St = (v01480__00St*_00Ss_coeff).reshape((1, 1))

# op _00Sw_linear_combination_eval
# LANG: _00Sv --> _00Sx
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01489__00Sx = _00Sw_constant+1*v01488__00Sv

# op _00yS_power_combination_eval
# LANG: _00yF, _00yR --> _00yT
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0884__00yT = (v0883__00yF**1)*(v0890__00yR**1)
v0884__00yT = (v0884__00yT*_00yS_coeff).reshape((1, 1))

# op _00yW_linear_combination_eval
# LANG: _00yV --> _00yX
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0893__00yX = _00yW_constant+1*v0892__00yV

# op _00yy_power_combination_eval
# LANG: _00yw --> _00yz
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0879__00yz = (v0878__00yw**4)
v0879__00yz = (v0879__00yz*_00yy_coeff).reshape((1, 1))

# op _012G_power_combination_eval
# LANG: _012F --> _012H
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01832__012H = (v01831__012F**1)
v01832__012H = (v01832__012H*_012G_coeff).reshape((1, 2, 3))

# op _014P_power_combination_eval
# LANG: _014C, _014O --> _014Q
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01890__014Q = (v01889__014C**1)*(v01896__014O**1)
v01890__014Q = (v01890__014Q*_014P_coeff).reshape((1, 1))

# op _014T_linear_combination_eval
# LANG: _014S --> _014U
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01899__014U = _014T_constant+1*v01898__014S

# op _014v_power_combination_eval
# LANG: _014t --> _014w
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01885__014w = (v01884__014t**4)
v01885__014w = (v01885__014w*_014v_coeff).reshape((1, 1))

# op _0184_power_combination_eval
# LANG: _017_, _0183 --> _0185
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01994__0185 = (v01992__017_**1)*(v01997__0183**1)
v01994__0185 = (v01994__0185*_0184_coeff).reshape((1, 2))

# op _018I_power_combination_eval
# LANG: _018H --> _018J
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02019__018J = (v02018__018H**1)
v02019__018J = (v02019__018J*_018I_coeff).reshape((1, 2))

# op _018m_power_combination_eval
# LANG: _018h, _018l --> _018n
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02011__018n = (v02009__018h**1)*(v02013__018l**1)
v02011__018n = (v02011__018n*_018m_coeff).reshape((1, 2))

# op _018w_power_combination_eval
# LANG: _018v --> _018x
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02003__018x = (v02002__018v**1)
v02003__018x = (v02003__018x*_018w_coeff).reshape((1, 2))

# op _019i_power_combination_eval
# LANG: rel_angle_plane --> _019j
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02035__019j = (v01964_rel_angle_plane**2)
v02035__019j = (v02035__019j*_019i_coeff).reshape((1, 2))

# op _01IC_power_combination_eval
# LANG: _01IA --> _01ID
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02932__01ID = (v02931__01IA**4)
v02932__01ID = (v02932__01ID*_01IC_coeff).reshape((1, 1))

# op _01IW_power_combination_eval
# LANG: _01IJ, _01IV --> _01IX
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02937__01IX = (v02936__01IJ**1)*(v02943__01IV**1)
v02937__01IX = (v02937__01IX*_01IW_coeff).reshape((1, 1))

# op _01I__linear_combination_eval
# LANG: _01IZ --> _01J0
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02946__01J0 = _01I__constant+1*v02945__01IZ

# op _01RY_single_tensor_sum_with_axis_eval
# LANG: _01RX --> _01RZ
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03219__01RZ = np.sum(v03218__01RX, axis = (3,)).reshape((1, 2, 3))

# op _01TD_power_combination_eval
# LANG: _01Tq, _01TC --> _01TE
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03264__01TE = (v03263__01Tq**1)*(v03270__01TC**1)
v03264__01TE = (v03264__01TE*_01TD_coeff).reshape((1, 1))

# op _01TH_linear_combination_eval
# LANG: _01TG --> _01TI
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03273__01TI = _01TH_constant+1*v03272__01TG

# op _01Tj_power_combination_eval
# LANG: _01Th --> _01Tk
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03259__01Tk = (v03258__01Th**4)
v03259__01Tk = (v03259__01Tk*_01Tj_coeff).reshape((1, 1))

# op _01WT_power_combination_eval
# LANG: _01WO, _01WS --> _01WU
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03368__01WU = (v03366__01WO**1)*(v03371__01WS**1)
v03368__01WU = (v03368__01WU*_01WT_coeff).reshape((1, 2))

# op _01Xa_power_combination_eval
# LANG: _01X5, _01X9 --> _01Xb
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03385__01Xb = (v03383__01X5**1)*(v03387__01X9**1)
v03385__01Xb = (v03385__01Xb*_01Xa_coeff).reshape((1, 2))

# op _01Xk_power_combination_eval
# LANG: _01Xj --> _01Xl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03377__01Xl = (v03376__01Xj**1)
v03377__01Xl = (v03377__01Xl*_01Xk_coeff).reshape((1, 2))

# op _01Xw_power_combination_eval
# LANG: _01Xv --> _01Xx
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03393__01Xx = (v03392__01Xv**1)
v03393__01Xx = (v03393__01Xx*_01Xw_coeff).reshape((1, 2))

# op _01Y6_power_combination_eval
# LANG: rel_angle_plane --> _01Y7
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03409__01Y7 = (v03338_rel_angle_plane**2)
v03409__01Y7 = (v03409__01Y7*_01Y6_coeff).reshape((1, 2))

# op _01ZE_power_combination_eval
# LANG: _01ZC --> _01ZF
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03447__01ZF = (v03446__01ZC**4)
v03447__01ZF = (v03447__01ZF*_01ZE_coeff).reshape((1, 1))

# op _01ZY_power_combination_eval
# LANG: _01ZL, _01ZX --> _01ZZ
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03452__01ZZ = (v03451__01ZL**1)*(v03458__01ZX**1)
v03452__01ZZ = (v03452__01ZZ*_01ZY_coeff).reshape((1, 1))

# op _01_1_linear_combination_eval
# LANG: _01_0 --> _01_2
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03461__01_2 = _01_1_constant+1*v03460__01_0

# op _027__single_tensor_sum_with_axis_eval
# LANG: _027Z --> _0280
# SHAPES: (1, 2, 3, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03733__0280 = np.sum(v03732__027Z, axis = (3,)).reshape((1, 2, 3))

# op _029F_power_combination_eval
# LANG: _029s, _029E --> _029G
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03778__029G = (v03777__029s**1)*(v03784__029E**1)
v03778__029G = (v03778__029G*_029F_coeff).reshape((1, 1))

# op _029J_linear_combination_eval
# LANG: _029I --> _029K
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03787__029K = _029J_constant+1*v03786__029I

# op _029l_power_combination_eval
# LANG: _029j --> _029m
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03773__029m = (v03772__029j**4)
v03773__029m = (v03773__029m*_029l_coeff).reshape((1, 1))

# op _02cV_power_combination_eval
# LANG: _02cQ, _02cU --> _02cW
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03882__02cW = (v03880__02cQ**1)*(v03885__02cU**1)
v03882__02cW = (v03882__02cW*_02cV_coeff).reshape((1, 2))

# op _02dc_power_combination_eval
# LANG: _02d7, _02db --> _02dd
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03899__02dd = (v03897__02d7**1)*(v03901__02db**1)
v03899__02dd = (v03899__02dd*_02dc_coeff).reshape((1, 2))

# op _02dm_power_combination_eval
# LANG: _02dl --> _02dn
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03891__02dn = (v03890__02dl**1)
v03891__02dn = (v03891__02dn*_02dm_coeff).reshape((1, 2))

# op _02dy_power_combination_eval
# LANG: _02dx --> _02dz
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03907__02dz = (v03906__02dx**1)
v03907__02dz = (v03907__02dz*_02dy_coeff).reshape((1, 2))

# op _02e8_power_combination_eval
# LANG: rel_angle_plane --> _02e9
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03923__02e9 = (v03852_rel_angle_plane**2)
v03923__02e9 = (v03923__02e9*_02e8_coeff).reshape((1, 2))

# op _00K7_log10_eval
# LANG: _00K6 --> _00K8
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01237__00K8 = np.log10(v01236__00K6)

# op _00LX_power_combination_eval
# LANG: _00LW --> _00LY
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01290__00LY = (v01289__00LW**1)
v01290__00LY = (v01290__00LY*_00LX_coeff).reshape((1, 1))

# op _00Mk_power_combination_eval
# LANG: _00Mf, _00Mj --> _00Ml
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01301__00Ml = (v01294__00Mf**1)*(v01303__00Mj**1)
v01301__00Ml = (v01301__00Ml*_00Mk_coeff).reshape((1, 1))

# op _00PO_log10_eval
# LANG: _00PN --> _00PP
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01418__00PP = np.log10(v01415__00PN)

# op _00PY_tanh_eval
# LANG: _00PX --> _00PZ
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01408__00PZ = np.tanh(v01407__00PX)

# op _00Pw_log10_eval
# LANG: _00Pv --> _00Px
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01402__00Px = np.log10(v01398__00Pv)

# op _00Q9_tanh_eval
# LANG: _00Q8 --> _00Qa
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01424__00Qa = np.tanh(v01423__00Q8)

# op _00QK_power_combination_eval
# LANG: _00QJ --> _00QL
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01440__00QL = (v01439__00QJ**0.5)
v01440__00QL = (v01440__00QL*_00QK_coeff).reshape((1, 2))

# op _00Sa_power_combination_eval
# LANG: _00S9 --> _00Sb
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01476__00Sb = (v01475__00S9**1)
v01476__00Sb = (v01476__00Sb*_00Sa_coeff).reshape((1, 1))

# op _00Sy_power_combination_eval
# LANG: _00St, _00Sx --> _00Sz
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01487__00Sz = (v01480__00St**1)*(v01489__00Sx**1)
v01487__00Sz = (v01487__00Sz*_00Sy_coeff).reshape((1, 1))

# op _00yA_power_combination_eval
# LANG: _00yz --> _00yB
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0880__00yB = (v0879__00yz**1)
v0880__00yB = (v0880__00yB*_00yA_coeff).reshape((1, 1))

# op _00yY_power_combination_eval
# LANG: _00yT, _00yX --> _00yZ
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0891__00yZ = (v0884__00yT**1)*(v0893__00yX**1)
v0891__00yZ = (v0891__00yZ*_00yY_coeff).reshape((1, 1))

# op _012I_log10_eval
# LANG: _012H --> _012J
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01833__012J = np.log10(v01832__012H)

# op _014V_power_combination_eval
# LANG: _014Q, _014U --> _014W
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01897__014W = (v01890__014Q**1)*(v01899__014U**1)
v01897__014W = (v01897__014W*_014V_coeff).reshape((1, 1))

# op _014x_power_combination_eval
# LANG: _014w --> _014y
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01886__014y = (v01885__014w**1)
v01886__014y = (v01886__014y*_014x_coeff).reshape((1, 1))

# op _0186_log10_eval
# LANG: _0185 --> _0187
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01998__0187 = np.log10(v01994__0185)

# op _018K_tanh_eval
# LANG: _018J --> _018L
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02020__018L = np.tanh(v02019__018J)

# op _018o_log10_eval
# LANG: _018n --> _018p
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02014__018p = np.log10(v02011__018n)

# op _018y_tanh_eval
# LANG: _018x --> _018z
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02004__018z = np.tanh(v02003__018x)

# op _019k_power_combination_eval
# LANG: _019j --> _019l
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02036__019l = (v02035__019j**0.5)
v02036__019l = (v02036__019l*_019k_coeff).reshape((1, 2))

# op _01IE_power_combination_eval
# LANG: _01ID --> _01IF
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02933__01IF = (v02932__01ID**1)
v02933__01IF = (v02933__01IF*_01IE_coeff).reshape((1, 1))

# op _01J1_power_combination_eval
# LANG: _01IX, _01J0 --> _01J2
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02944__01J2 = (v02937__01IX**1)*(v02946__01J0**1)
v02944__01J2 = (v02944__01J2*_01J1_coeff).reshape((1, 1))

# op _01R__log10_eval
# LANG: _01RZ --> _01S0
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03220__01S0 = np.log10(v03219__01RZ)

# op _01TJ_power_combination_eval
# LANG: _01TE, _01TI --> _01TK
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03271__01TK = (v03264__01TE**1)*(v03273__01TI**1)
v03271__01TK = (v03271__01TK*_01TJ_coeff).reshape((1, 1))

# op _01Tl_power_combination_eval
# LANG: _01Tk --> _01Tm
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03260__01Tm = (v03259__01Tk**1)
v03260__01Tm = (v03260__01Tm*_01Tl_coeff).reshape((1, 1))

# op _01WV_log10_eval
# LANG: _01WU --> _01WW
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03372__01WW = np.log10(v03368__01WU)

# op _01Xc_log10_eval
# LANG: _01Xb --> _01Xd
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03388__01Xd = np.log10(v03385__01Xb)

# op _01Xm_tanh_eval
# LANG: _01Xl --> _01Xn
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03378__01Xn = np.tanh(v03377__01Xl)

# op _01Xy_tanh_eval
# LANG: _01Xx --> _01Xz
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03394__01Xz = np.tanh(v03393__01Xx)

# op _01Y8_power_combination_eval
# LANG: _01Y7 --> _01Y9
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03410__01Y9 = (v03409__01Y7**0.5)
v03410__01Y9 = (v03410__01Y9*_01Y8_coeff).reshape((1, 2))

# op _01ZG_power_combination_eval
# LANG: _01ZF --> _01ZH
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03448__01ZH = (v03447__01ZF**1)
v03448__01ZH = (v03448__01ZH*_01ZG_coeff).reshape((1, 1))

# op _01_3_power_combination_eval
# LANG: _01ZZ, _01_2 --> _01_4
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03459__01_4 = (v03452__01ZZ**1)*(v03461__01_2**1)
v03459__01_4 = (v03459__01_4*_01_3_coeff).reshape((1, 1))

# op _0281_log10_eval
# LANG: _0280 --> _0282
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03734__0282 = np.log10(v03733__0280)

# op _029L_power_combination_eval
# LANG: _029G, _029K --> _029M
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03785__029M = (v03778__029G**1)*(v03787__029K**1)
v03785__029M = (v03785__029M*_029L_coeff).reshape((1, 1))

# op _029n_power_combination_eval
# LANG: _029m --> _029o
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03774__029o = (v03773__029m**1)
v03774__029o = (v03774__029o*_029n_coeff).reshape((1, 1))

# op _02cX_log10_eval
# LANG: _02cW --> _02cY
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03886__02cY = np.log10(v03882__02cW)

# op _02dA_tanh_eval
# LANG: _02dz --> _02dB
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03908__02dB = np.tanh(v03907__02dz)

# op _02de_log10_eval
# LANG: _02dd --> _02df
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03902__02df = np.log10(v03899__02dd)

# op _02do_tanh_eval
# LANG: _02dn --> _02dp
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03892__02dp = np.tanh(v03891__02dn)

# op _02ea_power_combination_eval
# LANG: _02e9 --> _02eb
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03924__02eb = (v03923__02e9**0.5)
v03924__02eb = (v03924__02eb*_02ea_coeff).reshape((1, 2))

# op _00K9_power_combination_eval
# LANG: _00K8 --> _00Ka
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01238__00Ka = (v01237__00K8**1)
v01238__00Ka = (v01238__00Ka*_00K9_coeff).reshape((1, 2, 3))

# op _00Mm_power_combination_eval
# LANG: _00LY, _00Ml --> _00Mn
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01291__00Mn = (v01290__00LY**1)*(v01301__00Ml**-1)
v01291__00Mn = (v01291__00Mn*_00Mm_coeff).reshape((1, 1))

# op _00PQ_power_combination_eval
# LANG: _00PP --> _00PR
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01419__00PR = (v01418__00PP**1)
v01419__00PR = (v01419__00PR*_00PQ_coeff).reshape((1, 2))

# op _00P__power_combination_eval
# LANG: _00PZ --> _00Q0
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01409__00Q0 = (v01408__00PZ**1)
v01409__00Q0 = (v01409__00Q0*_00P__coeff).reshape((1, 2))

# op _00Py_power_combination_eval
# LANG: _00Px --> _00Pz
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01403__00Pz = (v01402__00Px**1)
v01403__00Pz = (v01403__00Pz*_00Py_coeff).reshape((1, 2))

# op _00QM_sin_eval
# LANG: _00QL --> _00QN
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01441__00QN = np.sin(v01440__00QL)

# op _00Qb_power_combination_eval
# LANG: _00Qa --> _00Qc
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01425__00Qc = (v01424__00Qa**1)
v01425__00Qc = (v01425__00Qc*_00Qb_coeff).reshape((1, 2))

# op _00Qj_power_combination_eval
# LANG: propeller_radius --> _00Qk
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01435__00Qk = (v01261_propeller_radius**1)
v01435__00Qk = (v01435__00Qk*_00Qj_coeff).reshape((1,))

# op _00Qu_power_combination_eval
# LANG: rel_angle_plane --> _00Qv
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01428__00Qv = (v01368_rel_angle_plane**2.0)
v01428__00Qv = (v01428__00Qv*_00Qu_coeff).reshape((1, 2))

# op _00SA_power_combination_eval
# LANG: _00Sb, _00Sz --> _00SB
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01477__00SB = (v01476__00Sb**1)*(v01487__00Sz**-1)
v01477__00SB = (v01477__00SB*_00SA_coeff).reshape((1, 1))

# op _00y__power_combination_eval
# LANG: _00yB, _00yZ --> _00z0
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0881__00z0 = (v0880__00yB**1)*(v0891__00yZ**-1)
v0881__00z0 = (v0881__00z0*_00y__coeff).reshape((1, 1))

# op _012K_power_combination_eval
# LANG: _012J --> _012L
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01834__012L = (v01833__012J**1)
v01834__012L = (v01834__012L*_012K_coeff).reshape((1, 2, 3))

# op _014X_power_combination_eval
# LANG: _014y, _014W --> _014Y
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01887__014Y = (v01886__014y**1)*(v01897__014W**-1)
v01887__014Y = (v01887__014Y*_014X_coeff).reshape((1, 1))

# op _0188_power_combination_eval
# LANG: _0187 --> _0189
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v01999__0189 = (v01998__0187**1)
v01999__0189 = (v01999__0189*_0188_coeff).reshape((1, 2))

# op _018A_power_combination_eval
# LANG: _018z --> _018B
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02005__018B = (v02004__018z**1)
v02005__018B = (v02005__018B*_018A_coeff).reshape((1, 2))

# op _018M_power_combination_eval
# LANG: _018L --> _018N
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02021__018N = (v02020__018L**1)
v02021__018N = (v02021__018N*_018M_coeff).reshape((1, 2))

# op _018U_power_combination_eval
# LANG: propeller_radius --> _018V
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02031__018V = (v01857_propeller_radius**1)
v02031__018V = (v02031__018V*_018U_coeff).reshape((1,))

# op _018q_power_combination_eval
# LANG: _018p --> _018r
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02015__018r = (v02014__018p**1)
v02015__018r = (v02015__018r*_018q_coeff).reshape((1, 2))

# op _0194_power_combination_eval
# LANG: rel_angle_plane --> _0195
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02024__0195 = (v01964_rel_angle_plane**2.0)
v02024__0195 = (v02024__0195*_0194_coeff).reshape((1, 2))

# op _019m_sin_eval
# LANG: _019l --> _019n
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02037__019n = np.sin(v02036__019l)

# op _01J3_power_combination_eval
# LANG: _01IF, _01J2 --> _01J4
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02934__01J4 = (v02933__01IF**1)*(v02944__01J2**-1)
v02934__01J4 = (v02934__01J4*_01J3_coeff).reshape((1, 1))

# op _01S1_power_combination_eval
# LANG: _01S0 --> _01S2
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03221__01S2 = (v03220__01S0**1)
v03221__01S2 = (v03221__01S2*_01S1_coeff).reshape((1, 2, 3))

# op _01TL_power_combination_eval
# LANG: _01Tm, _01TK --> _01TM
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03261__01TM = (v03260__01Tm**1)*(v03271__01TK**-1)
v03261__01TM = (v03261__01TM*_01TL_coeff).reshape((1, 1))

# op _01WX_power_combination_eval
# LANG: _01WW --> _01WY
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03373__01WY = (v03372__01WW**1)
v03373__01WY = (v03373__01WY*_01WX_coeff).reshape((1, 2))

# op _01XA_power_combination_eval
# LANG: _01Xz --> _01XB
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03395__01XB = (v03394__01Xz**1)
v03395__01XB = (v03395__01XB*_01XA_coeff).reshape((1, 2))

# op _01XI_power_combination_eval
# LANG: propeller_radius --> _01XJ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03405__01XJ = (v03230_propeller_radius**1)
v03405__01XJ = (v03405__01XJ*_01XI_coeff).reshape((1,))

# op _01XT_power_combination_eval
# LANG: rel_angle_plane --> _01XU
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03398__01XU = (v03338_rel_angle_plane**2.0)
v03398__01XU = (v03398__01XU*_01XT_coeff).reshape((1, 2))

# op _01Xe_power_combination_eval
# LANG: _01Xd --> _01Xf
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03389__01Xf = (v03388__01Xd**1)
v03389__01Xf = (v03389__01Xf*_01Xe_coeff).reshape((1, 2))

# op _01Xo_power_combination_eval
# LANG: _01Xn --> _01Xp
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03379__01Xp = (v03378__01Xn**1)
v03379__01Xp = (v03379__01Xp*_01Xo_coeff).reshape((1, 2))

# op _01Ya_sin_eval
# LANG: _01Y9 --> _01Yb
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03411__01Yb = np.sin(v03410__01Y9)

# op _01_5_power_combination_eval
# LANG: _01ZH, _01_4 --> _01_6
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03449__01_6 = (v03448__01ZH**1)*(v03459__01_4**-1)
v03449__01_6 = (v03449__01_6*_01_5_coeff).reshape((1, 1))

# op _0283_power_combination_eval
# LANG: _0282 --> _0284
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03735__0284 = (v03734__0282**1)
v03735__0284 = (v03735__0284*_0283_coeff).reshape((1, 2, 3))

# op _029N_power_combination_eval
# LANG: _029o, _029M --> _029O
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03775__029O = (v03774__029o**1)*(v03785__029M**-1)
v03775__029O = (v03775__029O*_029N_coeff).reshape((1, 1))

# op _02cZ_power_combination_eval
# LANG: _02cY --> _02c_
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03887__02c_ = (v03886__02cY**1)
v03887__02c_ = (v03887__02c_*_02cZ_coeff).reshape((1, 2))

# op _02dC_power_combination_eval
# LANG: _02dB --> _02dD
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03909__02dD = (v03908__02dB**1)
v03909__02dD = (v03909__02dD*_02dC_coeff).reshape((1, 2))

# op _02dK_power_combination_eval
# LANG: propeller_radius --> _02dL
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03919__02dL = (v03744_propeller_radius**1)
v03919__02dL = (v03919__02dL*_02dK_coeff).reshape((1,))

# op _02dV_power_combination_eval
# LANG: rel_angle_plane --> _02dW
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03912__02dW = (v03852_rel_angle_plane**2.0)
v03912__02dW = (v03912__02dW*_02dV_coeff).reshape((1, 2))

# op _02dg_power_combination_eval
# LANG: _02df --> _02dh
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03903__02dh = (v03902__02df**1)
v03903__02dh = (v03903__02dh*_02dg_coeff).reshape((1, 2))

# op _02dq_power_combination_eval
# LANG: _02dp --> _02dr
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03893__02dr = (v03892__02dp**1)
v03893__02dr = (v03893__02dr*_02dq_coeff).reshape((1, 2))

# op _02ec_sin_eval
# LANG: _02eb --> _02ed
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03925__02ed = np.sin(v03924__02eb)

# op _00Kb_power_combination_eval
# LANG: _00Ka --> _00Kc
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01239__00Kc = (v01238__00Ka**1)
v01239__00Kc = (v01239__00Kc*_00Kb_coeff).reshape((1, 2, 3))

# op _00Mo_log10_eval
# LANG: _00Mn --> _00Mp
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01304__00Mp = np.log10(v01291__00Mn)

# op _00Ms_log10_eval
# LANG: RA_1000 --> _00Mt
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01308__00Mt = np.log10(v01307_RA_1000)

# op _00PA_linear_combination_eval
# LANG: _00Pz --> _00PB
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01404__00PB = _00PA_constant+1*v01403__00Pz

# op _00PS_linear_combination_eval
# LANG: _00PR --> _00PT
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01420__00PT = _00PS_constant+1*v01419__00PR

# op _00Q1_linear_combination_eval
# LANG: _00Q0 --> _00Q2
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01410__00Q2 = _00Q1_constant+1*v01409__00Q0

# op _00QO_linear_combination_eval
# LANG: _00QN --> _00QP
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01442__00QP = _00QO_constant+-1*v01441__00QN

# op _00Qd_linear_combination_eval
# LANG: _00Qc --> _00Qe
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01426__00Qe = _00Qd_constant+1*v01425__00Qc

# op _00Ql expand_scalar_eval
# LANG: _00Qk --> _00Qm
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01436__00Qm = np.empty((1, 2))
v01436__00Qm.fill(v01435__00Qk.item())

# op _00Qo reshape_eval
# LANG: rel_obs_dist --> _00Qp
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01433__00Qp = v01362_rel_obs_dist.reshape((1, 2))

# op _00Qw_power_combination_eval
# LANG: _00Qv --> _00Qx
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01429__00Qx = (v01428__00Qv**0.5)
v01429__00Qx = (v01429__00Qx*_00Qw_coeff).reshape((1, 2))

# op _00SC_log10_eval
# LANG: _00SB --> _00SD
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01490__00SD = np.log10(v01477__00SB)

# op _00SG_log10_eval
# LANG: RA_1000 --> _00SH
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01494__00SH = np.log10(v01493_RA_1000)

# op _00z1_log10_eval
# LANG: _00z0 --> _00z2
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0894__00z2 = np.log10(v0881__00z0)

# op _00z5_log10_eval
# LANG: RA_1000 --> _00z6
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0898__00z6 = np.log10(v0897_RA_1000)

# op _012M_power_combination_eval
# LANG: _012L --> _012N
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01835__012N = (v01834__012L**1)
v01835__012N = (v01835__012N*_012M_coeff).reshape((1, 2, 3))

# op _014Z_log10_eval
# LANG: _014Y --> _014_
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01900__014_ = np.log10(v01887__014Y)

# op _0152_log10_eval
# LANG: RA_1000 --> _0153
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01904__0153 = np.log10(v01903_RA_1000)

# op _018C_linear_combination_eval
# LANG: _018B --> _018D
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02006__018D = _018C_constant+1*v02005__018B

# op _018O_linear_combination_eval
# LANG: _018N --> _018P
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02022__018P = _018O_constant+1*v02021__018N

# op _018W expand_scalar_eval
# LANG: _018V --> _018X
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02032__018X = np.empty((1, 2))
v02032__018X.fill(v02031__018V.item())

# op _018Z reshape_eval
# LANG: rel_obs_dist --> _018_
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02029__018_ = v01958_rel_obs_dist.reshape((1, 2))

# op _018a_linear_combination_eval
# LANG: _0189 --> _018b
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02000__018b = _018a_constant+1*v01999__0189

# op _018s_linear_combination_eval
# LANG: _018r --> _018t
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02016__018t = _018s_constant+1*v02015__018r

# op _0196_power_combination_eval
# LANG: _0195 --> _0197
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02025__0197 = (v02024__0195**0.5)
v02025__0197 = (v02025__0197*_0196_coeff).reshape((1, 2))

# op _019o_linear_combination_eval
# LANG: _019n --> _019p
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02038__019p = _019o_constant+-1*v02037__019n

# op _01J5_log10_eval
# LANG: _01J4 --> _01J6
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02947__01J6 = np.log10(v02934__01J4)

# op _01J9_log10_eval
# LANG: RA_1000 --> _01Ja
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02951__01Ja = np.log10(v02950_RA_1000)

# op _01S3_power_combination_eval
# LANG: _01S2 --> _01S4
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03222__01S4 = (v03221__01S2**1)
v03222__01S4 = (v03222__01S4*_01S3_coeff).reshape((1, 2, 3))

# op _01TN_log10_eval
# LANG: _01TM --> _01TO
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03274__01TO = np.log10(v03261__01TM)

# op _01TR_log10_eval
# LANG: RA_1000 --> _01TS
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03278__01TS = np.log10(v03277_RA_1000)

# op _01WZ_linear_combination_eval
# LANG: _01WY --> _01W_
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03374__01W_ = _01WZ_constant+1*v03373__01WY

# op _01XC_linear_combination_eval
# LANG: _01XB --> _01XD
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03396__01XD = _01XC_constant+1*v03395__01XB

# op _01XK expand_scalar_eval
# LANG: _01XJ --> _01XL
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03406__01XL = np.empty((1, 2))
v03406__01XL.fill(v03405__01XJ.item())

# op _01XN reshape_eval
# LANG: rel_obs_dist --> _01XO
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03403__01XO = v03332_rel_obs_dist.reshape((1, 2))

# op _01XV_power_combination_eval
# LANG: _01XU --> _01XW
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03399__01XW = (v03398__01XU**0.5)
v03399__01XW = (v03399__01XW*_01XV_coeff).reshape((1, 2))

# op _01Xg_linear_combination_eval
# LANG: _01Xf --> _01Xh
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03390__01Xh = _01Xg_constant+1*v03389__01Xf

# op _01Xq_linear_combination_eval
# LANG: _01Xp --> _01Xr
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03380__01Xr = _01Xq_constant+1*v03379__01Xp

# op _01Yc_linear_combination_eval
# LANG: _01Yb --> _01Yd
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03412__01Yd = _01Yc_constant+-1*v03411__01Yb

# op _01_7_log10_eval
# LANG: _01_6 --> _01_8
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03462__01_8 = np.log10(v03449__01_6)

# op _01_b_log10_eval
# LANG: RA_1000 --> _01_c
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03466__01_c = np.log10(v03465_RA_1000)

# op _0285_power_combination_eval
# LANG: _0284 --> _0286
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03736__0286 = (v03735__0284**1)
v03736__0286 = (v03736__0286*_0285_coeff).reshape((1, 2, 3))

# op _029P_log10_eval
# LANG: _029O --> _029Q
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03788__029Q = np.log10(v03775__029O)

# op _029T_log10_eval
# LANG: RA_1000 --> _029U
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03792__029U = np.log10(v03791_RA_1000)

# op _02d0_linear_combination_eval
# LANG: _02c_ --> _02d1
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03888__02d1 = _02d0_constant+1*v03887__02c_

# op _02dE_linear_combination_eval
# LANG: _02dD --> _02dF
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03910__02dF = _02dE_constant+1*v03909__02dD

# op _02dM expand_scalar_eval
# LANG: _02dL --> _02dN
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03920__02dN = np.empty((1, 2))
v03920__02dN.fill(v03919__02dL.item())

# op _02dP reshape_eval
# LANG: rel_obs_dist --> _02dQ
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03917__02dQ = v03846_rel_obs_dist.reshape((1, 2))

# op _02dX_power_combination_eval
# LANG: _02dW --> _02dY
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03913__02dY = (v03912__02dW**0.5)
v03913__02dY = (v03913__02dY*_02dX_coeff).reshape((1, 2))

# op _02di_linear_combination_eval
# LANG: _02dh --> _02dj
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03904__02dj = _02di_constant+1*v03903__02dh

# op _02ds_linear_combination_eval
# LANG: _02dr --> _02dt
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03894__02dt = _02ds_constant+1*v03893__02dr

# op _02ee_linear_combination_eval
# LANG: _02ed --> _02ef
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03926__02ef = _02ee_constant+-1*v03925__02ed

# op _00Kd_exp_a_eval
# LANG: _00Kc --> _00Ke
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01240__00Ke = _00Kd_exp_a_eval_a**v01239__00Kc

# op _00Mq_power_combination_eval
# LANG: _00Mp --> _00Mr
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01305__00Mr = (v01304__00Mp**1)
v01305__00Mr = (v01305__00Mr*_00Mq_coeff).reshape((1, 1))

# op _00Mu_power_combination_eval
# LANG: _00Mt --> _00Mv
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01309__00Mv = (v01308__00Mt**1)
v01309__00Mv = (v01309__00Mv*_00Mu_coeff).reshape((1, 1))

# op _00Q3_power_combination_eval
# LANG: _00PB, _00Q2 --> _00Q4
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01405__00Q4 = (v01404__00PB**1)*(v01410__00Q2**1)
v01405__00Q4 = (v01405__00Q4*_00Q3_coeff).reshape((1, 2))

# op _00QE_power_combination_eval
# LANG: _00Qp, _00Qm --> _00QF
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01434__00QF = (v01433__00Qp**1)*(v01436__00Qm**-1)
v01434__00QF = (v01434__00QF*_00QE_coeff).reshape((1, 2))

# op _00QQ_power_combination_eval
# LANG: _00QP --> _00QR
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01443__00QR = (v01442__00QP**1)
v01443__00QR = (v01443__00QR*_00QQ_coeff).reshape((1, 2))

# op _00Qf_power_combination_eval
# LANG: _00PT, _00Qe --> _00Qg
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01421__00Qg = (v01420__00PT**1)*(v01426__00Qe**1)
v01421__00Qg = (v01421__00Qg*_00Qf_coeff).reshape((1, 2))

# op _00Qy_sin_eval
# LANG: _00Qx --> _00Qz
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01430__00Qz = np.sin(v01429__00Qx)

# op _00SE_power_combination_eval
# LANG: _00SD --> _00SF
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01491__00SF = (v01490__00SD**1)
v01491__00SF = (v01491__00SF*_00SE_coeff).reshape((1, 1))

# op _00SI_power_combination_eval
# LANG: _00SH --> _00SJ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01495__00SJ = (v01494__00SH**1)
v01495__00SJ = (v01495__00SJ*_00SI_coeff).reshape((1, 1))

# op _00z3_power_combination_eval
# LANG: _00z2 --> _00z4
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0895__00z4 = (v0894__00z2**1)
v0895__00z4 = (v0895__00z4*_00z3_coeff).reshape((1, 1))

# op _00z7_power_combination_eval
# LANG: _00z6 --> _00z8
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0899__00z8 = (v0898__00z6**1)
v0899__00z8 = (v0899__00z8*_00z7_coeff).reshape((1, 1))

# op _012O_exp_a_eval
# LANG: _012N --> _012P
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01836__012P = _012O_exp_a_eval_a**v01835__012N

# op _0150_power_combination_eval
# LANG: _014_ --> _0151
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01901__0151 = (v01900__014_**1)
v01901__0151 = (v01901__0151*_0150_coeff).reshape((1, 1))

# op _0154_power_combination_eval
# LANG: _0153 --> _0155
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01905__0155 = (v01904__0153**1)
v01905__0155 = (v01905__0155*_0154_coeff).reshape((1, 1))

# op _018E_power_combination_eval
# LANG: _018b, _018D --> _018F
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02001__018F = (v02000__018b**1)*(v02006__018D**1)
v02001__018F = (v02001__018F*_018E_coeff).reshape((1, 2))

# op _018Q_power_combination_eval
# LANG: _018t, _018P --> _018R
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02017__018R = (v02016__018t**1)*(v02022__018P**1)
v02017__018R = (v02017__018R*_018Q_coeff).reshape((1, 2))

# op _0198_sin_eval
# LANG: _0197 --> _0199
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02026__0199 = np.sin(v02025__0197)

# op _019e_power_combination_eval
# LANG: _018_, _018X --> _019f
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02030__019f = (v02029__018_**1)*(v02032__018X**-1)
v02030__019f = (v02030__019f*_019e_coeff).reshape((1, 2))

# op _019q_power_combination_eval
# LANG: _019p --> _019r
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02039__019r = (v02038__019p**1)
v02039__019r = (v02039__019r*_019q_coeff).reshape((1, 2))

# op _01J7_power_combination_eval
# LANG: _01J6 --> _01J8
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02948__01J8 = (v02947__01J6**1)
v02948__01J8 = (v02948__01J8*_01J7_coeff).reshape((1, 1))

# op _01Jb_power_combination_eval
# LANG: _01Ja --> _01Jc
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02952__01Jc = (v02951__01Ja**1)
v02952__01Jc = (v02952__01Jc*_01Jb_coeff).reshape((1, 1))

# op _01S5_exp_a_eval
# LANG: _01S4 --> _01S6
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03223__01S6 = _01S5_exp_a_eval_a**v03222__01S4

# op _01TP_power_combination_eval
# LANG: _01TO --> _01TQ
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03275__01TQ = (v03274__01TO**1)
v03275__01TQ = (v03275__01TQ*_01TP_coeff).reshape((1, 1))

# op _01TT_power_combination_eval
# LANG: _01TS --> _01TU
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03279__01TU = (v03278__01TS**1)
v03279__01TU = (v03279__01TU*_01TT_coeff).reshape((1, 1))

# op _01XE_power_combination_eval
# LANG: _01Xh, _01XD --> _01XF
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03391__01XF = (v03390__01Xh**1)*(v03396__01XD**1)
v03391__01XF = (v03391__01XF*_01XE_coeff).reshape((1, 2))

# op _01XX_sin_eval
# LANG: _01XW --> _01XY
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03400__01XY = np.sin(v03399__01XW)

# op _01Xs_power_combination_eval
# LANG: _01W_, _01Xr --> _01Xt
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03375__01Xt = (v03374__01W_**1)*(v03380__01Xr**1)
v03375__01Xt = (v03375__01Xt*_01Xs_coeff).reshape((1, 2))

# op _01Y2_power_combination_eval
# LANG: _01XO, _01XL --> _01Y3
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03404__01Y3 = (v03403__01XO**1)*(v03406__01XL**-1)
v03404__01Y3 = (v03404__01Y3*_01Y2_coeff).reshape((1, 2))

# op _01Ye_power_combination_eval
# LANG: _01Yd --> _01Yf
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03413__01Yf = (v03412__01Yd**1)
v03413__01Yf = (v03413__01Yf*_01Ye_coeff).reshape((1, 2))

# op _01_9_power_combination_eval
# LANG: _01_8 --> _01_a
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03463__01_a = (v03462__01_8**1)
v03463__01_a = (v03463__01_a*_01_9_coeff).reshape((1, 1))

# op _01_d_power_combination_eval
# LANG: _01_c --> _01_e
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03467__01_e = (v03466__01_c**1)
v03467__01_e = (v03467__01_e*_01_d_coeff).reshape((1, 1))

# op _0287_exp_a_eval
# LANG: _0286 --> _0288
# SHAPES: (1, 2, 3) --> (1, 2, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03737__0288 = _0287_exp_a_eval_a**v03736__0286

# op _029R_power_combination_eval
# LANG: _029Q --> _029S
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03789__029S = (v03788__029Q**1)
v03789__029S = (v03789__029S*_029R_coeff).reshape((1, 1))

# op _029V_power_combination_eval
# LANG: _029U --> _029W
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03793__029W = (v03792__029U**1)
v03793__029W = (v03793__029W*_029V_coeff).reshape((1, 1))

# op _02dG_power_combination_eval
# LANG: _02dj, _02dF --> _02dH
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03905__02dH = (v03904__02dj**1)*(v03910__02dF**1)
v03905__02dH = (v03905__02dH*_02dG_coeff).reshape((1, 2))

# op _02dZ_sin_eval
# LANG: _02dY --> _02d_
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03914__02d_ = np.sin(v03913__02dY)

# op _02du_power_combination_eval
# LANG: _02d1, _02dt --> _02dv
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03889__02dv = (v03888__02d1**1)*(v03894__02dt**1)
v03889__02dv = (v03889__02dv*_02du_coeff).reshape((1, 2))

# op _02e4_power_combination_eval
# LANG: _02dQ, _02dN --> _02e5
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03918__02e5 = (v03917__02dQ**1)*(v03920__02dN**-1)
v03918__02e5 = (v03918__02e5*_02e4_coeff).reshape((1, 2))

# op _02eg_power_combination_eval
# LANG: _02ef --> _02eh
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03927__02eh = (v03926__02ef**1)
v03927__02eh = (v03927__02eh*_02eg_coeff).reshape((1, 2))

# op _00Kf_single_tensor_sum_with_axis_eval
# LANG: _00Ke --> _00Kg
# SHAPES: (1, 2, 3) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01241__00Kg = np.sum(v01240__00Ke, axis = (2,)).reshape((1, 2))

# op _00Mw_linear_combination_eval
# LANG: _00Mr, _00Mv --> _00Mx
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01306__00Mx = _00Mw_constant+1*v01305__00Mr+-1*v01309__00Mv

# op _00QA_power_combination_eval
# LANG: _00Qz --> _00QB
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01431__00QB = (v01430__00Qz**0.031)
v01431__00QB = (v01431__00QB*_00QA_coeff).reshape((1, 2))

# op _00QG_log10_eval
# LANG: _00QF --> _00QH
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01437__00QH = np.log10(v01434__00QF)

# op _00QS_linear_combination_eval
# LANG: _00QR --> _00QT
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01444__00QT = _00QS_constant+1*v01443__00QR

# op _00Qh_linear_combination_eval
# LANG: _00Q4, _00Qg --> _00Qi
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01411__00Qi = _00Qh_constant+1*v01405__00Q4+1*v01421__00Qg

# op _00SK_linear_combination_eval
# LANG: _00SF, _00SJ --> _00SL
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01492__00SL = _00SK_constant+1*v01491__00SF+-1*v01495__00SJ

# op _00z9_linear_combination_eval
# LANG: _00z4, _00z8 --> _00za
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0896__00za = _00z9_constant+1*v0895__00z4+-1*v0899__00z8

# op _012Q_single_tensor_sum_with_axis_eval
# LANG: _012P --> _012R
# SHAPES: (1, 2, 3) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01837__012R = np.sum(v01836__012P, axis = (2,)).reshape((1, 2))

# op _0156_linear_combination_eval
# LANG: _0151, _0155 --> _0157
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01902__0157 = _0156_constant+1*v01901__0151+-1*v01905__0155

# op _018S_linear_combination_eval
# LANG: _018F, _018R --> _018T
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02007__018T = _018S_constant+1*v02001__018F+1*v02017__018R

# op _019a_power_combination_eval
# LANG: _0199 --> _019b
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02027__019b = (v02026__0199**0.031)
v02027__019b = (v02027__019b*_019a_coeff).reshape((1, 2))

# op _019g_log10_eval
# LANG: _019f --> _019h
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02033__019h = np.log10(v02030__019f)

# op _019s_linear_combination_eval
# LANG: _019r --> _019t
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02040__019t = _019s_constant+1*v02039__019r

# op _01Jd_linear_combination_eval
# LANG: _01J8, _01Jc --> _01Je
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02949__01Je = _01Jd_constant+1*v02948__01J8+-1*v02952__01Jc

# op _01S7_single_tensor_sum_with_axis_eval
# LANG: _01S6 --> _01S8
# SHAPES: (1, 2, 3) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03224__01S8 = np.sum(v03223__01S6, axis = (2,)).reshape((1, 2))

# op _01TV_linear_combination_eval
# LANG: _01TQ, _01TU --> _01TW
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03276__01TW = _01TV_constant+1*v03275__01TQ+-1*v03279__01TU

# op _01XG_linear_combination_eval
# LANG: _01Xt, _01XF --> _01XH
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03381__01XH = _01XG_constant+1*v03375__01Xt+1*v03391__01XF

# op _01XZ_power_combination_eval
# LANG: _01XY --> _01X_
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03401__01X_ = (v03400__01XY**0.031)
v03401__01X_ = (v03401__01X_*_01XZ_coeff).reshape((1, 2))

# op _01Y4_log10_eval
# LANG: _01Y3 --> _01Y5
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03407__01Y5 = np.log10(v03404__01Y3)

# op _01Yg_linear_combination_eval
# LANG: _01Yf --> _01Yh
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03414__01Yh = _01Yg_constant+1*v03413__01Yf

# op _01_f_linear_combination_eval
# LANG: _01_a, _01_e --> _01_g
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03464__01_g = _01_f_constant+1*v03463__01_a+-1*v03467__01_e

# op _0289_single_tensor_sum_with_axis_eval
# LANG: _0288 --> _028a
# SHAPES: (1, 2, 3) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03738__028a = np.sum(v03737__0288, axis = (2,)).reshape((1, 2))

# op _029X_linear_combination_eval
# LANG: _029S, _029W --> _029Y
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03790__029Y = _029X_constant+1*v03789__029S+-1*v03793__029W

# op _02dI_linear_combination_eval
# LANG: _02dv, _02dH --> _02dJ
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03895__02dJ = _02dI_constant+1*v03889__02dv+1*v03905__02dH

# op _02e0_power_combination_eval
# LANG: _02d_ --> _02e1
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03915__02e1 = (v03914__02d_**0.031)
v03915__02e1 = (v03915__02e1*_02e0_coeff).reshape((1, 2))

# op _02e6_log10_eval
# LANG: _02e5 --> _02e7
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03921__02e7 = np.log10(v03918__02e5)

# op _02ei_linear_combination_eval
# LANG: _02eh --> _02ej
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03928__02ej = _02ei_constant+1*v03927__02eh

# op _00Kh_log10_eval
# LANG: _00Kg --> _00Ki
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01242__00Ki = np.log10(v01241__00Kg)

# op _00My reshape_eval
# LANG: _00Mx --> _00Mz
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01310__00Mz = v01306__00Mx.reshape((1,))

# op _00QC_power_combination_eval
# LANG: _00Qi, _00QB --> _00QD
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01427__00QD = (v01411__00Qi**1)*(v01431__00QB**1)
v01427__00QD = (v01427__00QD*_00QC_coeff).reshape((1, 2))

# op _00QU_power_combination_eval
# LANG: _00QH, _00QT --> _00QV
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01438__00QV = (v01437__00QH**1)*(v01444__00QT**1)
v01438__00QV = (v01438__00QV*_00QU_coeff).reshape((1, 2))

# op _00SM reshape_eval
# LANG: _00SL --> _00SN
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01496__00SN = v01492__00SL.reshape((1,))

# op _00dZ_power_combination_eval
# LANG: _radius --> _00d_
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0342__00d_ = (v0214__radius**2)
v0342__00d_ = (v0342__00d_*_00dZ_coeff).reshape((1, 40, 30))

# op _00t1_power_combination_eval
# LANG: _radius --> _00t2
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0715__00t2 = (v0587__radius**2)
v0715__00t2 = (v0715__00t2*_00t1_coeff).reshape((1, 40, 30))

# op _00zb reshape_eval
# LANG: _00za --> _00zc
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0900__00zc = v0896__00za.reshape((1,))

# op _012S_log10_eval
# LANG: _012R --> _012T
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01838__012T = np.log10(v01837__012R)

# op _0158 reshape_eval
# LANG: _0157 --> _0159
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01906__0159 = v01902__0157.reshape((1,))

# op _019c_power_combination_eval
# LANG: _018T, _019b --> _019d
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02023__019d = (v02007__018T**1)*(v02027__019b**1)
v02023__019d = (v02023__019d*_019c_coeff).reshape((1, 2))

# op _019u_power_combination_eval
# LANG: _019h, _019t --> _019v
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02034__019v = (v02033__019h**1)*(v02040__019t**1)
v02034__019v = (v02034__019v*_019u_coeff).reshape((1, 2))

# op _01CZ_power_combination_eval
# LANG: _radius --> _01C_
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02765__01C_ = (v02637__radius**2)
v02765__01C_ = (v02765__01C_*_01CZ_coeff).reshape((1, 40, 30))

# op _01Jf reshape_eval
# LANG: _01Je --> _01Jg
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02953__01Jg = v02949__01Je.reshape((1,))

# op _01S9_log10_eval
# LANG: _01S8 --> _01Sa
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03225__01Sa = np.log10(v03224__01S8)

# op _01TX reshape_eval
# LANG: _01TW --> _01TY
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03280__01TY = v03276__01TW.reshape((1,))

# op _01Y0_power_combination_eval
# LANG: _01XH, _01X_ --> _01Y1
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03397__01Y1 = (v03381__01XH**1)*(v03401__01X_**1)
v03397__01Y1 = (v03397__01Y1*_01Y0_coeff).reshape((1, 2))

# op _01Yi_power_combination_eval
# LANG: _01Y5, _01Yh --> _01Yj
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03408__01Yj = (v03407__01Y5**1)*(v03414__01Yh**1)
v03408__01Yj = (v03408__01Yj*_01Yi_coeff).reshape((1, 2))

# op _01_h reshape_eval
# LANG: _01_g --> _01_i
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03468__01_i = v03464__01_g.reshape((1,))

# op _01nW_power_combination_eval
# LANG: _radius --> _01nX
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02392__01nX = (v02264__radius**2)
v02392__01nX = (v02392__01nX*_01nW_coeff).reshape((1, 40, 30))

# op _028b_log10_eval
# LANG: _028a --> _028c
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03739__028c = np.log10(v03738__028a)

# op _029Z reshape_eval
# LANG: _029Y --> _029_
# SHAPES: (1, 1) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03794__029_ = v03790__029Y.reshape((1,))

# op _02e2_power_combination_eval
# LANG: _02dJ, _02e1 --> _02e3
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03911__02e3 = (v03895__02dJ**1)*(v03915__02e1**1)
v03911__02e3 = (v03911__02e3*_02e2_coeff).reshape((1, 2))

# op _02ek_power_combination_eval
# LANG: _02e7, _02ej --> _02el
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03922__02el = (v03921__02e7**1)*(v03928__02ej**1)
v03922__02el = (v03922__02el*_02ek_coeff).reshape((1, 2))

# op _00Kj_power_combination_eval
# LANG: _00Ki --> rotor_1_disk_tonal_spl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.ks_spl_model
v01243_rotor_1_disk_tonal_spl = (v01242__00Ki**1)
v01243_rotor_1_disk_tonal_spl = (v01243_rotor_1_disk_tonal_spl*_00Kj_coeff).reshape((1, 2))

# op _00MA expand_scalar_eval
# LANG: _00Mz --> _00MB
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01311__00MB = np.empty((1, 2))
v01311__00MB.fill(v01310__00Mz.item())

# op _00QW_linear_combination_eval
# LANG: _00QD, _00QV --> rotor_1_disk_broadband_spl
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.gl_spl_model
v01432_rotor_1_disk_broadband_spl = _00QW_constant+1*v01427__00QD+-1*v01438__00QV

# op _00SO expand_scalar_eval
# LANG: _00SN --> _00SP
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01497__00SP = np.empty((1, 2))
v01497__00SP.fill(v01496__00SN.item())

# op _00e0_power_combination_eval
# LANG: _00d_ --> _00e1
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0343__00e1 = (v0342__00d_**1)
v0343__00e1 = (v0343__00e1*_00e0_coeff).reshape((1, 40, 30))

# op _00t3_power_combination_eval
# LANG: _00t2 --> _00t4
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0716__00t4 = (v0715__00t2**1)
v0716__00t4 = (v0716__00t4*_00t3_coeff).reshape((1, 40, 30))

# op _00zd expand_scalar_eval
# LANG: _00zc --> _00ze
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0901__00ze = np.empty((1, 2))
v0901__00ze.fill(v0900__00zc.item())

# op _012U_power_combination_eval
# LANG: _012T --> rotor_2_disk_tonal_spl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.ks_spl_model
v01839_rotor_2_disk_tonal_spl = (v01838__012T**1)
v01839_rotor_2_disk_tonal_spl = (v01839_rotor_2_disk_tonal_spl*_012U_coeff).reshape((1, 2))

# op _015a expand_scalar_eval
# LANG: _0159 --> _015b
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01907__015b = np.empty((1, 2))
v01907__015b.fill(v01906__0159.item())

# op _019w_linear_combination_eval
# LANG: _019d, _019v --> rotor_2_disk_broadband_spl
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.gl_spl_model
v02028_rotor_2_disk_broadband_spl = _019w_constant+1*v02023__019d+-1*v02034__019v

# op _01D0_power_combination_eval
# LANG: _01C_ --> _01D1
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02766__01D1 = (v02765__01C_**1)
v02766__01D1 = (v02766__01D1*_01D0_coeff).reshape((1, 40, 30))

# op _01Jh expand_scalar_eval
# LANG: _01Jg --> _01Ji
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02954__01Ji = np.empty((1, 2))
v02954__01Ji.fill(v02953__01Jg.item())

# op _01Sb_power_combination_eval
# LANG: _01Sa --> rotor_1_disk_tonal_spl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.lowson_spl_model
v03226_rotor_1_disk_tonal_spl = (v03225__01Sa**1)
v03226_rotor_1_disk_tonal_spl = (v03226_rotor_1_disk_tonal_spl*_01Sb_coeff).reshape((1, 2))

# op _01TZ expand_scalar_eval
# LANG: _01TY --> _01T_
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03281__01T_ = np.empty((1, 2))
v03281__01T_.fill(v03280__01TY.item())

# op _01Yk_linear_combination_eval
# LANG: _01Y1, _01Yj --> rotor_1_disk_broadband_spl
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.gl_spl_model
v03402_rotor_1_disk_broadband_spl = _01Yk_constant+1*v03397__01Y1+-1*v03408__01Yj

# op _01_j expand_scalar_eval
# LANG: _01_i --> _01_k
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03469__01_k = np.empty((1, 2))
v03469__01_k.fill(v03468__01_i.item())

# op _01nY_power_combination_eval
# LANG: _01nX --> _01nZ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02393__01nZ = (v02392__01nX**1)
v02393__01nZ = (v02393__01nZ*_01nY_coeff).reshape((1, 40, 30))

# op _028d_power_combination_eval
# LANG: _028c --> rotor_2_disk_tonal_spl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.lowson_spl_model
v03740_rotor_2_disk_tonal_spl = (v03739__028c**1)
v03740_rotor_2_disk_tonal_spl = (v03740_rotor_2_disk_tonal_spl*_028d_coeff).reshape((1, 2))

# op _02a0 expand_scalar_eval
# LANG: _029_ --> _02a1
# SHAPES: (1,) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03795__02a1 = np.empty((1, 2))
v03795__02a1.fill(v03794__029_.item())

# op _02em_linear_combination_eval
# LANG: _02e3, _02el --> rotor_2_disk_broadband_spl
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.gl_spl_model
v03916_rotor_2_disk_broadband_spl = _02em_constant+1*v03911__02e3+-1*v03922__02el

# op _00MC_linear_combination_eval
# LANG: _00MB, rotor_1_disk_broadband_spl --> _00MD
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01285__00MD = _00MC_constant+1*v01432_rotor_1_disk_broadband_spl+1*v01311__00MB

# op _00SQ_linear_combination_eval
# LANG: _00SP, rotor_2_disk_tonal_spl --> _00SR
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01471__00SR = _00SQ_constant+1*v01839_rotor_2_disk_tonal_spl+1*v01497__00SP

# op _00e2_power_combination_eval
# LANG: _00bU, _00e1 --> _00e3
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0344__00e3 = (v0343__00e1**1)*(v0320__00bU**1)
v0344__00e3 = (v0344__00e3*_00e2_coeff).reshape((1, 40, 30))

# op _00t5_power_combination_eval
# LANG: _00qX, _00t4 --> _00t6
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0717__00t6 = (v0716__00t4**1)*(v0693__00qX**1)
v0717__00t6 = (v0717__00t6*_00t5_coeff).reshape((1, 40, 30))

# op _00zf_linear_combination_eval
# LANG: _00ze, rotor_1_disk_tonal_spl --> _00zg
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0875__00zg = _00zf_constant+1*v01243_rotor_1_disk_tonal_spl+1*v0901__00ze

# op _015c_linear_combination_eval
# LANG: _015b, rotor_2_disk_broadband_spl --> _015d
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01881__015d = _015c_constant+1*v02028_rotor_2_disk_broadband_spl+1*v01907__015b

# op _01D2_power_combination_eval
# LANG: _01AU, _01D1 --> _01D3
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02767__01D3 = (v02766__01D1**1)*(v02743__01AU**1)
v02767__01D3 = (v02767__01D3*_01D2_coeff).reshape((1, 40, 30))

# op _01Jj_linear_combination_eval
# LANG: _01Ji, rotor_1_disk_tonal_spl --> _01Jk
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02927__01Jk = _01Jj_constant+1*v03226_rotor_1_disk_tonal_spl+1*v02954__01Ji

# op _01U0_linear_combination_eval
# LANG: _01T_, rotor_1_disk_broadband_spl --> _01U1
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03254__01U1 = _01U0_constant+1*v03402_rotor_1_disk_broadband_spl+1*v03281__01T_

# op _01_l_linear_combination_eval
# LANG: _01_k, rotor_2_disk_tonal_spl --> _01_m
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03443__01_m = _01_l_constant+1*v03740_rotor_2_disk_tonal_spl+1*v03469__01_k

# op _01n__power_combination_eval
# LANG: _01lR, _01nZ --> _01o0
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02394__01o0 = (v02393__01nZ**1)*(v02370__01lR**1)
v02394__01o0 = (v02394__01o0*_01n__coeff).reshape((1, 40, 30))

# op _02a2_linear_combination_eval
# LANG: _02a1, rotor_2_disk_broadband_spl --> _02a3
# SHAPES: (1, 2), (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03768__02a3 = _02a2_constant+1*v03916_rotor_2_disk_broadband_spl+1*v03795__02a1

# op _00ME_power_combination_eval
# LANG: _00MD --> _00MF
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01312__00MF = (v01285__00MD**1)
v01312__00MF = (v01312__00MF*_00ME_coeff).reshape((1, 2))

# op _00SS_power_combination_eval
# LANG: _00SR --> _00ST
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01498__00ST = (v01471__00SR**1)
v01498__00ST = (v01498__00ST*_00SS_coeff).reshape((1, 2))

# op _00e4_power_combination_eval
# LANG: _ux, _00e3 --> _00e5
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0345__00e5 = (v0344__00e3**1)*(v0279__ux**1)
v0345__00e5 = (v0345__00e5*_00e4_coeff).reshape((1, 40, 30))

# op _00t7_power_combination_eval
# LANG: _ux, _00t6 --> _00t8
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0718__00t8 = (v0717__00t6**1)*(v0652__ux**1)
v0718__00t8 = (v0718__00t8*_00t7_coeff).reshape((1, 40, 30))

# op _00zh_power_combination_eval
# LANG: _00zg --> _00zi
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0902__00zi = (v0875__00zg**1)
v0902__00zi = (v0902__00zi*_00zh_coeff).reshape((1, 2))

# op _015e_power_combination_eval
# LANG: _015d --> _015f
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01908__015f = (v01881__015d**1)
v01908__015f = (v01908__015f*_015e_coeff).reshape((1, 2))

# op _01D4_power_combination_eval
# LANG: _ux, _01D3 --> _01D5
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02768__01D5 = (v02767__01D3**1)*(v02702__ux**1)
v02768__01D5 = (v02768__01D5*_01D4_coeff).reshape((1, 40, 30))

# op _01Jl_power_combination_eval
# LANG: _01Jk --> _01Jm
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02955__01Jm = (v02927__01Jk**1)
v02955__01Jm = (v02955__01Jm*_01Jl_coeff).reshape((1, 2))

# op _01U2_power_combination_eval
# LANG: _01U1 --> _01U3
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03282__01U3 = (v03254__01U1**1)
v03282__01U3 = (v03282__01U3*_01U2_coeff).reshape((1, 2))

# op _01_n_power_combination_eval
# LANG: _01_m --> _01_o
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03470__01_o = (v03443__01_m**1)
v03470__01_o = (v03470__01_o*_01_n_coeff).reshape((1, 2))

# op _01o1_power_combination_eval
# LANG: _ux, _01o0 --> _01o2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02395__01o2 = (v02394__01o0**1)*(v02329__ux**1)
v02395__01o2 = (v02395__01o2*_01o1_coeff).reshape((1, 40, 30))

# op _02a4_power_combination_eval
# LANG: _02a3 --> _02a5
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03796__02a5 = (v03768__02a3**1)
v03796__02a5 = (v03796__02a5*_02a4_coeff).reshape((1, 2))

# op _00MG_exp_a_eval
# LANG: _00MF --> _00MH
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01313__00MH = _00MG_exp_a_eval_a**v01312__00MF

# op _00SU_exp_a_eval
# LANG: _00ST --> _00SV
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01499__00SV = _00SU_exp_a_eval_a**v01498__00ST

# op _00e6_power_combination_eval
# LANG: _ut, _00e5 --> _00e7
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0346__00e7 = (v0345__00e5**1)*(v0311__ut**1)
v0346__00e7 = (v0346__00e7*_00e6_coeff).reshape((1, 40, 30))

# op _00eG_power_combination_eval
# LANG: _ut --> _00eH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0414__00eH = (v0311__ut**1)
v0414__00eH = (v0414__00eH*_00eG_coeff).reshape((1, 40, 30))

# op _00t9_power_combination_eval
# LANG: _ut, _00t8 --> _00ta
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0719__00ta = (v0718__00t8**1)*(v0684__ut**1)
v0719__00ta = (v0719__00ta*_00t9_coeff).reshape((1, 40, 30))

# op _00tJ_power_combination_eval
# LANG: _ut --> _00tK
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0787__00tK = (v0684__ut**1)
v0787__00tK = (v0787__00tK*_00tJ_coeff).reshape((1, 40, 30))

# op _00zj_exp_a_eval
# LANG: _00zi --> _00zk
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0903__00zk = _00zj_exp_a_eval_a**v0902__00zi

# op _015g_exp_a_eval
# LANG: _015f --> _015h
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01909__015h = _015g_exp_a_eval_a**v01908__015f

# op _01D6_power_combination_eval
# LANG: _ut, _01D5 --> _01D7
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02769__01D7 = (v02768__01D5**1)*(v02734__ut**1)
v02769__01D7 = (v02769__01D7*_01D6_coeff).reshape((1, 40, 30))

# op _01DG_power_combination_eval
# LANG: _ut --> _01DH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02837__01DH = (v02734__ut**1)
v02837__01DH = (v02837__01DH*_01DG_coeff).reshape((1, 40, 30))

# op _01Jn_exp_a_eval
# LANG: _01Jm --> _01Jo
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02956__01Jo = _01Jn_exp_a_eval_a**v02955__01Jm

# op _01U4_exp_a_eval
# LANG: _01U3 --> _01U5
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03283__01U5 = _01U4_exp_a_eval_a**v03282__01U3

# op _01_p_exp_a_eval
# LANG: _01_o --> _01_q
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03471__01_q = _01_p_exp_a_eval_a**v03470__01_o

# op _01o3_power_combination_eval
# LANG: _ut, _01o2 --> _01o4
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02396__01o4 = (v02395__01o2**1)*(v02361__ut**1)
v02396__01o4 = (v02396__01o4*_01o3_coeff).reshape((1, 40, 30))

# op _01oD_power_combination_eval
# LANG: _ut --> _01oE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02464__01oE = (v02361__ut**1)
v02464__01oE = (v02464__01oE*_01oD_coeff).reshape((1, 40, 30))

# op _02a6_exp_a_eval
# LANG: _02a5 --> _02a7
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03797__02a7 = _02a6_exp_a_eval_a**v03796__02a5

# op _001C_power_combination_eval
# LANG: hover_altitude --> _001D
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v082__001D = (v046_hover_altitude**4)
v082__001D = (v082__001D*_001C_coeff).reshape((1,))

# op _001O_power_combination_eval
# LANG: hover_altitude --> _001P
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v084__001P = (v046_hover_altitude**3)
v084__001P = (v084__001P*_001O_coeff).reshape((1,))

# op _001__power_combination_eval
# LANG: hover_altitude --> _0020
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v086__0020 = (v046_hover_altitude**2)
v086__0020 = (v086__0020*_001__coeff).reshape((1,))

# op _001d_power_combination_eval
# LANG: hover_altitude --> _001e
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v077__001e = (v046_hover_altitude**6)
v077__001e = (v077__001e*_001d_coeff).reshape((1,))

# op _001q_power_combination_eval
# LANG: hover_altitude --> _001r
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v080__001r = (v046_hover_altitude**5)
v080__001r = (v080__001r*_001q_coeff).reshape((1,))

# op _002b_power_combination_eval
# LANG: hover_altitude --> _002c
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v088__002c = (v046_hover_altitude**1)
v088__002c = (v088__002c*_002b_coeff).reshape((1,))

# op _002n_power_combination_eval
# LANG: hover_altitude --> _002o
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v090__002o = (v046_hover_altitude**0)
v090__002o = (v090__002o*_002n_coeff).reshape((1,))

# op _00MI_log10_eval
# LANG: _00MH --> _00MJ
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01314__00MJ = np.log10(v01313__00MH)

# op _00SW_log10_eval
# LANG: _00SV --> _00SX
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01500__00SX = np.log10(v01499__00SV)

# op _00e8_power_combination_eval
# LANG: _00e7, prandtl_loss_factor --> _00e9
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0347__00e9 = (v0346__00e7**1)*(v0264_prandtl_loss_factor**1)
v0347__00e9 = (v0347__00e9*_00e8_coeff).reshape((1, 40, 30))

# op _00eI_linear_combination_eval
# LANG: _00eH, _tangential_inflow_velocity --> _00eJ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0413__00eJ = _00eI_constant+1*v0231__tangential_inflow_velocity+-1*v0414__00eH

# op _00ek_power_combination_eval
# LANG: _ut --> _00el
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0367__00el = (v0311__ut**1)
v0367__00el = (v0367__00el*_00ek_coeff).reshape((1, 40, 30))

# op _00ey_power_combination_eval
# LANG: _00ch --> _00ez
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0407__00ez = (v0289__00ch**1)
v0407__00ez = (v0407__00ez*_00ey_coeff).reshape((1, 40, 30))

# op _00tB_power_combination_eval
# LANG: _00rk --> _00tC
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0780__00tC = (v0662__00rk**1)
v0780__00tC = (v0780__00tC*_00tB_coeff).reshape((1, 40, 30))

# op _00tL_linear_combination_eval
# LANG: _00tK, _tangential_inflow_velocity --> _00tM
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0786__00tM = _00tL_constant+1*v0604__tangential_inflow_velocity+-1*v0787__00tK

# op _00tb_power_combination_eval
# LANG: _00ta, prandtl_loss_factor --> _00tc
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0720__00tc = (v0719__00ta**1)*(v0637_prandtl_loss_factor**1)
v0720__00tc = (v0720__00tc*_00tb_coeff).reshape((1, 40, 30))

# op _00tn_power_combination_eval
# LANG: _ut --> _00to
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0740__00to = (v0684__ut**1)
v0740__00to = (v0740__00to*_00tn_coeff).reshape((1, 40, 30))

# op _00zl_log10_eval
# LANG: _00zk --> _00zm
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0904__00zm = np.log10(v0903__00zk)

# op _015i_log10_eval
# LANG: _015h --> _015j
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01910__015j = np.log10(v01909__015h)

# op _01D8_power_combination_eval
# LANG: _01D7, prandtl_loss_factor --> _01D9
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02770__01D9 = (v02769__01D7**1)*(v02687_prandtl_loss_factor**1)
v02770__01D9 = (v02770__01D9*_01D8_coeff).reshape((1, 40, 30))

# op _01DI_linear_combination_eval
# LANG: _01DH, _tangential_inflow_velocity --> _01DJ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02836__01DJ = _01DI_constant+1*v02654__tangential_inflow_velocity+-1*v02837__01DH

# op _01Dk_power_combination_eval
# LANG: _ut --> _01Dl
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02790__01Dl = (v02734__ut**1)
v02790__01Dl = (v02790__01Dl*_01Dk_coeff).reshape((1, 40, 30))

# op _01Dy_power_combination_eval
# LANG: _01Bh --> _01Dz
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02830__01Dz = (v02712__01Bh**1)
v02830__01Dz = (v02830__01Dz*_01Dy_coeff).reshape((1, 40, 30))

# op _01Jp_log10_eval
# LANG: _01Jo --> _01Jq
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02957__01Jq = np.log10(v02956__01Jo)

# op _01U6_log10_eval
# LANG: _01U5 --> _01U7
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03284__01U7 = np.log10(v03283__01U5)

# op _01_r_log10_eval
# LANG: _01_q --> _01_s
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03472__01_s = np.log10(v03471__01_q)

# op _01o5_power_combination_eval
# LANG: _01o4, prandtl_loss_factor --> _01o6
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02397__01o6 = (v02396__01o4**1)*(v02314_prandtl_loss_factor**1)
v02397__01o6 = (v02397__01o6*_01o5_coeff).reshape((1, 40, 30))

# op _01oF_linear_combination_eval
# LANG: _01oE, _tangential_inflow_velocity --> _01oG
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02463__01oG = _01oF_constant+1*v02281__tangential_inflow_velocity+-1*v02464__01oE

# op _01oh_power_combination_eval
# LANG: _ut --> _01oi
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02417__01oi = (v02361__ut**1)
v02417__01oi = (v02417__01oi*_01oh_coeff).reshape((1, 40, 30))

# op _01ov_power_combination_eval
# LANG: _01me --> _01ow
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02457__01ow = (v02339__01me**1)
v02457__01ow = (v02457__01ow*_01ov_coeff).reshape((1, 40, 30))

# op _02a8_log10_eval
# LANG: _02a7 --> _02a9
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03798__02a9 = np.log10(v03797__02a7)

# op _001E_power_combination_eval
# LANG: _001D --> _001F
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v083__001F = (v082__001D**1)
v083__001F = (v083__001F*_001E_coeff).reshape((1,))

# op _001Q_power_combination_eval
# LANG: _001P --> _001R
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v085__001R = (v084__001P**1)
v085__001R = (v085__001R*_001Q_coeff).reshape((1,))

# op _001f_power_combination_eval
# LANG: _001e --> _001g
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v078__001g = (v077__001e**1)
v078__001g = (v078__001g*_001f_coeff).reshape((1,))

# op _001s_power_combination_eval
# LANG: _001r --> _001t
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v081__001t = (v080__001r**1)
v081__001t = (v081__001t*_001s_coeff).reshape((1,))

# op _0021_power_combination_eval
# LANG: _0020 --> _0022
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v087__0022 = (v086__0020**1)
v087__0022 = (v087__0022*_0021_coeff).reshape((1,))

# op _002d_power_combination_eval
# LANG: _002c --> _002e
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v089__002e = (v088__002c**1)
v089__002e = (v089__002e*_002d_coeff).reshape((1,))

# op _002p_power_combination_eval
# LANG: _002o --> _002q
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v091__002q = (v090__002o**1)
v091__002q = (v091__002q*_002p_coeff).reshape((1,))

# op _00MK_power_combination_eval
# LANG: _00MJ --> rotor_1_disk_broadband_spl_A_weighted
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model
v01315_rotor_1_disk_broadband_spl_A_weighted = (v01314__00MJ**1)
v01315_rotor_1_disk_broadband_spl_A_weighted = (v01315_rotor_1_disk_broadband_spl_A_weighted*_00MK_coeff).reshape((1, 2))

# op _00SY_power_combination_eval
# LANG: _00SX --> rotor_2_disk_tonal_spl_A_weighted
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model
v01501_rotor_2_disk_tonal_spl_A_weighted = (v01500__00SX**1)
v01501_rotor_2_disk_tonal_spl_A_weighted = (v01501_rotor_2_disk_tonal_spl_A_weighted*_00SY_coeff).reshape((1, 2))

# op _00ci_cos_eval
# LANG: phi_distribution --> _00cj
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0328__00cj = np.cos(v0251_phi_distribution)

# op _00cm_sin_eval
# LANG: phi_distribution --> _00cn
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0395__00cn = np.sin(v0251_phi_distribution)

# op _00eA_power_combination_eval
# LANG: _00ez --> _00eB
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0408__00eB = (v0407__00ez**1)
v0408__00eB = (v0408__00eB*_00eA_coeff).reshape((1, 40, 30))

# op _00eE_power_combination_eval
# LANG: _ux_2 --> _00eF
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0411__00eF = (v0292__ux_2**2)
v0411__00eF = (v0411__00eF*_00eE_coeff).reshape((1, 40, 30))

# op _00eK_power_combination_eval
# LANG: _00eJ --> _00eL
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0415__00eL = (v0413__00eJ**2)
v0415__00eL = (v0415__00eL*_00eK_coeff).reshape((1, 40, 30))

# op _00ea_power_combination_eval
# LANG: _00e9, _dr --> _local_torque
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0348__local_torque = (v0347__00e9**1)*(v0202__dr**1)
v0348__local_torque = (v0348__local_torque*_00ea_coeff).reshape((1, 40, 30))

# op _00ec_power_combination_eval
# LANG: _00c7 --> _00ed
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0360__00ed = (v0296__00c7**1)
v0360__00ed = (v0360__00ed*_00ec_coeff).reshape((1, 40, 30))

# op _00em_linear_combination_eval
# LANG: _00el, _tangential_inflow_velocity --> _00en
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0366__00en = _00em_constant+1*v0231__tangential_inflow_velocity+-1*v0367__00el

# op _00gA_power_combination_eval
# LANG: _ux, _tangential_inflow_velocity --> _00gB
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0424__00gB = (v0231__tangential_inflow_velocity**1)*(v0279__ux**1)
v0424__00gB = (v0424__00gB*_00gA_coeff).reshape((1, 40, 30))

# op _00gE_power_combination_eval
# LANG: _axial_inflow_velocity --> _00gF
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0427__00gF = (v0221__axial_inflow_velocity**1)
v0427__00gF = (v0427__00gF*_00gE_coeff).reshape((1, 40, 30))

# op _00gG_power_combination_eval
# LANG: _ux --> _00gH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0429__00gH = (v0279__ux**2)
v0429__00gH = (v0429__00gH*_00gG_coeff).reshape((1, 40, 30))

# op _00gM_power_combination_eval
# LANG: _axial_inflow_velocity --> _00gN
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0431__00gN = (v0221__axial_inflow_velocity**2)
v0431__00gN = (v0431__00gN*_00gM_coeff).reshape((1, 40, 30))

# op _00gg_power_combination_eval
# LANG: _ut --> _00gh
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0387__00gh = (v0311__ut**1)
v0387__00gh = (v0387__00gh*_00gg_coeff).reshape((1, 40, 30))

# op _00hD_single_tensor_sum_with_axis_eval
# LANG: _rotor_radius --> _00hE
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0458__00hE = np.sum(v0201__rotor_radius, axis = (1, 2)).reshape((1,))

# op _00ht_single_tensor_sum_with_axis_eval
# LANG: _00bM --> _00hu
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0453__00hu = np.sum(v0440__00bM, axis = (1, 2)).reshape((1,))

# op _00rl_cos_eval
# LANG: phi_distribution --> _00rm
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0701__00rm = np.cos(v0624_phi_distribution)

# op _00rp_sin_eval
# LANG: phi_distribution --> _00rq
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0768__00rq = np.sin(v0624_phi_distribution)

# op _00tD_power_combination_eval
# LANG: _00tC --> _00tE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0781__00tE = (v0780__00tC**1)
v0781__00tE = (v0781__00tE*_00tD_coeff).reshape((1, 40, 30))

# op _00tH_power_combination_eval
# LANG: _ux_2 --> _00tI
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0784__00tI = (v0665__ux_2**2)
v0784__00tI = (v0784__00tI*_00tH_coeff).reshape((1, 40, 30))

# op _00tN_power_combination_eval
# LANG: _00tM --> _00tO
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0788__00tO = (v0786__00tM**2)
v0788__00tO = (v0788__00tO*_00tN_coeff).reshape((1, 40, 30))

# op _00td_power_combination_eval
# LANG: _00tc, _dr --> _local_torque
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0721__local_torque = (v0720__00tc**1)*(v0575__dr**1)
v0721__local_torque = (v0721__local_torque*_00td_coeff).reshape((1, 40, 30))

# op _00tf_power_combination_eval
# LANG: _00ra --> _00tg
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0733__00tg = (v0669__00ra**1)
v0733__00tg = (v0733__00tg*_00tf_coeff).reshape((1, 40, 30))

# op _00tp_linear_combination_eval
# LANG: _00to, _tangential_inflow_velocity --> _00tq
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0739__00tq = _00tp_constant+1*v0604__tangential_inflow_velocity+-1*v0740__00to

# op _00vD_power_combination_eval
# LANG: _ux, _tangential_inflow_velocity --> _00vE
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0797__00vE = (v0604__tangential_inflow_velocity**1)*(v0652__ux**1)
v0797__00vE = (v0797__00vE*_00vD_coeff).reshape((1, 40, 30))

# op _00vH_power_combination_eval
# LANG: _axial_inflow_velocity --> _00vI
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0800__00vI = (v0594__axial_inflow_velocity**1)
v0800__00vI = (v0800__00vI*_00vH_coeff).reshape((1, 40, 30))

# op _00vJ_power_combination_eval
# LANG: _ux --> _00vK
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0802__00vK = (v0652__ux**2)
v0802__00vK = (v0802__00vK*_00vJ_coeff).reshape((1, 40, 30))

# op _00vP_power_combination_eval
# LANG: _axial_inflow_velocity --> _00vQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0804__00vQ = (v0594__axial_inflow_velocity**2)
v0804__00vQ = (v0804__00vQ*_00vP_coeff).reshape((1, 40, 30))

# op _00vj_power_combination_eval
# LANG: _ut --> _00vk
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0760__00vk = (v0684__ut**1)
v0760__00vk = (v0760__00vk*_00vj_coeff).reshape((1, 40, 30))

# op _00wG_single_tensor_sum_with_axis_eval
# LANG: _rotor_radius --> _00wH
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0831__00wH = np.sum(v0574__rotor_radius, axis = (1, 2)).reshape((1,))

# op _00ww_single_tensor_sum_with_axis_eval
# LANG: _00qP --> _00wx
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0826__00wx = np.sum(v0813__00qP, axis = (1, 2)).reshape((1,))

# op _00zn_power_combination_eval
# LANG: _00zm --> rotor_1_disk_tonal_spl_A_weighted
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model
v0905_rotor_1_disk_tonal_spl_A_weighted = (v0904__00zm**1)
v0905_rotor_1_disk_tonal_spl_A_weighted = (v0905_rotor_1_disk_tonal_spl_A_weighted*_00zn_coeff).reshape((1, 2))

# op _015k_power_combination_eval
# LANG: _015j --> rotor_2_disk_broadband_spl_A_weighted
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model
v01911_rotor_2_disk_broadband_spl_A_weighted = (v01910__015j**1)
v01911_rotor_2_disk_broadband_spl_A_weighted = (v01911_rotor_2_disk_broadband_spl_A_weighted*_015k_coeff).reshape((1, 2))

# op _01Bi_cos_eval
# LANG: phi_distribution --> _01Bj
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02751__01Bj = np.cos(v02674_phi_distribution)

# op _01Bm_sin_eval
# LANG: phi_distribution --> _01Bn
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02818__01Bn = np.sin(v02674_phi_distribution)

# op _01DA_power_combination_eval
# LANG: _01Dz --> _01DB
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02831__01DB = (v02830__01Dz**1)
v02831__01DB = (v02831__01DB*_01DA_coeff).reshape((1, 40, 30))

# op _01DE_power_combination_eval
# LANG: _ux_2 --> _01DF
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02834__01DF = (v02715__ux_2**2)
v02834__01DF = (v02834__01DF*_01DE_coeff).reshape((1, 40, 30))

# op _01DK_power_combination_eval
# LANG: _01DJ --> _01DL
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02838__01DL = (v02836__01DJ**2)
v02838__01DL = (v02838__01DL*_01DK_coeff).reshape((1, 40, 30))

# op _01Da_power_combination_eval
# LANG: _01D9, _dr --> _local_torque
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02771__local_torque = (v02770__01D9**1)*(v02625__dr**1)
v02771__local_torque = (v02771__local_torque*_01Da_coeff).reshape((1, 40, 30))

# op _01Dc_power_combination_eval
# LANG: _01B7 --> _01Dd
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02783__01Dd = (v02719__01B7**1)
v02783__01Dd = (v02783__01Dd*_01Dc_coeff).reshape((1, 40, 30))

# op _01Dm_linear_combination_eval
# LANG: _01Dl, _tangential_inflow_velocity --> _01Dn
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02789__01Dn = _01Dm_constant+1*v02654__tangential_inflow_velocity+-1*v02790__01Dl

# op _01FA_power_combination_eval
# LANG: _ux, _tangential_inflow_velocity --> _01FB
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02847__01FB = (v02654__tangential_inflow_velocity**1)*(v02702__ux**1)
v02847__01FB = (v02847__01FB*_01FA_coeff).reshape((1, 40, 30))

# op _01FE_power_combination_eval
# LANG: _axial_inflow_velocity --> _01FF
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02850__01FF = (v02644__axial_inflow_velocity**1)
v02850__01FF = (v02850__01FF*_01FE_coeff).reshape((1, 40, 30))

# op _01FG_power_combination_eval
# LANG: _ux --> _01FH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02852__01FH = (v02702__ux**2)
v02852__01FH = (v02852__01FH*_01FG_coeff).reshape((1, 40, 30))

# op _01FM_power_combination_eval
# LANG: _axial_inflow_velocity --> _01FN
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02854__01FN = (v02644__axial_inflow_velocity**2)
v02854__01FN = (v02854__01FN*_01FM_coeff).reshape((1, 40, 30))

# op _01Fg_power_combination_eval
# LANG: _ut --> _01Fh
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02810__01Fh = (v02734__ut**1)
v02810__01Fh = (v02810__01Fh*_01Fg_coeff).reshape((1, 40, 30))

# op _01GD_single_tensor_sum_with_axis_eval
# LANG: _rotor_radius --> _01GE
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02881__01GE = np.sum(v02624__rotor_radius, axis = (1, 2)).reshape((1,))

# op _01Gt_single_tensor_sum_with_axis_eval
# LANG: _01AM --> _01Gu
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02876__01Gu = np.sum(v02863__01AM, axis = (1, 2)).reshape((1,))

# op _01Jr_power_combination_eval
# LANG: _01Jq --> rotor_1_disk_tonal_spl_A_weighted
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02958_rotor_1_disk_tonal_spl_A_weighted = (v02957__01Jq**1)
v02958_rotor_1_disk_tonal_spl_A_weighted = (v02958_rotor_1_disk_tonal_spl_A_weighted*_01Jr_coeff).reshape((1, 2))

# op _01U8_power_combination_eval
# LANG: _01U7 --> rotor_1_disk_broadband_spl_A_weighted
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model
v03285_rotor_1_disk_broadband_spl_A_weighted = (v03284__01U7**1)
v03285_rotor_1_disk_broadband_spl_A_weighted = (v03285_rotor_1_disk_broadband_spl_A_weighted*_01U8_coeff).reshape((1, 2))

# op _01_t_power_combination_eval
# LANG: _01_s --> rotor_2_disk_tonal_spl_A_weighted
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03473_rotor_2_disk_tonal_spl_A_weighted = (v03472__01_s**1)
v03473_rotor_2_disk_tonal_spl_A_weighted = (v03473_rotor_2_disk_tonal_spl_A_weighted*_01_t_coeff).reshape((1, 2))

# op _01mf_cos_eval
# LANG: phi_distribution --> _01mg
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02378__01mg = np.cos(v02301_phi_distribution)

# op _01mj_sin_eval
# LANG: phi_distribution --> _01mk
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02445__01mk = np.sin(v02301_phi_distribution)

# op _01o7_power_combination_eval
# LANG: _01o6, _dr --> _local_torque
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02398__local_torque = (v02397__01o6**1)*(v02252__dr**1)
v02398__local_torque = (v02398__local_torque*_01o7_coeff).reshape((1, 40, 30))

# op _01o9_power_combination_eval
# LANG: _01m4 --> _01oa
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02410__01oa = (v02346__01m4**1)
v02410__01oa = (v02410__01oa*_01o9_coeff).reshape((1, 40, 30))

# op _01oB_power_combination_eval
# LANG: _ux_2 --> _01oC
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02461__01oC = (v02342__ux_2**2)
v02461__01oC = (v02461__01oC*_01oB_coeff).reshape((1, 40, 30))

# op _01oH_power_combination_eval
# LANG: _01oG --> _01oI
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02465__01oI = (v02463__01oG**2)
v02465__01oI = (v02465__01oI*_01oH_coeff).reshape((1, 40, 30))

# op _01oj_linear_combination_eval
# LANG: _01oi, _tangential_inflow_velocity --> _01ok
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02416__01ok = _01oj_constant+1*v02281__tangential_inflow_velocity+-1*v02417__01oi

# op _01ox_power_combination_eval
# LANG: _01ow --> _01oy
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02458__01oy = (v02457__01ow**1)
v02458__01oy = (v02458__01oy*_01ox_coeff).reshape((1, 40, 30))

# op _01qB_power_combination_eval
# LANG: _axial_inflow_velocity --> _01qC
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02477__01qC = (v02271__axial_inflow_velocity**1)
v02477__01qC = (v02477__01qC*_01qB_coeff).reshape((1, 40, 30))

# op _01qD_power_combination_eval
# LANG: _ux --> _01qE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02479__01qE = (v02329__ux**2)
v02479__01qE = (v02479__01qE*_01qD_coeff).reshape((1, 40, 30))

# op _01qJ_power_combination_eval
# LANG: _axial_inflow_velocity --> _01qK
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02481__01qK = (v02271__axial_inflow_velocity**2)
v02481__01qK = (v02481__01qK*_01qJ_coeff).reshape((1, 40, 30))

# op _01qd_power_combination_eval
# LANG: _ut --> _01qe
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02437__01qe = (v02361__ut**1)
v02437__01qe = (v02437__01qe*_01qd_coeff).reshape((1, 40, 30))

# op _01qx_power_combination_eval
# LANG: _ux, _tangential_inflow_velocity --> _01qy
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02474__01qy = (v02281__tangential_inflow_velocity**1)*(v02329__ux**1)
v02474__01qy = (v02474__01qy*_01qx_coeff).reshape((1, 40, 30))

# op _01rA_single_tensor_sum_with_axis_eval
# LANG: _rotor_radius --> _01rB
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02508__01rB = np.sum(v02251__rotor_radius, axis = (1, 2)).reshape((1,))

# op _01rq_single_tensor_sum_with_axis_eval
# LANG: _01lJ --> _01rr
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02503__01rr = np.sum(v02490__01lJ, axis = (1, 2)).reshape((1,))

# op _02aa_power_combination_eval
# LANG: _02a9 --> rotor_2_disk_broadband_spl_A_weighted
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model
v03799_rotor_2_disk_broadband_spl_A_weighted = (v03798__02a9**1)
v03799_rotor_2_disk_broadband_spl_A_weighted = (v03799_rotor_2_disk_broadband_spl_A_weighted*_02aa_coeff).reshape((1, 2))

# op _001h_indexed_passthrough_eval
# LANG: _001g, _001t, _001F, _001R, _0022, _002e, _002q --> temp_temperature
# SHAPES: (1,), (1,), (1,), (1,), (1,), (1,), (1,) --> (7,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v079_temp_temperature__temp[i_v078__001g__001h_indexed_passthrough_eval] = v078__001g.flatten()
v079_temp_temperature = v079_temp_temperature__temp.copy()
v079_temp_temperature__temp[i_v081__001t__001h_indexed_passthrough_eval] = v081__001t.flatten()
v079_temp_temperature = v079_temp_temperature__temp.copy()
v079_temp_temperature__temp[i_v083__001F__001h_indexed_passthrough_eval] = v083__001F.flatten()
v079_temp_temperature = v079_temp_temperature__temp.copy()
v079_temp_temperature__temp[i_v085__001R__001h_indexed_passthrough_eval] = v085__001R.flatten()
v079_temp_temperature = v079_temp_temperature__temp.copy()
v079_temp_temperature__temp[i_v087__0022__001h_indexed_passthrough_eval] = v087__0022.flatten()
v079_temp_temperature = v079_temp_temperature__temp.copy()
v079_temp_temperature__temp[i_v089__002e__001h_indexed_passthrough_eval] = v089__002e.flatten()
v079_temp_temperature = v079_temp_temperature__temp.copy()
v079_temp_temperature__temp[i_v091__002q__001h_indexed_passthrough_eval] = v091__002q.flatten()
v079_temp_temperature = v079_temp_temperature__temp.copy()

# op _00ck_power_combination_eval
# LANG: _00cj, Cl --> _00cl
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0254_Cl = v0254_Cl.reshape((1, 40, 30))
v0327__00cl = (v0254_Cl**1)*(v0328__00cj**1)
v0327__00cl = (v0327__00cl*_00ck_coeff).reshape((1, 40, 30))
v0254_Cl = v0254_Cl.reshape((1200,))

# op _00co_power_combination_eval
# LANG: _00cn, Cl --> _00cp
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0254_Cl = v0254_Cl.reshape((1, 40, 30))
v0394__00cp = (v0254_Cl**1)*(v0395__00cn**1)
v0394__00cp = (v0394__00cp*_00co_coeff).reshape((1, 40, 30))
v0254_Cl = v0254_Cl.reshape((1200,))

# op _00eC_power_combination_eval
# LANG: _00bU, _00eB --> _00eD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0409__00eD = (v0408__00eB**1)*(v0320__00bU**1)
v0409__00eD = (v0409__00eD*_00eC_coeff).reshape((1, 40, 30))

# op _00eM_linear_combination_eval
# LANG: _00eF, _00eL --> _00eN
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0412__00eN = _00eM_constant+1*v0411__00eF+1*v0415__00eL

# op _00ee_power_combination_eval
# LANG: _00ed --> _00ef
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0361__00ef = (v0360__00ed**1)
v0361__00ef = (v0361__00ef*_00ee_coeff).reshape((1, 40, 30))

# op _00ei_power_combination_eval
# LANG: _ux_2 --> _00ej
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0364__00ej = (v0292__ux_2**2)
v0364__00ej = (v0364__00ej*_00ei_coeff).reshape((1, 40, 30))

# op _00eo_power_combination_eval
# LANG: _00en --> _00ep
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0368__00ep = (v0366__00en**2)
v0368__00ep = (v0368__00ep*_00eo_coeff).reshape((1, 40, 30))

# op _00fL_power_combination_eval
# LANG: _ut --> _00fM
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0403__00fM = (v0311__ut**1)
v0403__00fM = (v0403__00fM*_00fL_coeff).reshape((1, 40, 30))

# op _00fp_power_combination_eval
# LANG: _ut --> _00fq
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0336__00fq = (v0311__ut**1)
v0336__00fq = (v0336__00fq*_00fp_coeff).reshape((1, 40, 30))

# op _00gC_power_combination_eval
# LANG: _ut, _00gB --> _00gD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0425__00gD = (v0424__00gB**1)*(v0311__ut**1)
v0425__00gD = (v0425__00gD*_00gC_coeff).reshape((1, 40, 30))

# op _00gI_power_combination_eval
# LANG: _00gF, _00gH --> _00gJ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0428__00gJ = (v0427__00gF**1)*(v0429__00gH**1)
v0428__00gJ = (v0428__00gJ*_00gI_coeff).reshape((1, 40, 30))

# op _00gO_power_combination_eval
# LANG: _00gN --> _00gP
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0432__00gP = (v0431__00gN**1)
v0432__00gP = (v0432__00gP*_00gO_coeff).reshape((1, 40, 30))

# op _00ga_single_tensor_sum_with_axis_eval
# LANG: _local_torque --> _00gb
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0349__00gb = np.sum(v0348__local_torque, axis = (1, 2)).reshape((1,))

# op _00ge_power_combination_eval
# LANG: _00bU --> _00gf
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0384__00gf = (v0320__00bU**1)
v0384__00gf = (v0384__00gf*_00ge_coeff).reshape((1, 40, 30))

# op _00gi_linear_combination_eval
# LANG: _00gh, _tangential_inflow_velocity --> _00gj
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0386__00gj = _00gi_constant+1*v0231__tangential_inflow_velocity+-1*v0387__00gh

# op _00hF_power_combination_eval
# LANG: _00hE --> _00hG
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0459__00hG = (v0458__00hE**1)
v0459__00hG = (v0459__00hG*_00hF_coeff).reshape((1,))

# op _00hR_power_combination_eval
# LANG: _00bM, _axial_inflow_velocity --> _00hS
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0465__00hS = (v0221__axial_inflow_velocity**1)*(v0440__00bM**-1)
v0465__00hS = (v0465__00hS*_00hR_coeff).reshape((1, 40, 30))

# op _00hT_power_combination_eval
# LANG: _rotor_radius --> _00hU
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0467__00hU = (v0201__rotor_radius**1)
v0467__00hU = (v0467__00hU*_00hT_coeff).reshape((1, 40, 30))

# op _00hv_power_combination_eval
# LANG: _00hu --> _00hw
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0454__00hw = (v0453__00hu**1)
v0454__00hw = (v0454__00hw*_00hv_coeff).reshape((1,))

# op _00rn_power_combination_eval
# LANG: _00rm, Cl --> _00ro
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0627_Cl = v0627_Cl.reshape((1, 40, 30))
v0700__00ro = (v0627_Cl**1)*(v0701__00rm**1)
v0700__00ro = (v0700__00ro*_00rn_coeff).reshape((1, 40, 30))
v0627_Cl = v0627_Cl.reshape((1200,))

# op _00rr_power_combination_eval
# LANG: _00rq, Cl --> _00rs
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0627_Cl = v0627_Cl.reshape((1, 40, 30))
v0767__00rs = (v0627_Cl**1)*(v0768__00rq**1)
v0767__00rs = (v0767__00rs*_00rr_coeff).reshape((1, 40, 30))
v0627_Cl = v0627_Cl.reshape((1200,))

# op _00tF_power_combination_eval
# LANG: _00qX, _00tE --> _00tG
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0782__00tG = (v0781__00tE**1)*(v0693__00qX**1)
v0782__00tG = (v0782__00tG*_00tF_coeff).reshape((1, 40, 30))

# op _00tP_linear_combination_eval
# LANG: _00tI, _00tO --> _00tQ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0785__00tQ = _00tP_constant+1*v0784__00tI+1*v0788__00tO

# op _00th_power_combination_eval
# LANG: _00tg --> _00ti
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0734__00ti = (v0733__00tg**1)
v0734__00ti = (v0734__00ti*_00th_coeff).reshape((1, 40, 30))

# op _00tl_power_combination_eval
# LANG: _ux_2 --> _00tm
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0737__00tm = (v0665__ux_2**2)
v0737__00tm = (v0737__00tm*_00tl_coeff).reshape((1, 40, 30))

# op _00tr_power_combination_eval
# LANG: _00tq --> _00ts
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0741__00ts = (v0739__00tq**2)
v0741__00ts = (v0741__00ts*_00tr_coeff).reshape((1, 40, 30))

# op _00uO_power_combination_eval
# LANG: _ut --> _00uP
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0776__00uP = (v0684__ut**1)
v0776__00uP = (v0776__00uP*_00uO_coeff).reshape((1, 40, 30))

# op _00us_power_combination_eval
# LANG: _ut --> _00ut
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0709__00ut = (v0684__ut**1)
v0709__00ut = (v0709__00ut*_00us_coeff).reshape((1, 40, 30))

# op _00vF_power_combination_eval
# LANG: _ut, _00vE --> _00vG
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0798__00vG = (v0797__00vE**1)*(v0684__ut**1)
v0798__00vG = (v0798__00vG*_00vF_coeff).reshape((1, 40, 30))

# op _00vL_power_combination_eval
# LANG: _00vI, _00vK --> _00vM
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0801__00vM = (v0800__00vI**1)*(v0802__00vK**1)
v0801__00vM = (v0801__00vM*_00vL_coeff).reshape((1, 40, 30))

# op _00vR_power_combination_eval
# LANG: _00vQ --> _00vS
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0805__00vS = (v0804__00vQ**1)
v0805__00vS = (v0805__00vS*_00vR_coeff).reshape((1, 40, 30))

# op _00vd_single_tensor_sum_with_axis_eval
# LANG: _local_torque --> _00ve
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0722__00ve = np.sum(v0721__local_torque, axis = (1, 2)).reshape((1,))

# op _00vh_power_combination_eval
# LANG: _00qX --> _00vi
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0757__00vi = (v0693__00qX**1)
v0757__00vi = (v0757__00vi*_00vh_coeff).reshape((1, 40, 30))

# op _00vl_linear_combination_eval
# LANG: _00vk, _tangential_inflow_velocity --> _00vm
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0759__00vm = _00vl_constant+1*v0604__tangential_inflow_velocity+-1*v0760__00vk

# op _00wI_power_combination_eval
# LANG: _00wH --> _00wJ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0832__00wJ = (v0831__00wH**1)
v0832__00wJ = (v0832__00wJ*_00wI_coeff).reshape((1,))

# op _00wU_power_combination_eval
# LANG: _00qP, _axial_inflow_velocity --> _00wV
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0838__00wV = (v0594__axial_inflow_velocity**1)*(v0813__00qP**-1)
v0838__00wV = (v0838__00wV*_00wU_coeff).reshape((1, 40, 30))

# op _00wW_power_combination_eval
# LANG: _rotor_radius --> _00wX
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0840__00wX = (v0574__rotor_radius**1)
v0840__00wX = (v0840__00wX*_00wW_coeff).reshape((1, 40, 30))

# op _00wy_power_combination_eval
# LANG: _00wx --> _00wz
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0827__00wz = (v0826__00wx**1)
v0827__00wz = (v0827__00wz*_00wy_coeff).reshape((1,))

# op _019B expand_array_eval
# LANG: rotor_1_disk_tonal_spl --> _019C
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02041__019C = np.einsum('bc,a->abc', v01243_rotor_1_disk_tonal_spl.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _019F expand_array_eval
# LANG: rotor_1_disk_broadband_spl --> _019G
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02043__019G = np.einsum('bc,a->abc', v01432_rotor_1_disk_broadband_spl.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _019I expand_array_eval
# LANG: rotor_2_disk_tonal_spl --> _019J
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02044__019J = np.einsum('bc,a->abc', v01839_rotor_2_disk_tonal_spl.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _019L expand_array_eval
# LANG: rotor_2_disk_broadband_spl --> _019M
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02045__019M = np.einsum('bc,a->abc', v02028_rotor_2_disk_broadband_spl.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _019Z expand_array_eval
# LANG: rotor_1_disk_tonal_spl_A_weighted --> _019_
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02051__019_ = np.einsum('bc,a->abc', v0905_rotor_1_disk_tonal_spl_A_weighted.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _01Bk_power_combination_eval
# LANG: _01Bj, Cl --> _01Bl
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02677_Cl = v02677_Cl.reshape((1, 40, 30))
v02750__01Bl = (v02677_Cl**1)*(v02751__01Bj**1)
v02750__01Bl = (v02750__01Bl*_01Bk_coeff).reshape((1, 40, 30))
v02677_Cl = v02677_Cl.reshape((1200,))

# op _01Bo_power_combination_eval
# LANG: _01Bn, Cl --> _01Bp
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02677_Cl = v02677_Cl.reshape((1, 40, 30))
v02817__01Bp = (v02677_Cl**1)*(v02818__01Bn**1)
v02817__01Bp = (v02817__01Bp*_01Bo_coeff).reshape((1, 40, 30))
v02677_Cl = v02677_Cl.reshape((1200,))

# op _01DC_power_combination_eval
# LANG: _01AU, _01DB --> _01DD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02832__01DD = (v02831__01DB**1)*(v02743__01AU**1)
v02832__01DD = (v02832__01DD*_01DC_coeff).reshape((1, 40, 30))

# op _01DM_linear_combination_eval
# LANG: _01DF, _01DL --> _01DN
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02835__01DN = _01DM_constant+1*v02834__01DF+1*v02838__01DL

# op _01De_power_combination_eval
# LANG: _01Dd --> _01Df
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02784__01Df = (v02783__01Dd**1)
v02784__01Df = (v02784__01Df*_01De_coeff).reshape((1, 40, 30))

# op _01Di_power_combination_eval
# LANG: _ux_2 --> _01Dj
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02787__01Dj = (v02715__ux_2**2)
v02787__01Dj = (v02787__01Dj*_01Di_coeff).reshape((1, 40, 30))

# op _01Do_power_combination_eval
# LANG: _01Dn --> _01Dp
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02791__01Dp = (v02789__01Dn**2)
v02791__01Dp = (v02791__01Dp*_01Do_coeff).reshape((1, 40, 30))

# op _01EL_power_combination_eval
# LANG: _ut --> _01EM
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02826__01EM = (v02734__ut**1)
v02826__01EM = (v02826__01EM*_01EL_coeff).reshape((1, 40, 30))

# op _01Ep_power_combination_eval
# LANG: _ut --> _01Eq
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02759__01Eq = (v02734__ut**1)
v02759__01Eq = (v02759__01Eq*_01Ep_coeff).reshape((1, 40, 30))

# op _01FC_power_combination_eval
# LANG: _ut, _01FB --> _01FD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02848__01FD = (v02847__01FB**1)*(v02734__ut**1)
v02848__01FD = (v02848__01FD*_01FC_coeff).reshape((1, 40, 30))

# op _01FI_power_combination_eval
# LANG: _01FF, _01FH --> _01FJ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02851__01FJ = (v02850__01FF**1)*(v02852__01FH**1)
v02851__01FJ = (v02851__01FJ*_01FI_coeff).reshape((1, 40, 30))

# op _01FO_power_combination_eval
# LANG: _01FN --> _01FP
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02855__01FP = (v02854__01FN**1)
v02855__01FP = (v02855__01FP*_01FO_coeff).reshape((1, 40, 30))

# op _01Fa_single_tensor_sum_with_axis_eval
# LANG: _local_torque --> _01Fb
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02772__01Fb = np.sum(v02771__local_torque, axis = (1, 2)).reshape((1,))

# op _01Fe_power_combination_eval
# LANG: _01AU --> _01Ff
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02807__01Ff = (v02743__01AU**1)
v02807__01Ff = (v02807__01Ff*_01Fe_coeff).reshape((1, 40, 30))

# op _01Fi_linear_combination_eval
# LANG: _01Fh, _tangential_inflow_velocity --> _01Fj
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02809__01Fj = _01Fi_constant+1*v02654__tangential_inflow_velocity+-1*v02810__01Fh

# op _01GF_power_combination_eval
# LANG: _01GE --> _01GG
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02882__01GG = (v02881__01GE**1)
v02882__01GG = (v02882__01GG*_01GF_coeff).reshape((1,))

# op _01GR_power_combination_eval
# LANG: _01AM, _axial_inflow_velocity --> _01GS
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02888__01GS = (v02644__axial_inflow_velocity**1)*(v02863__01AM**-1)
v02888__01GS = (v02888__01GS*_01GR_coeff).reshape((1, 40, 30))

# op _01GT_power_combination_eval
# LANG: _rotor_radius --> _01GU
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02890__01GU = (v02624__rotor_radius**1)
v02890__01GU = (v02890__01GU*_01GT_coeff).reshape((1, 40, 30))

# op _01Gv_power_combination_eval
# LANG: _01Gu --> _01Gw
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02877__01Gw = (v02876__01Gu**1)
v02877__01Gw = (v02877__01Gw*_01Gv_coeff).reshape((1,))

# op _01a2 expand_array_eval
# LANG: rotor_1_disk_broadband_spl_A_weighted --> _01a3
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02053__01a3 = np.einsum('bc,a->abc', v01315_rotor_1_disk_broadband_spl_A_weighted.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _01a5 expand_array_eval
# LANG: rotor_2_disk_tonal_spl_A_weighted --> _01a6
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02054__01a6 = np.einsum('bc,a->abc', v01501_rotor_2_disk_tonal_spl_A_weighted.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _01a8 expand_array_eval
# LANG: rotor_2_disk_broadband_spl_A_weighted --> _01a9
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02055__01a9 = np.einsum('bc,a->abc', v01911_rotor_2_disk_broadband_spl_A_weighted.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _01mh_power_combination_eval
# LANG: _01mg, Cl --> _01mi
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02304_Cl = v02304_Cl.reshape((1, 40, 30))
v02377__01mi = (v02304_Cl**1)*(v02378__01mg**1)
v02377__01mi = (v02377__01mi*_01mh_coeff).reshape((1, 40, 30))
v02304_Cl = v02304_Cl.reshape((1200,))

# op _01ml_power_combination_eval
# LANG: _01mk, Cl --> _01mm
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02304_Cl = v02304_Cl.reshape((1, 40, 30))
v02444__01mm = (v02304_Cl**1)*(v02445__01mk**1)
v02444__01mm = (v02444__01mm*_01ml_coeff).reshape((1, 40, 30))
v02304_Cl = v02304_Cl.reshape((1200,))

# op _01oJ_linear_combination_eval
# LANG: _01oC, _01oI --> _01oK
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02462__01oK = _01oJ_constant+1*v02461__01oC+1*v02465__01oI

# op _01ob_power_combination_eval
# LANG: _01oa --> _01oc
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02411__01oc = (v02410__01oa**1)
v02411__01oc = (v02411__01oc*_01ob_coeff).reshape((1, 40, 30))

# op _01of_power_combination_eval
# LANG: _ux_2 --> _01og
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02414__01og = (v02342__ux_2**2)
v02414__01og = (v02414__01og*_01of_coeff).reshape((1, 40, 30))

# op _01ol_power_combination_eval
# LANG: _01ok --> _01om
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02418__01om = (v02416__01ok**2)
v02418__01om = (v02418__01om*_01ol_coeff).reshape((1, 40, 30))

# op _01oz_power_combination_eval
# LANG: _01lR, _01oy --> _01oA
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02459__01oA = (v02458__01oy**1)*(v02370__01lR**1)
v02459__01oA = (v02459__01oA*_01oz_coeff).reshape((1, 40, 30))

# op _01pI_power_combination_eval
# LANG: _ut --> _01pJ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02453__01pJ = (v02361__ut**1)
v02453__01pJ = (v02453__01pJ*_01pI_coeff).reshape((1, 40, 30))

# op _01pm_power_combination_eval
# LANG: _ut --> _01pn
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02386__01pn = (v02361__ut**1)
v02386__01pn = (v02386__01pn*_01pm_coeff).reshape((1, 40, 30))

# op _01q7_single_tensor_sum_with_axis_eval
# LANG: _local_torque --> _01q8
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02399__01q8 = np.sum(v02398__local_torque, axis = (1, 2)).reshape((1,))

# op _01qF_power_combination_eval
# LANG: _01qC, _01qE --> _01qG
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02478__01qG = (v02477__01qC**1)*(v02479__01qE**1)
v02478__01qG = (v02478__01qG*_01qF_coeff).reshape((1, 40, 30))

# op _01qL_power_combination_eval
# LANG: _01qK --> _01qM
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02482__01qM = (v02481__01qK**1)
v02482__01qM = (v02482__01qM*_01qL_coeff).reshape((1, 40, 30))

# op _01qb_power_combination_eval
# LANG: _01lR --> _01qc
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02434__01qc = (v02370__01lR**1)
v02434__01qc = (v02434__01qc*_01qb_coeff).reshape((1, 40, 30))

# op _01qf_linear_combination_eval
# LANG: _01qe, _tangential_inflow_velocity --> _01qg
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02436__01qg = _01qf_constant+1*v02281__tangential_inflow_velocity+-1*v02437__01qe

# op _01qz_power_combination_eval
# LANG: _ut, _01qy --> _01qA
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02475__01qA = (v02474__01qy**1)*(v02361__ut**1)
v02475__01qA = (v02475__01qA*_01qz_coeff).reshape((1, 40, 30))

# op _01rC_power_combination_eval
# LANG: _01rB --> _01rD
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02509__01rD = (v02508__01rB**1)
v02509__01rD = (v02509__01rD*_01rC_coeff).reshape((1,))

# op _01rO_power_combination_eval
# LANG: _01lJ, _axial_inflow_velocity --> _01rP
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02515__01rP = (v02271__axial_inflow_velocity**1)*(v02490__01lJ**-1)
v02515__01rP = (v02515__01rP*_01rO_coeff).reshape((1, 40, 30))

# op _01rQ_power_combination_eval
# LANG: _rotor_radius --> _01rR
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02517__01rR = (v02251__rotor_radius**1)
v02517__01rR = (v02517__01rR*_01rQ_coeff).reshape((1, 40, 30))

# op _01rs_power_combination_eval
# LANG: _01rr --> _01rt
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02504__01rt = (v02503__01rr**1)
v02504__01rt = (v02504__01rt*_01rs_coeff).reshape((1,))

# op _02eB expand_array_eval
# LANG: rotor_2_disk_broadband_spl --> _02eC
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03933__02eC = np.einsum('bc,a->abc', v03916_rotor_2_disk_broadband_spl.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02eP expand_array_eval
# LANG: rotor_1_disk_tonal_spl_A_weighted --> _02eQ
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03939__02eQ = np.einsum('bc,a->abc', v02958_rotor_1_disk_tonal_spl_A_weighted.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02eT expand_array_eval
# LANG: rotor_1_disk_broadband_spl_A_weighted --> _02eU
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03941__02eU = np.einsum('bc,a->abc', v03285_rotor_1_disk_broadband_spl_A_weighted.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02eW expand_array_eval
# LANG: rotor_2_disk_tonal_spl_A_weighted --> _02eX
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03942__02eX = np.einsum('bc,a->abc', v03473_rotor_2_disk_tonal_spl_A_weighted.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02eZ expand_array_eval
# LANG: rotor_2_disk_broadband_spl_A_weighted --> _02e_
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03943__02e_ = np.einsum('bc,a->abc', v03799_rotor_2_disk_broadband_spl_A_weighted.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02er expand_array_eval
# LANG: rotor_1_disk_tonal_spl --> _02es
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03929__02es = np.einsum('bc,a->abc', v03226_rotor_1_disk_tonal_spl.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02ev expand_array_eval
# LANG: rotor_1_disk_broadband_spl --> _02ew
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03931__02ew = np.einsum('bc,a->abc', v03402_rotor_1_disk_broadband_spl.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02ey expand_array_eval
# LANG: rotor_2_disk_tonal_spl --> _02ez
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03932__02ez = np.einsum('bc,a->abc', v03740_rotor_2_disk_tonal_spl.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _002v single_tensor_sum_no_axis_eval
# LANG: temp_temperature --> hover_temperature
# SHAPES: (7,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v092_hover_temperature = np.sum(v079_temp_temperature).reshape((1,))

# op _0056_decompose_eval
# LANG: T --> _0057
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0143__0057 = ((v0341_T.flatten())[src_indices__0057__0056]).reshape((1,))

# op _00eO_power_combination_eval
# LANG: _00eD, _00eN --> _00eP
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0410__00eP = (v0409__00eD**1)*(v0412__00eN**1)
v0410__00eP = (v0410__00eP*_00eO_coeff).reshape((1, 40, 30))

# op _00eg_power_combination_eval
# LANG: _00bU, _00ef --> _00eh
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0362__00eh = (v0361__00ef**1)*(v0320__00bU**1)
v0362__00eh = (v0362__00eh*_00eg_coeff).reshape((1, 40, 30))

# op _00eq_linear_combination_eval
# LANG: _00ej, _00ep --> _00er
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0365__00er = _00eq_constant+1*v0364__00ej+1*v0368__00ep

# op _00fD_power_combination_eval
# LANG: _00cp --> _00fE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0396__00fE = (v0394__00cp**1)
v0396__00fE = (v0396__00fE*_00fD_coeff).reshape((1, 40, 30))

# op _00fN_linear_combination_eval
# LANG: _00fM, _tangential_inflow_velocity --> _00fO
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0402__00fO = _00fN_constant+1*v0231__tangential_inflow_velocity+-1*v0403__00fM

# op _00fh_power_combination_eval
# LANG: _00cl --> _00fi
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0329__00fi = (v0327__00cl**1)
v0329__00fi = (v0329__00fi*_00fh_coeff).reshape((1, 40, 30))

# op _00fr_linear_combination_eval
# LANG: _00fq, _tangential_inflow_velocity --> _00fs
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0335__00fs = _00fr_constant+1*v0231__tangential_inflow_velocity+-1*v0336__00fq

# op _00gK_linear_combination_eval
# LANG: _00gD, _00gJ --> _00gL
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0426__00gL = _00gK_constant+1*v0425__00gD+-1*v0428__00gJ

# op _00gQ_power_combination_eval
# LANG: _ux, _00gP --> _00gR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0433__00gR = (v0432__00gP**1)*(v0279__ux**1)
v0433__00gR = (v0433__00gR*_00gQ_coeff).reshape((1, 40, 30))

# op _00gc_power_combination_eval
# LANG: _00gb --> total_torque
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0350_total_torque = (v0349__00gb**1)
v0350_total_torque = (v0350_total_torque*_00gc_coeff).reshape((1,))

# op _00gk_power_combination_eval
# LANG: _00gf, _00gj --> _00gl
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0385__00gl = (v0384__00gf**1)*(v0386__00gj**1)
v0385__00gl = (v0385__00gl*_00gk_coeff).reshape((1, 40, 30))

# op _00gw_power_combination_eval
# LANG: _radius --> _00gx
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0421__00gx = (v0214__radius**1)
v0421__00gx = (v0421__00gx*_00gw_coeff).reshape((1, 40, 30))

# op _00hH_power_combination_eval
# LANG: _00hG --> _00hI
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0460__00hI = (v0459__00hG**1)
v0460__00hI = (v0460__00hI*_00hH_coeff).reshape((1,))

# op _00hV_power_combination_eval
# LANG: _00hS, _00hU --> _00hW
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0466__00hW = (v0465__00hS**1)*(v0467__00hU**-1)
v0466__00hW = (v0466__00hW*_00hV_coeff).reshape((1, 40, 30))

# op _00hx_power_combination_eval
# LANG: _00hw --> _00hy
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0455__00hy = (v0454__00hw**1)
v0455__00hy = (v0455__00hy*_00hx_coeff).reshape((1,))

# op _00k9_decompose_eval
# LANG: T --> _00ka
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0516__00ka = ((v0714_T.flatten())[src_indices__00ka__00k9]).reshape((1,))

# op _00tR_power_combination_eval
# LANG: _00tG, _00tQ --> _00tS
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0783__00tS = (v0782__00tG**1)*(v0785__00tQ**1)
v0783__00tS = (v0783__00tS*_00tR_coeff).reshape((1, 40, 30))

# op _00tj_power_combination_eval
# LANG: _00qX, _00ti --> _00tk
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0735__00tk = (v0734__00ti**1)*(v0693__00qX**1)
v0735__00tk = (v0735__00tk*_00tj_coeff).reshape((1, 40, 30))

# op _00tt_linear_combination_eval
# LANG: _00tm, _00ts --> _00tu
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0738__00tu = _00tt_constant+1*v0737__00tm+1*v0741__00ts

# op _00uG_power_combination_eval
# LANG: _00rs --> _00uH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0769__00uH = (v0767__00rs**1)
v0769__00uH = (v0769__00uH*_00uG_coeff).reshape((1, 40, 30))

# op _00uQ_linear_combination_eval
# LANG: _00uP, _tangential_inflow_velocity --> _00uR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0775__00uR = _00uQ_constant+1*v0604__tangential_inflow_velocity+-1*v0776__00uP

# op _00uk_power_combination_eval
# LANG: _00ro --> _00ul
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0702__00ul = (v0700__00ro**1)
v0702__00ul = (v0702__00ul*_00uk_coeff).reshape((1, 40, 30))

# op _00uu_linear_combination_eval
# LANG: _00ut, _tangential_inflow_velocity --> _00uv
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0708__00uv = _00uu_constant+1*v0604__tangential_inflow_velocity+-1*v0709__00ut

# op _00vN_linear_combination_eval
# LANG: _00vG, _00vM --> _00vO
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0799__00vO = _00vN_constant+1*v0798__00vG+-1*v0801__00vM

# op _00vT_power_combination_eval
# LANG: _ux, _00vS --> _00vU
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0806__00vU = (v0805__00vS**1)*(v0652__ux**1)
v0806__00vU = (v0806__00vU*_00vT_coeff).reshape((1, 40, 30))

# op _00vf_power_combination_eval
# LANG: _00ve --> total_torque
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0723_total_torque = (v0722__00ve**1)
v0723_total_torque = (v0723_total_torque*_00vf_coeff).reshape((1,))

# op _00vn_power_combination_eval
# LANG: _00vi, _00vm --> _00vo
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0758__00vo = (v0757__00vi**1)*(v0759__00vm**1)
v0758__00vo = (v0758__00vo*_00vn_coeff).reshape((1, 40, 30))

# op _00vz_power_combination_eval
# LANG: _radius --> _00vA
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0794__00vA = (v0587__radius**1)
v0794__00vA = (v0794__00vA*_00vz_coeff).reshape((1, 40, 30))

# op _00wA_power_combination_eval
# LANG: _00wz --> _00wB
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0828__00wB = (v0827__00wz**1)
v0828__00wB = (v0828__00wB*_00wA_coeff).reshape((1,))

# op _00wK_power_combination_eval
# LANG: _00wJ --> _00wL
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0833__00wL = (v0832__00wJ**1)
v0833__00wL = (v0833__00wL*_00wK_coeff).reshape((1,))

# op _00wY_power_combination_eval
# LANG: _00wV, _00wX --> _00wZ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0839__00wZ = (v0838__00wV**1)*(v0840__00wX**-1)
v0839__00wZ = (v0839__00wZ*_00wY_coeff).reshape((1, 40, 30))

# op _019D_indexed_passthrough_eval
# LANG: _019C, _019G, _019J, _019M --> noise_components
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02042_noise_components__temp[i_v02041__019C__019D_indexed_passthrough_eval] = v02041__019C.flatten()
v02042_noise_components = v02042_noise_components__temp.copy()
v02042_noise_components__temp[i_v02043__019G__019D_indexed_passthrough_eval] = v02043__019G.flatten()
v02042_noise_components = v02042_noise_components__temp.copy()
v02042_noise_components__temp[i_v02044__019J__019D_indexed_passthrough_eval] = v02044__019J.flatten()
v02042_noise_components = v02042_noise_components__temp.copy()
v02042_noise_components__temp[i_v02045__019M__019D_indexed_passthrough_eval] = v02045__019M.flatten()
v02042_noise_components = v02042_noise_components__temp.copy()

# op _01DO_power_combination_eval
# LANG: _01DD, _01DN --> _01DP
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02833__01DP = (v02832__01DD**1)*(v02835__01DN**1)
v02833__01DP = (v02833__01DP*_01DO_coeff).reshape((1, 40, 30))

# op _01Dg_power_combination_eval
# LANG: _01AU, _01Df --> _01Dh
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02785__01Dh = (v02784__01Df**1)*(v02743__01AU**1)
v02785__01Dh = (v02785__01Dh*_01Dg_coeff).reshape((1, 40, 30))

# op _01Dq_linear_combination_eval
# LANG: _01Dj, _01Dp --> _01Dr
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02788__01Dr = _01Dq_constant+1*v02787__01Dj+1*v02791__01Dp

# op _01ED_power_combination_eval
# LANG: _01Bp --> _01EE
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02819__01EE = (v02817__01Bp**1)
v02819__01EE = (v02819__01EE*_01ED_coeff).reshape((1, 40, 30))

# op _01EN_linear_combination_eval
# LANG: _01EM, _tangential_inflow_velocity --> _01EO
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02825__01EO = _01EN_constant+1*v02654__tangential_inflow_velocity+-1*v02826__01EM

# op _01Eh_power_combination_eval
# LANG: _01Bl --> _01Ei
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02752__01Ei = (v02750__01Bl**1)
v02752__01Ei = (v02752__01Ei*_01Eh_coeff).reshape((1, 40, 30))

# op _01Er_linear_combination_eval
# LANG: _01Eq, _tangential_inflow_velocity --> _01Es
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02758__01Es = _01Er_constant+1*v02654__tangential_inflow_velocity+-1*v02759__01Eq

# op _01FK_linear_combination_eval
# LANG: _01FD, _01FJ --> _01FL
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02849__01FL = _01FK_constant+1*v02848__01FD+-1*v02851__01FJ

# op _01FQ_power_combination_eval
# LANG: _ux, _01FP --> _01FR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02856__01FR = (v02855__01FP**1)*(v02702__ux**1)
v02856__01FR = (v02856__01FR*_01FQ_coeff).reshape((1, 40, 30))

# op _01Fc_power_combination_eval
# LANG: _01Fb --> total_torque
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02773_total_torque = (v02772__01Fb**1)
v02773_total_torque = (v02773_total_torque*_01Fc_coeff).reshape((1,))

# op _01Fk_power_combination_eval
# LANG: _01Ff, _01Fj --> _01Fl
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02808__01Fl = (v02807__01Ff**1)*(v02809__01Fj**1)
v02808__01Fl = (v02808__01Fl*_01Fk_coeff).reshape((1, 40, 30))

# op _01Fw_power_combination_eval
# LANG: _radius --> _01Fx
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02844__01Fx = (v02637__radius**1)
v02844__01Fx = (v02844__01Fx*_01Fw_coeff).reshape((1, 40, 30))

# op _01GH_power_combination_eval
# LANG: _01GG --> _01GI
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02883__01GI = (v02882__01GG**1)
v02883__01GI = (v02883__01GI*_01GH_coeff).reshape((1,))

# op _01GV_power_combination_eval
# LANG: _01GS, _01GU --> _01GW
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02889__01GW = (v02888__01GS**1)*(v02890__01GU**-1)
v02889__01GW = (v02889__01GW*_01GV_coeff).reshape((1, 40, 30))

# op _01Gx_power_combination_eval
# LANG: _01Gw --> _01Gy
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02878__01Gy = (v02877__01Gw**1)
v02878__01Gy = (v02878__01Gy*_01Gx_coeff).reshape((1,))

# op _01Lo expand_array_eval
# LANG: thrust_dir --> _01Lp
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03025__01Lp = np.einsum('b,ac->abc', v02914_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _01a0_indexed_passthrough_eval
# LANG: _019_, _01a3, _01a6, _01a9 --> A_weighted_noise_components
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02052_A_weighted_noise_components__temp[i_v02051__019___01a0_indexed_passthrough_eval] = v02051__019_.flatten()
v02052_A_weighted_noise_components = v02052_A_weighted_noise_components__temp.copy()
v02052_A_weighted_noise_components__temp[i_v02053__01a3__01a0_indexed_passthrough_eval] = v02053__01a3.flatten()
v02052_A_weighted_noise_components = v02052_A_weighted_noise_components__temp.copy()
v02052_A_weighted_noise_components__temp[i_v02054__01a6__01a0_indexed_passthrough_eval] = v02054__01a6.flatten()
v02052_A_weighted_noise_components = v02052_A_weighted_noise_components__temp.copy()
v02052_A_weighted_noise_components__temp[i_v02055__01a9__01a0_indexed_passthrough_eval] = v02055__01a9.flatten()
v02052_A_weighted_noise_components = v02052_A_weighted_noise_components__temp.copy()

# op _01f3_decompose_eval
# LANG: T --> _01f4
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02193__01f4 = ((v02391_T.flatten())[src_indices__01f4__01f3]).reshape((1,))

# op _01oL_power_combination_eval
# LANG: _01oA, _01oK --> _01oM
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02460__01oM = (v02459__01oA**1)*(v02462__01oK**1)
v02460__01oM = (v02460__01oM*_01oL_coeff).reshape((1, 40, 30))

# op _01od_power_combination_eval
# LANG: _01lR, _01oc --> _01oe
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02412__01oe = (v02411__01oc**1)*(v02370__01lR**1)
v02412__01oe = (v02412__01oe*_01od_coeff).reshape((1, 40, 30))

# op _01on_linear_combination_eval
# LANG: _01og, _01om --> _01oo
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02415__01oo = _01on_constant+1*v02414__01og+1*v02418__01om

# op _01pA_power_combination_eval
# LANG: _01mm --> _01pB
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02446__01pB = (v02444__01mm**1)
v02446__01pB = (v02446__01pB*_01pA_coeff).reshape((1, 40, 30))

# op _01pK_linear_combination_eval
# LANG: _01pJ, _tangential_inflow_velocity --> _01pL
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02452__01pL = _01pK_constant+1*v02281__tangential_inflow_velocity+-1*v02453__01pJ

# op _01pe_power_combination_eval
# LANG: _01mi --> _01pf
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02379__01pf = (v02377__01mi**1)
v02379__01pf = (v02379__01pf*_01pe_coeff).reshape((1, 40, 30))

# op _01po_linear_combination_eval
# LANG: _01pn, _tangential_inflow_velocity --> _01pp
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02385__01pp = _01po_constant+1*v02281__tangential_inflow_velocity+-1*v02386__01pn

# op _01q9_power_combination_eval
# LANG: _01q8 --> total_torque
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02400_total_torque = (v02399__01q8**1)
v02400_total_torque = (v02400_total_torque*_01q9_coeff).reshape((1,))

# op _01qH_linear_combination_eval
# LANG: _01qA, _01qG --> _01qI
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02476__01qI = _01qH_constant+1*v02475__01qA+-1*v02478__01qG

# op _01qN_power_combination_eval
# LANG: _ux, _01qM --> _01qO
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02483__01qO = (v02482__01qM**1)*(v02329__ux**1)
v02483__01qO = (v02483__01qO*_01qN_coeff).reshape((1, 40, 30))

# op _01qh_power_combination_eval
# LANG: _01qc, _01qg --> _01qi
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02435__01qi = (v02434__01qc**1)*(v02436__01qg**1)
v02435__01qi = (v02435__01qi*_01qh_coeff).reshape((1, 40, 30))

# op _01qt_power_combination_eval
# LANG: _radius --> _01qu
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02471__01qu = (v02264__radius**1)
v02471__01qu = (v02471__01qu*_01qt_coeff).reshape((1, 40, 30))

# op _01rE_power_combination_eval
# LANG: _01rD --> _01rF
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02510__01rF = (v02509__01rD**1)
v02510__01rF = (v02510__01rF*_01rE_coeff).reshape((1,))

# op _01rS_power_combination_eval
# LANG: _01rP, _01rR --> _01rT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02516__01rT = (v02515__01rP**1)*(v02517__01rR**-1)
v02516__01rT = (v02516__01rT*_01rS_coeff).reshape((1, 40, 30))

# op _01ru_power_combination_eval
# LANG: _01rt --> _01rv
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02505__01rv = (v02504__01rt**1)
v02505__01rv = (v02505__01rv*_01ru_coeff).reshape((1,))

# op _01u6_decompose_eval
# LANG: T --> _01u7
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02566__01u7 = ((v02764_T.flatten())[src_indices__01u7__01u6]).reshape((1,))

# op _021q expand_array_eval
# LANG: thrust_dir --> _021r
# SHAPES: (3,) --> (1, 3, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03539__021r = np.einsum('b,ac->abc', v03430_thrust_dir.reshape((3,)) ,np.ones((1, 2))).reshape((1, 3, 2))

# op _02eR_indexed_passthrough_eval
# LANG: _02eQ, _02eU, _02eX, _02e_ --> A_weighted_noise_components
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03940_A_weighted_noise_components__temp[i_v03939__02eQ__02eR_indexed_passthrough_eval] = v03939__02eQ.flatten()
v03940_A_weighted_noise_components = v03940_A_weighted_noise_components__temp.copy()
v03940_A_weighted_noise_components__temp[i_v03941__02eU__02eR_indexed_passthrough_eval] = v03941__02eU.flatten()
v03940_A_weighted_noise_components = v03940_A_weighted_noise_components__temp.copy()
v03940_A_weighted_noise_components__temp[i_v03942__02eX__02eR_indexed_passthrough_eval] = v03942__02eX.flatten()
v03940_A_weighted_noise_components = v03940_A_weighted_noise_components__temp.copy()
v03940_A_weighted_noise_components__temp[i_v03943__02e___02eR_indexed_passthrough_eval] = v03943__02e_.flatten()
v03940_A_weighted_noise_components = v03940_A_weighted_noise_components__temp.copy()

# op _02et_indexed_passthrough_eval
# LANG: _02es, _02ew, _02ez, _02eC --> noise_components
# SHAPES: (1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03930_noise_components__temp[i_v03929__02es__02et_indexed_passthrough_eval] = v03929__02es.flatten()
v03930_noise_components = v03930_noise_components__temp.copy()
v03930_noise_components__temp[i_v03931__02ew__02et_indexed_passthrough_eval] = v03931__02ew.flatten()
v03930_noise_components = v03930_noise_components__temp.copy()
v03930_noise_components__temp[i_v03932__02ez__02et_indexed_passthrough_eval] = v03932__02ez.flatten()
v03930_noise_components = v03930_noise_components__temp.copy()
v03930_noise_components__temp[i_v03933__02eC__02et_indexed_passthrough_eval] = v03933__02eC.flatten()
v03930_noise_components = v03930_noise_components__temp.copy()

# op _002x_power_combination_eval
# LANG: hover_temperature --> _002y
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v095__002y = (v092_hover_temperature**1)
v095__002y = (v095__002y*_002x_coeff).reshape((1,))

# op _0058 reshape_eval
# LANG: _0057 --> _0059
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0144__0059 = v0143__0057.reshape((1, 1))

# op _005a_decompose_eval
# LANG: thrust_vector --> _005b, _005h, _005m
# SHAPES: (1, 3) --> (1, 1), (1, 1), (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0146__005b = ((v0128_thrust_vector.flatten())[src_indices__005b__005a]).reshape((1, 1))
v0147__005h = ((v0128_thrust_vector.flatten())[src_indices__005h__005a]).reshape((1, 1))
v0148__005m = ((v0128_thrust_vector.flatten())[src_indices__005m__005a]).reshape((1, 1))

# op _005f reshape_eval
# LANG: _0057 --> _005g
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0150__005g = v0143__0057.reshape((1, 1))

# op _005k reshape_eval
# LANG: _0057 --> _005l
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0152__005l = v0143__0057.reshape((1, 1))

# op _00Ti_power_combination_eval
# LANG: temperature --> _00Tj
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01512__00Tj = (v01506_temperature**1)
v01512__00Tj = (v01512__00Tj*_00Ti_coeff).reshape((1,))

# op _00dL_power_combination_eval
# LANG: _angular_speed --> _00dM
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0354__00dM = (v0213__angular_speed**1)
v0354__00dM = (v0354__00dM*_00dL_coeff).reshape((1, 40, 30))

# op _00eQ_power_combination_eval
# LANG: _00eP, _chord --> _00eR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0416__00eR = (v0410__00eP**1)*(v0209__chord**1)
v0416__00eR = (v0416__00eR*_00eQ_coeff).reshape((1, 40, 30))

# op _00es_power_combination_eval
# LANG: _00eh, _00er --> _00et
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0363__00et = (v0362__00eh**1)*(v0365__00er**1)
v0363__00et = (v0363__00et*_00es_coeff).reshape((1, 40, 30))

# op _00fF_power_combination_eval
# LANG: _00fE --> _00fG
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0397__00fG = (v0396__00fE**1)
v0397__00fG = (v0397__00fG*_00fF_coeff).reshape((1, 40, 30))

# op _00fJ_power_combination_eval
# LANG: _ux_2 --> _00fK
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0400__00fK = (v0292__ux_2**2)
v0400__00fK = (v0400__00fK*_00fJ_coeff).reshape((1, 40, 30))

# op _00fP_power_combination_eval
# LANG: _00fO --> _00fQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0404__00fQ = (v0402__00fO**2)
v0404__00fQ = (v0404__00fQ*_00fP_coeff).reshape((1, 40, 30))

# op _00fj_power_combination_eval
# LANG: _00fi --> _00fk
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0330__00fk = (v0329__00fi**1)
v0330__00fk = (v0330__00fk*_00fj_coeff).reshape((1, 40, 30))

# op _00fn_power_combination_eval
# LANG: _ux_2 --> _00fo
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0333__00fo = (v0292__ux_2**2)
v0333__00fo = (v0333__00fo*_00fn_coeff).reshape((1, 40, 30))

# op _00ft_power_combination_eval
# LANG: _00fs --> _00fu
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0337__00fu = (v0335__00fs**2)
v0337__00fu = (v0337__00fu*_00ft_coeff).reshape((1, 40, 30))

# op _00gS_linear_combination_eval
# LANG: _00gL, _00gR --> _00gT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0430__00gT = _00gS_constant+1*v0426__00gL+1*v0433__00gR

# op _00gm_power_combination_eval
# LANG: _ut, _00gl --> _00gn
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0388__00gn = (v0385__00gl**1)*(v0311__ut**1)
v0388__00gn = (v0388__00gn*_00gm_coeff).reshape((1, 40, 30))

# op _00gy_power_combination_eval
# LANG: _00gx --> _00gz
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0422__00gz = (v0421__00gx**1)
v0422__00gz = (v0422__00gz*_00gy_coeff).reshape((1, 40, 30))

# op _00hJ_power_combination_eval
# LANG: _00hI --> _00hK
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0461__00hK = (v0460__00hI**1)
v0461__00hK = (v0461__00hK*_00hJ_coeff).reshape((1,))

# op _00hX_single_tensor_sum_with_axis_eval
# LANG: _00hW --> _00hY
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0468__00hY = np.sum(v0466__00hW, axis = (1, 2)).reshape((1,))

# op _00hr_power_combination_eval
# LANG: total_torque, density --> _00hs
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0242_density = v0242_density.reshape((1,))
v0451__00hs = (v0350_total_torque**1)*(v0242_density**-1)
v0451__00hs = (v0451__00hs*_00hr_coeff).reshape((1,))
v0242_density = v0242_density.reshape((1, 1))

# op _00hz_power_combination_eval
# LANG: _00hy --> _00hA
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0456__00hA = (v0455__00hy**2)
v0456__00hA = (v0456__00hA*_00hz_coeff).reshape((1,))

# op _00kb reshape_eval
# LANG: _00ka --> _00kc
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0517__00kc = v0516__00ka.reshape((1, 1))

# op _00kd_decompose_eval
# LANG: thrust_vector --> _00ke, _00kk, _00kp
# SHAPES: (1, 3) --> (1, 1), (1, 1), (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0519__00ke = ((v0501_thrust_vector.flatten())[src_indices__00ke__00kd]).reshape((1, 1))
v0520__00kk = ((v0501_thrust_vector.flatten())[src_indices__00kk__00kd]).reshape((1, 1))
v0521__00kp = ((v0501_thrust_vector.flatten())[src_indices__00kp__00kd]).reshape((1, 1))

# op _00ki reshape_eval
# LANG: _00ka --> _00kj
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0523__00kj = v0516__00ka.reshape((1, 1))

# op _00kn reshape_eval
# LANG: _00ka --> _00ko
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0525__00ko = v0516__00ka.reshape((1, 1))

# op _00sO_power_combination_eval
# LANG: _angular_speed --> _00sP
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0727__00sP = (v0586__angular_speed**1)
v0727__00sP = (v0727__00sP*_00sO_coeff).reshape((1, 40, 30))

# op _00tT_power_combination_eval
# LANG: _00tS, _chord --> _00tU
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0789__00tU = (v0783__00tS**1)*(v0582__chord**1)
v0789__00tU = (v0789__00tU*_00tT_coeff).reshape((1, 40, 30))

# op _00tv_power_combination_eval
# LANG: _00tk, _00tu --> _00tw
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0736__00tw = (v0735__00tk**1)*(v0738__00tu**1)
v0736__00tw = (v0736__00tw*_00tv_coeff).reshape((1, 40, 30))

# op _00uI_power_combination_eval
# LANG: _00uH --> _00uJ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0770__00uJ = (v0769__00uH**1)
v0770__00uJ = (v0770__00uJ*_00uI_coeff).reshape((1, 40, 30))

# op _00uM_power_combination_eval
# LANG: _ux_2 --> _00uN
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0773__00uN = (v0665__ux_2**2)
v0773__00uN = (v0773__00uN*_00uM_coeff).reshape((1, 40, 30))

# op _00uS_power_combination_eval
# LANG: _00uR --> _00uT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0777__00uT = (v0775__00uR**2)
v0777__00uT = (v0777__00uT*_00uS_coeff).reshape((1, 40, 30))

# op _00um_power_combination_eval
# LANG: _00ul --> _00un
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0703__00un = (v0702__00ul**1)
v0703__00un = (v0703__00un*_00um_coeff).reshape((1, 40, 30))

# op _00uq_power_combination_eval
# LANG: _ux_2 --> _00ur
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0706__00ur = (v0665__ux_2**2)
v0706__00ur = (v0706__00ur*_00uq_coeff).reshape((1, 40, 30))

# op _00uw_power_combination_eval
# LANG: _00uv --> _00ux
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0710__00ux = (v0708__00uv**2)
v0710__00ux = (v0710__00ux*_00uw_coeff).reshape((1, 40, 30))

# op _00vB_power_combination_eval
# LANG: _00vA --> _00vC
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0795__00vC = (v0794__00vA**1)
v0795__00vC = (v0795__00vC*_00vB_coeff).reshape((1, 40, 30))

# op _00vV_linear_combination_eval
# LANG: _00vO, _00vU --> _00vW
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0803__00vW = _00vV_constant+1*v0799__00vO+1*v0806__00vU

# op _00vp_power_combination_eval
# LANG: _ut, _00vo --> _00vq
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0761__00vq = (v0758__00vo**1)*(v0684__ut**1)
v0761__00vq = (v0761__00vq*_00vp_coeff).reshape((1, 40, 30))

# op _00wC_power_combination_eval
# LANG: _00wB --> _00wD
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0829__00wD = (v0828__00wB**2)
v0829__00wD = (v0829__00wD*_00wC_coeff).reshape((1,))

# op _00wM_power_combination_eval
# LANG: _00wL --> _00wN
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0834__00wN = (v0833__00wL**1)
v0834__00wN = (v0834__00wN*_00wM_coeff).reshape((1,))

# op _00w__single_tensor_sum_with_axis_eval
# LANG: _00wZ --> _00x0
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0841__00x0 = np.sum(v0839__00wZ, axis = (1, 2)).reshape((1,))

# op _00wu_power_combination_eval
# LANG: total_torque, density --> _00wv
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0615_density = v0615_density.reshape((1,))
v0824__00wv = (v0723_total_torque**1)*(v0615_density**-1)
v0824__00wv = (v0824__00wv*_00wu_coeff).reshape((1,))
v0615_density = v0615_density.reshape((1, 1))

# op _00zI_power_combination_eval
# LANG: temperature --> _00zJ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0916__00zJ = (v0910_temperature**1)
v0916__00zJ = (v0916__00zJ*_00zI_coeff).reshape((1,))

# op _019N_power_combination_eval
# LANG: noise_components --> _019O
# SHAPES: (4, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02046__019O = (v02042_noise_components**1)
v02046__019O = (v02046__019O*_019N_coeff).reshape((4, 1, 2))

# op _01CL_power_combination_eval
# LANG: _angular_speed --> _01CM
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02777__01CM = (v02636__angular_speed**1)
v02777__01CM = (v02777__01CM*_01CL_coeff).reshape((1, 40, 30))

# op _01DQ_power_combination_eval
# LANG: _01DP, _chord --> _01DR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02839__01DR = (v02833__01DP**1)*(v02632__chord**1)
v02839__01DR = (v02839__01DR*_01DQ_coeff).reshape((1, 40, 30))

# op _01Ds_power_combination_eval
# LANG: _01Dh, _01Dr --> _01Dt
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02786__01Dt = (v02785__01Dh**1)*(v02788__01Dr**1)
v02786__01Dt = (v02786__01Dt*_01Ds_coeff).reshape((1, 40, 30))

# op _01EF_power_combination_eval
# LANG: _01EE --> _01EG
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02820__01EG = (v02819__01EE**1)
v02820__01EG = (v02820__01EG*_01EF_coeff).reshape((1, 40, 30))

# op _01EJ_power_combination_eval
# LANG: _ux_2 --> _01EK
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02823__01EK = (v02715__ux_2**2)
v02823__01EK = (v02823__01EK*_01EJ_coeff).reshape((1, 40, 30))

# op _01EP_power_combination_eval
# LANG: _01EO --> _01EQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02827__01EQ = (v02825__01EO**2)
v02827__01EQ = (v02827__01EQ*_01EP_coeff).reshape((1, 40, 30))

# op _01Ej_power_combination_eval
# LANG: _01Ei --> _01Ek
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02753__01Ek = (v02752__01Ei**1)
v02753__01Ek = (v02753__01Ek*_01Ej_coeff).reshape((1, 40, 30))

# op _01En_power_combination_eval
# LANG: _ux_2 --> _01Eo
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02756__01Eo = (v02715__ux_2**2)
v02756__01Eo = (v02756__01Eo*_01En_coeff).reshape((1, 40, 30))

# op _01Et_power_combination_eval
# LANG: _01Es --> _01Eu
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02760__01Eu = (v02758__01Es**2)
v02760__01Eu = (v02760__01Eu*_01Et_coeff).reshape((1, 40, 30))

# op _01FS_linear_combination_eval
# LANG: _01FL, _01FR --> _01FT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02853__01FT = _01FS_constant+1*v02849__01FL+1*v02856__01FR

# op _01Fm_power_combination_eval
# LANG: _ut, _01Fl --> _01Fn
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02811__01Fn = (v02808__01Fl**1)*(v02734__ut**1)
v02811__01Fn = (v02811__01Fn*_01Fm_coeff).reshape((1, 40, 30))

# op _01Fy_power_combination_eval
# LANG: _01Fx --> _01Fz
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02845__01Fz = (v02844__01Fx**1)
v02845__01Fz = (v02845__01Fz*_01Fy_coeff).reshape((1, 40, 30))

# op _01GJ_power_combination_eval
# LANG: _01GI --> _01GK
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02884__01GK = (v02883__01GI**1)
v02884__01GK = (v02884__01GK*_01GJ_coeff).reshape((1,))

# op _01GX_single_tensor_sum_with_axis_eval
# LANG: _01GW --> _01GY
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02891__01GY = np.sum(v02889__01GW, axis = (1, 2)).reshape((1,))

# op _01Gr_power_combination_eval
# LANG: total_torque, density --> _01Gs
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02665_density = v02665_density.reshape((1,))
v02874__01Gs = (v02773_total_torque**1)*(v02665_density**-1)
v02874__01Gs = (v02874__01Gs*_01Gr_coeff).reshape((1,))
v02665_density = v02665_density.reshape((1, 1))

# op _01Gz_power_combination_eval
# LANG: _01Gy --> _01GA
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02879__01GA = (v02878__01Gy**2)
v02879__01GA = (v02879__01GA*_01Gz_coeff).reshape((1,))

# op _01Id_power_combination_eval
# LANG: Vx --> _01Ie
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02920__01Ie = (v02074_u**2)
v02920__01Ie = (v02920__01Ie*_01Id_coeff).reshape((1,))

# op _01If_power_combination_eval
# LANG: Vy --> _01Ig
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02922__01Ig = (v02079_v**2)
v02922__01Ig = (v02922__01Ig*_01If_coeff).reshape((1,))

# op _01JC_power_combination_eval
# LANG: temperature --> _01JD
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02964__01JD = (v02963_temperature**1)
v02964__01JD = (v02964__01JD*_01JC_coeff).reshape((1,))

# op _01JM_power_combination_eval
# LANG: temperature --> _01JN
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02969__01JN = (v02963_temperature**1)
v02969__01JN = (v02969__01JN*_01JM_coeff).reshape((1,))

# op _01Lq_tensor_dot_product_eval
# LANG: rel_obs_position, _01Lp --> normal_proj
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03024_normal_proj = np.sum(v03017_rel_obs_position * v03025__01Lp, axis=1)

# op _01Zf_power_combination_eval
# LANG: Vx --> _01Zg
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03436__01Zg = (v02074_u**2)
v03436__01Zg = (v03436__01Zg*_01Zf_coeff).reshape((1,))

# op _01Zh_power_combination_eval
# LANG: Vy --> _01Zi
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03438__01Zi = (v02079_v**2)
v03438__01Zi = (v03438__01Zi*_01Zh_coeff).reshape((1,))

# op _01_E_power_combination_eval
# LANG: temperature --> _01_F
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03478__01_F = (v03477_temperature**1)
v03478__01_F = (v03478__01_F*_01_E_coeff).reshape((1,))

# op _01_O_power_combination_eval
# LANG: temperature --> _01_P
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03483__01_P = (v03477_temperature**1)
v03483__01_P = (v03483__01_P*_01_O_coeff).reshape((1,))

# op _01aa_power_combination_eval
# LANG: A_weighted_noise_components --> _01ab
# SHAPES: (4, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02056__01ab = (v02052_A_weighted_noise_components**1)
v02056__01ab = (v02056__01ab*_01aa_coeff).reshape((4, 1, 2))

# op _01bY_power_combination_eval
# LANG: cruise_temperature --> _01bZ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02145__01bZ = (v02142_cruise_temperature**1)
v02145__01bZ = (v02145__01bZ*_01bY_coeff).reshape((1,))

# op _01f5 reshape_eval
# LANG: _01f4 --> _01f6
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02194__01f6 = v02193__01f4.reshape((1, 1))

# op _01f7_decompose_eval
# LANG: thrust_vector --> _01f8, _01fe, _01fj
# SHAPES: (1, 3) --> (1, 1), (1, 1), (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02196__01f8 = ((v02178_thrust_vector.flatten())[src_indices__01f8__01f7]).reshape((1, 1))
v02197__01fe = ((v02178_thrust_vector.flatten())[src_indices__01fe__01f7]).reshape((1, 1))
v02198__01fj = ((v02178_thrust_vector.flatten())[src_indices__01fj__01f7]).reshape((1, 1))

# op _01fc reshape_eval
# LANG: _01f4 --> _01fd
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02200__01fd = v02193__01f4.reshape((1, 1))

# op _01fh reshape_eval
# LANG: _01f4 --> _01fi
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02202__01fi = v02193__01f4.reshape((1, 1))

# op _01nI_power_combination_eval
# LANG: _angular_speed --> _01nJ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02404__01nJ = (v02263__angular_speed**1)
v02404__01nJ = (v02404__01nJ*_01nI_coeff).reshape((1, 40, 30))

# op _01oN_power_combination_eval
# LANG: _01oM, _chord --> _01oO
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02466__01oO = (v02460__01oM**1)*(v02259__chord**1)
v02466__01oO = (v02466__01oO*_01oN_coeff).reshape((1, 40, 30))

# op _01op_power_combination_eval
# LANG: _01oe, _01oo --> _01oq
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02413__01oq = (v02412__01oe**1)*(v02415__01oo**1)
v02413__01oq = (v02413__01oq*_01op_coeff).reshape((1, 40, 30))

# op _01pC_power_combination_eval
# LANG: _01pB --> _01pD
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02447__01pD = (v02446__01pB**1)
v02447__01pD = (v02447__01pD*_01pC_coeff).reshape((1, 40, 30))

# op _01pG_power_combination_eval
# LANG: _ux_2 --> _01pH
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02450__01pH = (v02342__ux_2**2)
v02450__01pH = (v02450__01pH*_01pG_coeff).reshape((1, 40, 30))

# op _01pM_power_combination_eval
# LANG: _01pL --> _01pN
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02454__01pN = (v02452__01pL**2)
v02454__01pN = (v02454__01pN*_01pM_coeff).reshape((1, 40, 30))

# op _01pg_power_combination_eval
# LANG: _01pf --> _01ph
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02380__01ph = (v02379__01pf**1)
v02380__01ph = (v02380__01ph*_01pg_coeff).reshape((1, 40, 30))

# op _01pk_power_combination_eval
# LANG: _ux_2 --> _01pl
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02383__01pl = (v02342__ux_2**2)
v02383__01pl = (v02383__01pl*_01pk_coeff).reshape((1, 40, 30))

# op _01pq_power_combination_eval
# LANG: _01pp --> _01pr
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02387__01pr = (v02385__01pp**2)
v02387__01pr = (v02387__01pr*_01pq_coeff).reshape((1, 40, 30))

# op _01qP_linear_combination_eval
# LANG: _01qI, _01qO --> _01qQ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02480__01qQ = _01qP_constant+1*v02476__01qI+1*v02483__01qO

# op _01qj_power_combination_eval
# LANG: _ut, _01qi --> _01qk
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02438__01qk = (v02435__01qi**1)*(v02361__ut**1)
v02438__01qk = (v02438__01qk*_01qj_coeff).reshape((1, 40, 30))

# op _01qv_power_combination_eval
# LANG: _01qu --> _01qw
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02472__01qw = (v02471__01qu**1)
v02472__01qw = (v02472__01qw*_01qv_coeff).reshape((1, 40, 30))

# op _01rG_power_combination_eval
# LANG: _01rF --> _01rH
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02511__01rH = (v02510__01rF**1)
v02511__01rH = (v02511__01rH*_01rG_coeff).reshape((1,))

# op _01rU_single_tensor_sum_with_axis_eval
# LANG: _01rT --> _01rV
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02518__01rV = np.sum(v02516__01rT, axis = (1, 2)).reshape((1,))

# op _01ro_power_combination_eval
# LANG: total_torque, density --> _01rp
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02292_density = v02292_density.reshape((1,))
v02501__01rp = (v02400_total_torque**1)*(v02292_density**-1)
v02501__01rp = (v02501__01rp*_01ro_coeff).reshape((1,))
v02292_density = v02292_density.reshape((1, 1))

# op _01rw_power_combination_eval
# LANG: _01rv --> _01rx
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02506__01rx = (v02505__01rv**2)
v02506__01rx = (v02506__01rx*_01rw_coeff).reshape((1,))

# op _01u8 reshape_eval
# LANG: _01u7 --> _01u9
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02567__01u9 = v02566__01u7.reshape((1, 1))

# op _01ua_decompose_eval
# LANG: thrust_vector --> _01ub, _01uh, _01um
# SHAPES: (1, 3) --> (1, 1), (1, 1), (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02569__01ub = ((v02551_thrust_vector.flatten())[src_indices__01ub__01ua]).reshape((1, 1))
v02570__01uh = ((v02551_thrust_vector.flatten())[src_indices__01uh__01ua]).reshape((1, 1))
v02571__01um = ((v02551_thrust_vector.flatten())[src_indices__01um__01ua]).reshape((1, 1))

# op _01uf reshape_eval
# LANG: _01u7 --> _01ug
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02573__01ug = v02566__01u7.reshape((1, 1))

# op _01uk reshape_eval
# LANG: _01u7 --> _01ul
# SHAPES: (1,) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02575__01ul = v02566__01u7.reshape((1, 1))

# op _021s_tensor_dot_product_eval
# LANG: rel_obs_position, _021r --> normal_proj
# SHAPES: (1, 3, 2), (1, 3, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03538_normal_proj = np.sum(v03531_rel_obs_position * v03539__021r, axis=1)

# op _02eD_power_combination_eval
# LANG: noise_components --> _02eE
# SHAPES: (4, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03934__02eE = (v03930_noise_components**1)
v03934__02eE = (v03934__02eE*_02eD_coeff).reshape((4, 1, 2))

# op _02f0_power_combination_eval
# LANG: A_weighted_noise_components --> _02f1
# SHAPES: (4, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03944__02f1 = (v03940_A_weighted_noise_components**1)
v03944__02f1 = (v03944__02f1*_02f0_coeff).reshape((4, 1, 2))

# op _0013_power_combination_eval
# LANG: hover_altitude --> _0014
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v047__0014 = (v046_hover_altitude**6)
v047__0014 = (v047__0014*_0013_coeff).reshape((1,))

# op _0018_power_combination_eval
# LANG: hover_altitude --> _0019
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v062__0019 = (v046_hover_altitude**6)
v062__0019 = (v062__0019*_0018_coeff).reshape((1,))

# op _001G_power_combination_eval
# LANG: hover_altitude --> _001H
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v054__001H = (v046_hover_altitude**3)
v054__001H = (v054__001H*_001G_coeff).reshape((1,))

# op _001K_power_combination_eval
# LANG: hover_altitude --> _001L
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v069__001L = (v046_hover_altitude**3)
v069__001L = (v069__001L*_001K_coeff).reshape((1,))

# op _001S_power_combination_eval
# LANG: hover_altitude --> _001T
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v056__001T = (v046_hover_altitude**2)
v056__001T = (v056__001T*_001S_coeff).reshape((1,))

# op _001W_power_combination_eval
# LANG: hover_altitude --> _001X
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v071__001X = (v046_hover_altitude**2)
v071__001X = (v071__001X*_001W_coeff).reshape((1,))

# op _001i_power_combination_eval
# LANG: hover_altitude --> _001j
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v050__001j = (v046_hover_altitude**5)
v050__001j = (v050__001j*_001i_coeff).reshape((1,))

# op _001m_power_combination_eval
# LANG: hover_altitude --> _001n
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v065__001n = (v046_hover_altitude**5)
v065__001n = (v065__001n*_001m_coeff).reshape((1,))

# op _001u_power_combination_eval
# LANG: hover_altitude --> _001v
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v052__001v = (v046_hover_altitude**4)
v052__001v = (v052__001v*_001u_coeff).reshape((1,))

# op _001y_power_combination_eval
# LANG: hover_altitude --> _001z
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v067__001z = (v046_hover_altitude**4)
v067__001z = (v067__001z*_001y_coeff).reshape((1,))

# op _0023_power_combination_eval
# LANG: hover_altitude --> _0024
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v058__0024 = (v046_hover_altitude**1)
v058__0024 = (v058__0024*_0023_coeff).reshape((1,))

# op _0027_power_combination_eval
# LANG: hover_altitude --> _0028
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v073__0028 = (v046_hover_altitude**1)
v073__0028 = (v073__0028*_0027_coeff).reshape((1,))

# op _002f_power_combination_eval
# LANG: hover_altitude --> _002g
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v060__002g = (v046_hover_altitude**0)
v060__002g = (v060__002g*_002f_coeff).reshape((1,))

# op _002j_power_combination_eval
# LANG: hover_altitude --> _002k
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v075__002k = (v046_hover_altitude**0)
v075__002k = (v075__002k*_002j_coeff).reshape((1,))

# op _002z_power_combination_eval
# LANG: _002y --> _002A
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v096__002A = (v095__002y**1.5)
v096__002A = (v096__002A*_002z_coeff).reshape((1,))

# op _004n expand_array_eval
# LANG: rotor_2_disk_origin --> thrust_origin
# SHAPES: (3,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((3,))
v0129_thrust_origin = np.einsum('b,a->ab', v022_rotor_2_disk_origin.reshape((3,)) ,np.ones((1,))).reshape((1, 3))
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((1, 3))

# op _005c_power_combination_eval
# LANG: _0059, _005b --> _005d
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0145__005d = (v0144__0059**1)*(v0146__005b**1)
v0145__005d = (v0145__005d*_005c_coeff).reshape((1, 1))

# op _005i_power_combination_eval
# LANG: _005h, _005g --> _005j
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0151__005j = (v0150__005g**1)*(v0147__005h**1)
v0151__005j = (v0151__005j*_005i_coeff).reshape((1, 1))

# op _005n_power_combination_eval
# LANG: _005m, _005l --> _005o
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0153__005o = (v0152__005l**1)*(v0148__005m**1)
v0153__005o = (v0153__005o*_005n_coeff).reshape((1, 1))

# op _00BI_power_combination_eval
# LANG: rel_obs_z_pos, rel_obs_dist --> _00BJ
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0981__00BJ = (v0962_rel_obs_z_pos**1)*(v0970_rel_obs_dist**-1)
v0981__00BJ = (v0981__00BJ*_00BI_coeff).reshape((1, 1, 2))

# op _00BQ_linear_combination_eval
# LANG: rel_obs_z_pos --> _00BR
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0986__00BR = _00BQ_constant+1*v0962_rel_obs_z_pos

# op _00Bs expand_array_eval
# LANG: normal_proj --> _00Bt
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0973__00Bt = np.einsum('ac,b->abc', v0971_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _00OE_linear_combination_eval
# LANG: rel_obs_z_pos --> _00OF
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01378__00OF = _00OE_constant+1*v01354_rel_obs_z_pos

# op _00Om expand_array_eval
# LANG: normal_proj --> _00On
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01369__00On = np.einsum('ac,b->abc', v01363_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _00Ow_power_combination_eval
# LANG: rel_obs_z_pos, rel_obs_dist --> _00Ox
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01373__00Ox = (v01354_rel_obs_z_pos**1)*(v01362_rel_obs_dist**-1)
v01373__00Ox = (v01373__00Ox*_00Ow_coeff).reshape((1, 1, 2))

# op _00Tk_power_combination_eval
# LANG: _00Tj --> _00Tl
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01513__00Tl = (v01512__00Tj**1.5)
v01513__00Tl = (v01513__00Tl*_00Tk_coeff).reshape((1,))

# op _00V2 expand_array_eval
# LANG: normal_proj --> _00V3
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01569__00V3 = np.einsum('ac,b->abc', v01567_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _00Vi_power_combination_eval
# LANG: rel_obs_z_pos, rel_obs_dist --> _00Vj
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01577__00Vj = (v01558_rel_obs_z_pos**1)*(v01566_rel_obs_dist**-1)
v01577__00Vj = (v01577__00Vj*_00Vi_coeff).reshape((1, 1, 2))

# op _00Vq_linear_combination_eval
# LANG: rel_obs_z_pos --> _00Vr
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01582__00Vr = _00Vq_constant+1*v01558_rel_obs_z_pos

# op _00dN_power_combination_eval
# LANG: _00dM --> _00dO
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0355__00dO = (v0354__00dM**1)
v0355__00dO = (v0355__00dO*_00dN_coeff).reshape((1, 40, 30))

# op _00eS_power_combination_eval
# LANG: _00eR, _dr --> _00eT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0417__00eT = (v0416__00eR**1)*(v0202__dr**1)
v0417__00eT = (v0417__00eT*_00eS_coeff).reshape((1, 40, 30))

# op _00eu_power_combination_eval
# LANG: _00et, _chord --> _00ev
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0369__00ev = (v0363__00et**1)*(v0209__chord**1)
v0369__00ev = (v0369__00ev*_00eu_coeff).reshape((1, 40, 30))

# op _00fH_power_combination_eval
# LANG: _00bU, _00fG --> _00fI
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0398__00fI = (v0397__00fG**1)*(v0320__00bU**1)
v0398__00fI = (v0398__00fI*_00fH_coeff).reshape((1, 40, 30))

# op _00fR_linear_combination_eval
# LANG: _00fK, _00fQ --> _00fS
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0401__00fS = _00fR_constant+1*v0400__00fK+1*v0404__00fQ

# op _00fl_power_combination_eval
# LANG: _00bU, _00fk --> _00fm
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0331__00fm = (v0330__00fk**1)*(v0320__00bU**1)
v0331__00fm = (v0331__00fm*_00fl_coeff).reshape((1, 40, 30))

# op _00fv_linear_combination_eval
# LANG: _00fo, _00fu --> _00fw
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0334__00fw = _00fv_constant+1*v0333__00fo+1*v0337__00fu

# op _00gU_power_combination_eval
# LANG: _00gz, _00gT --> _00gV
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0423__00gV = (v0422__00gz**1)*(v0430__00gT**1)
v0423__00gV = (v0423__00gV*_00gU_coeff).reshape((1, 40, 30))

# op _00go_power_combination_eval
# LANG: _00gn, _radius --> _00gp
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0389__00gp = (v0388__00gn**1)*(v0214__radius**1)
v0389__00gp = (v0389__00gp*_00go_coeff).reshape((1, 40, 30))

# op _00hB_power_combination_eval
# LANG: _00hs, _00hA --> _00hC
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0452__00hC = (v0451__00hs**1)*(v0456__00hA**-1)
v0452__00hC = (v0452__00hC*_00hB_coeff).reshape((1,))

# op _00hL_power_combination_eval
# LANG: _00hK --> _00hM
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0462__00hM = (v0461__00hK**5)
v0462__00hM = (v0462__00hM*_00hL_coeff).reshape((1,))

# op _00hZ_power_combination_eval
# LANG: _00hY --> _00h_
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0469__00h_ = (v0468__00hY**1)
v0469__00h_ = (v0469__00h_*_00hZ_coeff).reshape((1,))

# op _00i6_power_combination_eval
# LANG: C_T --> _00i7
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0473__00i7 = (v0445_C_T**1)
v0473__00i7 = (v0473__00i7*_00i6_coeff).reshape((1,))

# op _00jq expand_array_eval
# LANG: rotor_1_disk_origin --> thrust_origin
# SHAPES: (3,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((3,))
v0502_thrust_origin = np.einsum('b,a->ab', v012_rotor_1_disk_origin.reshape((3,)) ,np.ones((1,))).reshape((1, 3))
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((1, 3))

# op _00kf_power_combination_eval
# LANG: _00kc, _00ke --> _00kg
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0518__00kg = (v0517__00kc**1)*(v0519__00ke**1)
v0518__00kg = (v0518__00kg*_00kf_coeff).reshape((1, 1))

# op _00kl_power_combination_eval
# LANG: _00kk, _00kj --> _00km
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0524__00km = (v0523__00kj**1)*(v0520__00kk**1)
v0524__00km = (v0524__00km*_00kl_coeff).reshape((1, 1))

# op _00kq_power_combination_eval
# LANG: _00kp, _00ko --> _00kr
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0526__00kr = (v0525__00ko**1)*(v0521__00kp**1)
v0526__00kr = (v0526__00kr*_00kq_coeff).reshape((1, 1))

# op _00sQ_power_combination_eval
# LANG: _00sP --> _00sR
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0728__00sR = (v0727__00sP**1)
v0728__00sR = (v0728__00sR*_00sQ_coeff).reshape((1, 40, 30))

# op _00tV_power_combination_eval
# LANG: _00tU, _dr --> _00tW
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0790__00tW = (v0789__00tU**1)*(v0575__dr**1)
v0790__00tW = (v0790__00tW*_00tV_coeff).reshape((1, 40, 30))

# op _00tx_power_combination_eval
# LANG: _00tw, _chord --> _00ty
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0742__00ty = (v0736__00tw**1)*(v0582__chord**1)
v0742__00ty = (v0742__00ty*_00tx_coeff).reshape((1, 40, 30))

# op _00uK_power_combination_eval
# LANG: _00qX, _00uJ --> _00uL
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0771__00uL = (v0770__00uJ**1)*(v0693__00qX**1)
v0771__00uL = (v0771__00uL*_00uK_coeff).reshape((1, 40, 30))

# op _00uU_linear_combination_eval
# LANG: _00uN, _00uT --> _00uV
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0774__00uV = _00uU_constant+1*v0773__00uN+1*v0777__00uT

# op _00uo_power_combination_eval
# LANG: _00qX, _00un --> _00up
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0704__00up = (v0703__00un**1)*(v0693__00qX**1)
v0704__00up = (v0704__00up*_00uo_coeff).reshape((1, 40, 30))

# op _00uy_linear_combination_eval
# LANG: _00ur, _00ux --> _00uz
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0707__00uz = _00uy_constant+1*v0706__00ur+1*v0710__00ux

# op _00vX_power_combination_eval
# LANG: _00vC, _00vW --> _00vY
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0796__00vY = (v0795__00vC**1)*(v0803__00vW**1)
v0796__00vY = (v0796__00vY*_00vX_coeff).reshape((1, 40, 30))

# op _00vr_power_combination_eval
# LANG: _00vq, _radius --> _00vs
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0762__00vs = (v0761__00vq**1)*(v0587__radius**1)
v0762__00vs = (v0762__00vs*_00vr_coeff).reshape((1, 40, 30))

# op _00wE_power_combination_eval
# LANG: _00wv, _00wD --> _00wF
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0825__00wF = (v0824__00wv**1)*(v0829__00wD**-1)
v0825__00wF = (v0825__00wF*_00wE_coeff).reshape((1,))

# op _00wO_power_combination_eval
# LANG: _00wN --> _00wP
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0835__00wP = (v0834__00wN**5)
v0835__00wP = (v0835__00wP*_00wO_coeff).reshape((1,))

# op _00x1_power_combination_eval
# LANG: _00x0 --> _00x2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0842__00x2 = (v0841__00x0**1)
v0842__00x2 = (v0842__00x2*_00x1_coeff).reshape((1,))

# op _00x9_power_combination_eval
# LANG: C_T --> _00xa
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0846__00xa = (v0818_C_T**1)
v0846__00xa = (v0846__00xa*_00x9_coeff).reshape((1,))

# op _00zK_power_combination_eval
# LANG: _00zJ --> _00zL
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0917__00zL = (v0916__00zJ**1.5)
v0917__00zL = (v0917__00zL*_00zK_coeff).reshape((1,))

# op _016X expand_array_eval
# LANG: normal_proj --> _016Y
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01965__016Y = np.einsum('ac,b->abc', v01959_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _0176_power_combination_eval
# LANG: rel_obs_z_pos, rel_obs_dist --> _0177
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01969__0177 = (v01950_rel_obs_z_pos**1)*(v01958_rel_obs_dist**-1)
v01969__0177 = (v01969__0177*_0176_coeff).reshape((1, 1, 2))

# op _017e_linear_combination_eval
# LANG: rel_obs_z_pos --> _017f
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01974__017f = _017e_constant+1*v01950_rel_obs_z_pos

# op _019P_exp_a_eval
# LANG: _019O --> _019Q
# SHAPES: (4, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02047__019Q = _019P_exp_a_eval_a**v02046__019O

# op _01CN_power_combination_eval
# LANG: _01CM --> _01CO
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02778__01CO = (v02777__01CM**1)
v02778__01CO = (v02778__01CO*_01CN_coeff).reshape((1, 40, 30))

# op _01DS_power_combination_eval
# LANG: _01DR, _dr --> _01DT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02840__01DT = (v02839__01DR**1)*(v02625__dr**1)
v02840__01DT = (v02840__01DT*_01DS_coeff).reshape((1, 40, 30))

# op _01Du_power_combination_eval
# LANG: _01Dt, _chord --> _01Dv
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02792__01Dv = (v02786__01Dt**1)*(v02632__chord**1)
v02792__01Dv = (v02792__01Dv*_01Du_coeff).reshape((1, 40, 30))

# op _01EH_power_combination_eval
# LANG: _01AU, _01EG --> _01EI
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02821__01EI = (v02820__01EG**1)*(v02743__01AU**1)
v02821__01EI = (v02821__01EI*_01EH_coeff).reshape((1, 40, 30))

# op _01ER_linear_combination_eval
# LANG: _01EK, _01EQ --> _01ES
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02824__01ES = _01ER_constant+1*v02823__01EK+1*v02827__01EQ

# op _01El_power_combination_eval
# LANG: _01AU, _01Ek --> _01Em
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02754__01Em = (v02753__01Ek**1)*(v02743__01AU**1)
v02754__01Em = (v02754__01Em*_01El_coeff).reshape((1, 40, 30))

# op _01Ev_linear_combination_eval
# LANG: _01Eo, _01Eu --> _01Ew
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02757__01Ew = _01Ev_constant+1*v02756__01Eo+1*v02760__01Eu

# op _01FU_power_combination_eval
# LANG: _01Fz, _01FT --> _01FV
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02846__01FV = (v02845__01Fz**1)*(v02853__01FT**1)
v02846__01FV = (v02846__01FV*_01FU_coeff).reshape((1, 40, 30))

# op _01Fo_power_combination_eval
# LANG: _01Fn, _radius --> _01Fp
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02812__01Fp = (v02811__01Fn**1)*(v02637__radius**1)
v02812__01Fp = (v02812__01Fp*_01Fo_coeff).reshape((1, 40, 30))

# op _01GB_power_combination_eval
# LANG: _01Gs, _01GA --> _01GC
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02875__01GC = (v02874__01Gs**1)*(v02879__01GA**-1)
v02875__01GC = (v02875__01GC*_01GB_coeff).reshape((1,))

# op _01GL_power_combination_eval
# LANG: _01GK --> _01GM
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02885__01GM = (v02884__01GK**5)
v02885__01GM = (v02885__01GM*_01GL_coeff).reshape((1,))

# op _01GZ_power_combination_eval
# LANG: _01GY --> _01G_
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02892__01G_ = (v02891__01GY**1)
v02892__01G_ = (v02892__01G_*_01GZ_coeff).reshape((1,))

# op _01H6_power_combination_eval
# LANG: C_T --> _01H7
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02896__01H7 = (v02868_C_T**1)
v02896__01H7 = (v02896__01H7*_01H6_coeff).reshape((1,))

# op _01Ih_linear_combination_eval
# LANG: _01Ie, _01Ig --> _01Ii
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02921__01Ii = _01Ih_constant+1*v02920__01Ie+1*v02922__01Ig

# op _01Ij_power_combination_eval
# LANG: Vz --> _01Ik
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02924__01Ik = (v02083_w**2)
v02924__01Ik = (v02924__01Ik*_01Ij_coeff).reshape((1,))

# op _01JE_power_combination_eval
# LANG: _01JD --> _01JF
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02965__01JF = (v02964__01JD**5.258643795229161)
v02965__01JF = (v02965__01JF*_01JE_coeff).reshape((1,))

# op _01JO_power_combination_eval
# LANG: _01JN --> _01JP
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02970__01JP = (v02969__01JN**1.5)
v02970__01JP = (v02970__01JP*_01JO_coeff).reshape((1,))

# op _01LC expand_array_eval
# LANG: normal_proj --> _01LD
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03030__01LD = np.einsum('ac,b->abc', v03024_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _01LM_power_combination_eval
# LANG: rel_obs_z_pos, rel_obs_dist --> _01LN
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03034__01LN = (v03015_rel_obs_z_pos**1)*(v03023_rel_obs_dist**-1)
v03034__01LN = (v03034__01LN*_01LM_coeff).reshape((1, 1, 2))

# op _01LU_linear_combination_eval
# LANG: rel_obs_z_pos --> _01LV
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03039__01LV = _01LU_constant+1*v03015_rel_obs_z_pos

# op _01Lw expand_array_eval
# LANG: normal_proj --> _01Lx
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03026__01Lx = np.einsum('ac,b->abc', v03024_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _01VL expand_array_eval
# LANG: normal_proj --> _01VM
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03339__01VM = np.einsum('ac,b->abc', v03333_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _01VV_power_combination_eval
# LANG: rel_obs_z_pos, rel_obs_dist --> _01VW
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03343__01VW = (v03324_rel_obs_z_pos**1)*(v03332_rel_obs_dist**-1)
v03343__01VW = (v03343__01VW*_01VV_coeff).reshape((1, 1, 2))

# op _01W2_linear_combination_eval
# LANG: rel_obs_z_pos --> _01W3
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03348__01W3 = _01W2_constant+1*v03324_rel_obs_z_pos

# op _01Zj_linear_combination_eval
# LANG: _01Zg, _01Zi --> _01Zk
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03437__01Zk = _01Zj_constant+1*v03436__01Zg+1*v03438__01Zi

# op _01Zl_power_combination_eval
# LANG: Vz --> _01Zm
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03440__01Zm = (v02083_w**2)
v03440__01Zm = (v03440__01Zm*_01Zl_coeff).reshape((1,))

# op _01_G_power_combination_eval
# LANG: _01_F --> _01_H
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03479__01_H = (v03478__01_F**5.258643795229161)
v03479__01_H = (v03479__01_H*_01_G_coeff).reshape((1,))

# op _01_Q_power_combination_eval
# LANG: _01_P --> _01_R
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03484__01_R = (v03483__01_P**1.5)
v03484__01_R = (v03484__01_R*_01_Q_coeff).reshape((1,))

# op _01aJ_power_combination_eval
# LANG: cruise_altitude --> _01aK
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02100__01aK = (v02096_cruise_altitude**5)
v02100__01aK = (v02100__01aK*_01aJ_coeff).reshape((1,))

# op _01aN_power_combination_eval
# LANG: cruise_altitude --> _01aO
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02115__01aO = (v02096_cruise_altitude**5)
v02115__01aO = (v02115__01aO*_01aN_coeff).reshape((1,))

# op _01aV_power_combination_eval
# LANG: cruise_altitude --> _01aW
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02102__01aW = (v02096_cruise_altitude**4)
v02102__01aW = (v02102__01aW*_01aV_coeff).reshape((1,))

# op _01aZ_power_combination_eval
# LANG: cruise_altitude --> _01a_
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02117__01a_ = (v02096_cruise_altitude**4)
v02117__01a_ = (v02117__01a_*_01aZ_coeff).reshape((1,))

# op _01ac_exp_a_eval
# LANG: _01ab --> _01ad
# SHAPES: (4, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02057__01ad = _01ac_exp_a_eval_a**v02056__01ab

# op _01au_power_combination_eval
# LANG: cruise_altitude --> _01av
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02097__01av = (v02096_cruise_altitude**6)
v02097__01av = (v02097__01av*_01au_coeff).reshape((1,))

# op _01az_power_combination_eval
# LANG: cruise_altitude --> _01aA
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02112__01aA = (v02096_cruise_altitude**6)
v02112__01aA = (v02112__01aA*_01az_coeff).reshape((1,))

# op _01b6_power_combination_eval
# LANG: cruise_altitude --> _01b7
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02104__01b7 = (v02096_cruise_altitude**3)
v02104__01b7 = (v02104__01b7*_01b6_coeff).reshape((1,))

# op _01bG_power_combination_eval
# LANG: cruise_altitude --> _01bH
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02110__01bH = (v02096_cruise_altitude**0)
v02110__01bH = (v02110__01bH*_01bG_coeff).reshape((1,))

# op _01bK_power_combination_eval
# LANG: cruise_altitude --> _01bL
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02125__01bL = (v02096_cruise_altitude**0)
v02125__01bL = (v02125__01bL*_01bK_coeff).reshape((1,))

# op _01b__power_combination_eval
# LANG: _01bZ --> _01c0
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02146__01c0 = (v02145__01bZ**1.5)
v02146__01c0 = (v02146__01c0*_01b__coeff).reshape((1,))

# op _01ba_power_combination_eval
# LANG: cruise_altitude --> _01bb
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02119__01bb = (v02096_cruise_altitude**3)
v02119__01bb = (v02119__01bb*_01ba_coeff).reshape((1,))

# op _01bi_power_combination_eval
# LANG: cruise_altitude --> _01bj
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02106__01bj = (v02096_cruise_altitude**2)
v02106__01bj = (v02106__01bj*_01bi_coeff).reshape((1,))

# op _01bm_power_combination_eval
# LANG: cruise_altitude --> _01bn
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02121__01bn = (v02096_cruise_altitude**2)
v02121__01bn = (v02121__01bn*_01bm_coeff).reshape((1,))

# op _01bu_power_combination_eval
# LANG: cruise_altitude --> _01bv
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02108__01bv = (v02096_cruise_altitude**1)
v02108__01bv = (v02108__01bv*_01bu_coeff).reshape((1,))

# op _01by_power_combination_eval
# LANG: cruise_altitude --> _01bz
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02123__01bz = (v02096_cruise_altitude**1)
v02123__01bz = (v02123__01bz*_01by_coeff).reshape((1,))

# op _01ek expand_array_eval
# LANG: rotor_2_disk_origin --> thrust_origin
# SHAPES: (3,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((3,))
v02179_thrust_origin = np.einsum('b,a->ab', v022_rotor_2_disk_origin.reshape((3,)) ,np.ones((1,))).reshape((1, 3))
v022_rotor_2_disk_origin = v022_rotor_2_disk_origin.reshape((1, 3))

# op _01f9_power_combination_eval
# LANG: _01f6, _01f8 --> _01fa
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02195__01fa = (v02194__01f6**1)*(v02196__01f8**1)
v02195__01fa = (v02195__01fa*_01f9_coeff).reshape((1, 1))

# op _01ff_power_combination_eval
# LANG: _01fe, _01fd --> _01fg
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02201__01fg = (v02200__01fd**1)*(v02197__01fe**1)
v02201__01fg = (v02201__01fg*_01ff_coeff).reshape((1, 1))

# op _01fk_power_combination_eval
# LANG: _01fj, _01fi --> _01fl
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02203__01fl = (v02202__01fi**1)*(v02198__01fj**1)
v02203__01fl = (v02203__01fl*_01fk_coeff).reshape((1, 1))

# op _01nK_power_combination_eval
# LANG: _01nJ --> _01nL
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02405__01nL = (v02404__01nJ**1)
v02405__01nL = (v02405__01nL*_01nK_coeff).reshape((1, 40, 30))

# op _01oP_power_combination_eval
# LANG: _01oO, _dr --> _01oQ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02467__01oQ = (v02466__01oO**1)*(v02252__dr**1)
v02467__01oQ = (v02467__01oQ*_01oP_coeff).reshape((1, 40, 30))

# op _01or_power_combination_eval
# LANG: _01oq, _chord --> _01os
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02419__01os = (v02413__01oq**1)*(v02259__chord**1)
v02419__01os = (v02419__01os*_01or_coeff).reshape((1, 40, 30))

# op _01pE_power_combination_eval
# LANG: _01lR, _01pD --> _01pF
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02448__01pF = (v02447__01pD**1)*(v02370__01lR**1)
v02448__01pF = (v02448__01pF*_01pE_coeff).reshape((1, 40, 30))

# op _01pO_linear_combination_eval
# LANG: _01pH, _01pN --> _01pP
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02451__01pP = _01pO_constant+1*v02450__01pH+1*v02454__01pN

# op _01pi_power_combination_eval
# LANG: _01lR, _01ph --> _01pj
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02381__01pj = (v02380__01ph**1)*(v02370__01lR**1)
v02381__01pj = (v02381__01pj*_01pi_coeff).reshape((1, 40, 30))

# op _01ps_linear_combination_eval
# LANG: _01pl, _01pr --> _01pt
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02384__01pt = _01ps_constant+1*v02383__01pl+1*v02387__01pr

# op _01qR_power_combination_eval
# LANG: _01qw, _01qQ --> _01qS
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02473__01qS = (v02472__01qw**1)*(v02480__01qQ**1)
v02473__01qS = (v02473__01qS*_01qR_coeff).reshape((1, 40, 30))

# op _01ql_power_combination_eval
# LANG: _01qk, _radius --> _01qm
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02439__01qm = (v02438__01qk**1)*(v02264__radius**1)
v02439__01qm = (v02439__01qm*_01ql_coeff).reshape((1, 40, 30))

# op _01rI_power_combination_eval
# LANG: _01rH --> _01rJ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02512__01rJ = (v02511__01rH**5)
v02512__01rJ = (v02512__01rJ*_01rI_coeff).reshape((1,))

# op _01rW_power_combination_eval
# LANG: _01rV --> _01rX
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02519__01rX = (v02518__01rV**1)
v02519__01rX = (v02519__01rX*_01rW_coeff).reshape((1,))

# op _01ry_power_combination_eval
# LANG: _01rp, _01rx --> _01rz
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02502__01rz = (v02501__01rp**1)*(v02506__01rx**-1)
v02502__01rz = (v02502__01rz*_01ry_coeff).reshape((1,))

# op _01s3_power_combination_eval
# LANG: C_T --> _01s4
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02523__01s4 = (v02495_C_T**1)
v02523__01s4 = (v02523__01s4*_01s3_coeff).reshape((1,))

# op _01tn expand_array_eval
# LANG: rotor_1_disk_origin --> thrust_origin
# SHAPES: (3,) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((3,))
v02552_thrust_origin = np.einsum('b,a->ab', v012_rotor_1_disk_origin.reshape((3,)) ,np.ones((1,))).reshape((1, 3))
v012_rotor_1_disk_origin = v012_rotor_1_disk_origin.reshape((1, 3))

# op _01uc_power_combination_eval
# LANG: _01u9, _01ub --> _01ud
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02568__01ud = (v02567__01u9**1)*(v02569__01ub**1)
v02568__01ud = (v02568__01ud*_01uc_coeff).reshape((1, 1))

# op _01ui_power_combination_eval
# LANG: _01uh, _01ug --> _01uj
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02574__01uj = (v02573__01ug**1)*(v02570__01uh**1)
v02574__01uj = (v02574__01uj*_01ui_coeff).reshape((1, 1))

# op _01un_power_combination_eval
# LANG: _01um, _01ul --> _01uo
# SHAPES: (1, 1), (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02576__01uo = (v02575__01ul**1)*(v02571__01um**1)
v02576__01uo = (v02576__01uo*_01un_coeff).reshape((1, 1))

# op _021E expand_array_eval
# LANG: normal_proj --> _021F
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03544__021F = np.einsum('ac,b->abc', v03538_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _021O_power_combination_eval
# LANG: rel_obs_z_pos, rel_obs_dist --> _021P
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03548__021P = (v03529_rel_obs_z_pos**1)*(v03537_rel_obs_dist**-1)
v03548__021P = (v03548__021P*_021O_coeff).reshape((1, 1, 2))

# op _021W_linear_combination_eval
# LANG: rel_obs_z_pos --> _021X
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03553__021X = _021W_constant+1*v03529_rel_obs_z_pos

# op _021y expand_array_eval
# LANG: normal_proj --> _021z
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03540__021z = np.einsum('ac,b->abc', v03538_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02bN expand_array_eval
# LANG: normal_proj --> _02bO
# SHAPES: (1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03853__02bO = np.einsum('ac,b->abc', v03847_normal_proj.reshape((1, 2)) ,np.ones((1,))).reshape((1, 1, 2))

# op _02bX_power_combination_eval
# LANG: rel_obs_z_pos, rel_obs_dist --> _02bY
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03857__02bY = (v03838_rel_obs_z_pos**1)*(v03846_rel_obs_dist**-1)
v03857__02bY = (v03857__02bY*_02bX_coeff).reshape((1, 1, 2))

# op _02c4_linear_combination_eval
# LANG: rel_obs_z_pos --> _02c5
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03862__02c5 = _02c4_constant+1*v03838_rel_obs_z_pos

# op _02eF_exp_a_eval
# LANG: _02eE --> _02eG
# SHAPES: (4, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03935__02eG = _02eF_exp_a_eval_a**v03934__02eE

# op _02f2_exp_a_eval
# LANG: _02f1 --> _02f3
# SHAPES: (4, 1, 2) --> (4, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03945__02f3 = _02f2_exp_a_eval_a**v03944__02f1

# op _0015_power_combination_eval
# LANG: _0014 --> _0016
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v048__0016 = (v047__0014**1)
v048__0016 = (v048__0016*_0015_coeff).reshape((1,))

# op _001A_power_combination_eval
# LANG: _001z --> _001B
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v068__001B = (v067__001z**1)
v068__001B = (v068__001B*_001A_coeff).reshape((1,))

# op _001I_power_combination_eval
# LANG: _001H --> _001J
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v055__001J = (v054__001H**1)
v055__001J = (v055__001J*_001I_coeff).reshape((1,))

# op _001M_power_combination_eval
# LANG: _001L --> _001N
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v070__001N = (v069__001L**1)
v070__001N = (v070__001N*_001M_coeff).reshape((1,))

# op _001U_power_combination_eval
# LANG: _001T --> _001V
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v057__001V = (v056__001T**1)
v057__001V = (v057__001V*_001U_coeff).reshape((1,))

# op _001Y_power_combination_eval
# LANG: _001X --> _001Z
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v072__001Z = (v071__001X**1)
v072__001Z = (v072__001Z*_001Y_coeff).reshape((1,))

# op _001a_power_combination_eval
# LANG: _0019 --> _001b
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v063__001b = (v062__0019**1)
v063__001b = (v063__001b*_001a_coeff).reshape((1,))

# op _001k_power_combination_eval
# LANG: _001j --> _001l
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v051__001l = (v050__001j**1)
v051__001l = (v051__001l*_001k_coeff).reshape((1,))

# op _001o_power_combination_eval
# LANG: _001n --> _001p
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v066__001p = (v065__001n**1)
v066__001p = (v066__001p*_001o_coeff).reshape((1,))

# op _001w_power_combination_eval
# LANG: _001v --> _001x
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v053__001x = (v052__001v**1)
v053__001x = (v053__001x*_001w_coeff).reshape((1,))

# op _0025_power_combination_eval
# LANG: _0024 --> _0026
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v059__0026 = (v058__0024**1)
v059__0026 = (v059__0026*_0025_coeff).reshape((1,))

# op _0029_power_combination_eval
# LANG: _0028 --> _002a
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v074__002a = (v073__0028**1)
v074__002a = (v074__002a*_0029_coeff).reshape((1,))

# op _002B_power_combination_eval
# LANG: _002A --> _002C
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v097__002C = (v096__002A**1)
v097__002C = (v097__002C*_002B_coeff).reshape((1,))

# op _002h_power_combination_eval
# LANG: _002g --> _002i
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v061__002i = (v060__002g**1)
v061__002i = (v061__002i*_002h_coeff).reshape((1,))

# op _002l_power_combination_eval
# LANG: _002k --> _002m
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v076__002m = (v075__002k**1)
v076__002m = (v076__002m*_002l_coeff).reshape((1,))

# op _005e_indexed_passthrough_eval
# LANG: _005d, _005j, _005o --> F
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0149_F__temp[i_v0145__005d__005e_indexed_passthrough_eval] = v0145__005d.flatten()
v0149_F = v0149_F__temp.copy()
v0149_F__temp[i_v0151__005j__005e_indexed_passthrough_eval] = v0151__005j.flatten()
v0149_F = v0149_F__temp.copy()
v0149_F__temp[i_v0153__005o__005e_indexed_passthrough_eval] = v0153__005o.flatten()
v0149_F = v0149_F__temp.copy()

# op _005p_linear_combination_eval
# LANG: thrust_origin, reference_point --> _005q
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0154__005q = _005p_constant+1*v0129_thrust_origin+-1*v0155_reference_point

# op _00BK arccos_eval
# LANG: _00BJ --> _00BL
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0982__00BL = np.arccos(v0981__00BJ)

# op _00BM_linear_combination_eval
# LANG: rel_obs_z_pos --> _00BN
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0984__00BN = _00BM_constant+1*v0962_rel_obs_z_pos

# op _00BS_power_combination_eval
# LANG: _00BR --> _00BT
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0987__00BT = (v0986__00BR**2)
v0987__00BT = (v0987__00BT*_00BS_coeff).reshape((1, 1, 2))

# op _00Bu_power_combination_eval
# LANG: rel_obs_dist, _00Bt --> _00Bv
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0974__00Bv = (v0973__00Bt**1)*(v0970_rel_obs_dist**-1)
v0974__00Bv = (v0974__00Bv*_00Bu_coeff).reshape((1, 1, 2))

# op _00OA_linear_combination_eval
# LANG: rel_obs_z_pos --> _00OB
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01376__00OB = _00OA_constant+1*v01354_rel_obs_z_pos

# op _00OG_power_combination_eval
# LANG: _00OF --> _00OH
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01379__00OH = (v01378__00OF**2)
v01379__00OH = (v01379__00OH*_00OG_coeff).reshape((1, 1, 2))

# op _00Oo_power_combination_eval
# LANG: rel_obs_dist, _00On --> _00Op
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01370__00Op = (v01369__00On**1)*(v01362_rel_obs_dist**-1)
v01370__00Op = (v01370__00Op*_00Oo_coeff).reshape((1, 1, 2))

# op _00Oy arccos_eval
# LANG: _00Ox --> _00Oz
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01374__00Oz = np.arccos(v01373__00Ox)

# op _00Tm_power_combination_eval
# LANG: _00Tl --> _00Tn
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01514__00Tn = (v01513__00Tl**1)
v01514__00Tn = (v01514__00Tn*_00Tm_coeff).reshape((1,))

# op _00V4_power_combination_eval
# LANG: rel_obs_dist, _00V3 --> _00V5
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01570__00V5 = (v01569__00V3**1)*(v01566_rel_obs_dist**-1)
v01570__00V5 = (v01570__00V5*_00V4_coeff).reshape((1, 1, 2))

# op _00Vk arccos_eval
# LANG: _00Vj --> _00Vl
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01578__00Vl = np.arccos(v01577__00Vj)

# op _00Vm_linear_combination_eval
# LANG: rel_obs_z_pos --> _00Vn
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01580__00Vn = _00Vm_constant+1*v01558_rel_obs_z_pos

# op _00Vs_power_combination_eval
# LANG: _00Vr --> _00Vt
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01583__00Vt = (v01582__00Vr**2)
v01583__00Vt = (v01583__00Vt*_00Vs_coeff).reshape((1, 1, 2))

# op _00dJ_power_combination_eval
# LANG: _00bU, _local_thrust --> _00dK
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0352__00dK = (v0325__local_thrust**1)*(v0320__00bU**-1)
v0352__00dK = (v0352__00dK*_00dJ_coeff).reshape((1, 40, 30))

# op _00dP_power_combination_eval
# LANG: _00dO --> _00dQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0356__00dQ = (v0355__00dO**2)
v0356__00dQ = (v0356__00dQ*_00dP_coeff).reshape((1, 40, 30))

# op _00dT_power_combination_eval
# LANG: _rotor_radius --> _00dU
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0358__00dU = (v0201__rotor_radius**1)
v0358__00dU = (v0358__00dU*_00dT_coeff).reshape((1, 40, 30))

# op _00eU_power_combination_eval
# LANG: _00eT, _radius --> _local_torque_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0418__local_torque_2 = (v0417__00eT**1)*(v0214__radius**1)
v0418__local_torque_2 = (v0418__local_torque_2*_00eU_coeff).reshape((1, 40, 30))

# op _00ew_power_combination_eval
# LANG: _00ev, _dr --> _local_thrust_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0370__local_thrust_2 = (v0369__00ev**1)*(v0202__dr**1)
v0370__local_thrust_2 = (v0370__local_thrust_2*_00ew_coeff).reshape((1, 40, 30))

# op _00fT_power_combination_eval
# LANG: _00fI, _00fS --> _00fU
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0399__00fU = (v0398__00fI**1)*(v0401__00fS**1)
v0399__00fU = (v0399__00fU*_00fT_coeff).reshape((1, 40, 30))

# op _00fx_power_combination_eval
# LANG: _00fm, _00fw --> _00fy
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0332__00fy = (v0331__00fm**1)*(v0334__00fw**1)
v0332__00fy = (v0332__00fy*_00fx_coeff).reshape((1, 40, 30))

# op _00gW_power_combination_eval
# LANG: _00gV, prandtl_loss_factor --> _00gX
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0434__00gX = (v0423__00gV**1)*(v0264_prandtl_loss_factor**1)
v0434__00gX = (v0434__00gX*_00gW_coeff).reshape((1, 40, 30))

# op _00gq_power_combination_eval
# LANG: _00gp, _dr --> _local_thrust_star
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0390__local_thrust_star = (v0389__00gp**1)*(v0202__dr**1)
v0390__local_thrust_star = (v0390__local_thrust_star*_00gq_coeff).reshape((1, 40, 30))

# op _00hN_power_combination_eval
# LANG: _00hC, _00hM --> C_Q
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0457_C_Q = (v0452__00hC**1)*(v0462__00hM**-1)
v0457_C_Q = (v0457_C_Q*_00hN_coeff).reshape((1,))

# op _00i0_power_combination_eval
# LANG: _00h_ --> J
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0470_J = (v0469__00h_**1)
v0470_J = (v0470_J*_00i0_coeff).reshape((1,))

# op _00i8_power_combination_eval
# LANG: _00i7 --> _00i9
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0474__00i9 = (v0473__00i7**0.5)
v0474__00i9 = (v0474__00i9*_00i8_coeff).reshape((1,))

# op _00kh_indexed_passthrough_eval
# LANG: _00kg, _00km, _00kr --> F
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0522_F__temp[i_v0518__00kg__00kh_indexed_passthrough_eval] = v0518__00kg.flatten()
v0522_F = v0522_F__temp.copy()
v0522_F__temp[i_v0524__00km__00kh_indexed_passthrough_eval] = v0524__00km.flatten()
v0522_F = v0522_F__temp.copy()
v0522_F__temp[i_v0526__00kr__00kh_indexed_passthrough_eval] = v0526__00kr.flatten()
v0522_F = v0522_F__temp.copy()

# op _00ks_linear_combination_eval
# LANG: thrust_origin, reference_point --> _00kt
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0527__00kt = _00ks_constant+1*v0502_thrust_origin+-1*v0528_reference_point

# op _00sM_power_combination_eval
# LANG: _00qX, _local_thrust --> _00sN
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0725__00sN = (v0698__local_thrust**1)*(v0693__00qX**-1)
v0725__00sN = (v0725__00sN*_00sM_coeff).reshape((1, 40, 30))

# op _00sS_power_combination_eval
# LANG: _00sR --> _00sT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0729__00sT = (v0728__00sR**2)
v0729__00sT = (v0729__00sT*_00sS_coeff).reshape((1, 40, 30))

# op _00sW_power_combination_eval
# LANG: _rotor_radius --> _00sX
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0731__00sX = (v0574__rotor_radius**1)
v0731__00sX = (v0731__00sX*_00sW_coeff).reshape((1, 40, 30))

# op _00tX_power_combination_eval
# LANG: _00tW, _radius --> _local_torque_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0791__local_torque_2 = (v0790__00tW**1)*(v0587__radius**1)
v0791__local_torque_2 = (v0791__local_torque_2*_00tX_coeff).reshape((1, 40, 30))

# op _00tz_power_combination_eval
# LANG: _00ty, _dr --> _local_thrust_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0743__local_thrust_2 = (v0742__00ty**1)*(v0575__dr**1)
v0743__local_thrust_2 = (v0743__local_thrust_2*_00tz_coeff).reshape((1, 40, 30))

# op _00uA_power_combination_eval
# LANG: _00up, _00uz --> _00uB
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0705__00uB = (v0704__00up**1)*(v0707__00uz**1)
v0705__00uB = (v0705__00uB*_00uA_coeff).reshape((1, 40, 30))

# op _00uW_power_combination_eval
# LANG: _00uL, _00uV --> _00uX
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0772__00uX = (v0771__00uL**1)*(v0774__00uV**1)
v0772__00uX = (v0772__00uX*_00uW_coeff).reshape((1, 40, 30))

# op _00vZ_power_combination_eval
# LANG: _00vY, prandtl_loss_factor --> _00v_
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0807__00v_ = (v0796__00vY**1)*(v0637_prandtl_loss_factor**1)
v0807__00v_ = (v0807__00v_*_00vZ_coeff).reshape((1, 40, 30))

# op _00vt_power_combination_eval
# LANG: _00vs, _dr --> _local_thrust_star
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0763__local_thrust_star = (v0762__00vs**1)*(v0575__dr**1)
v0763__local_thrust_star = (v0763__local_thrust_star*_00vt_coeff).reshape((1, 40, 30))

# op _00wQ_power_combination_eval
# LANG: _00wF, _00wP --> C_Q
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0830_C_Q = (v0825__00wF**1)*(v0835__00wP**-1)
v0830_C_Q = (v0830_C_Q*_00wQ_coeff).reshape((1,))

# op _00x3_power_combination_eval
# LANG: _00x2 --> J
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0843_J = (v0842__00x2**1)
v0843_J = (v0843_J*_00x3_coeff).reshape((1,))

# op _00xb_power_combination_eval
# LANG: _00xa --> _00xc
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0847__00xc = (v0846__00xa**0.5)
v0847__00xc = (v0847__00xc*_00xb_coeff).reshape((1,))

# op _00zM_power_combination_eval
# LANG: _00zL --> _00zN
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0918__00zN = (v0917__00zL**1)
v0918__00zN = (v0918__00zN*_00zM_coeff).reshape((1,))

# op _016Z_power_combination_eval
# LANG: rel_obs_dist, _016Y --> _016_
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01966__016_ = (v01965__016Y**1)*(v01958_rel_obs_dist**-1)
v01966__016_ = (v01966__016_*_016Z_coeff).reshape((1, 1, 2))

# op _0178 arccos_eval
# LANG: _0177 --> _0179
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01970__0179 = np.arccos(v01969__0177)

# op _017a_linear_combination_eval
# LANG: rel_obs_z_pos --> _017b
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01972__017b = _017a_constant+1*v01950_rel_obs_z_pos

# op _017g_power_combination_eval
# LANG: _017f --> _017h
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01975__017h = (v01974__017f**2)
v01975__017h = (v01975__017h*_017g_coeff).reshape((1, 1, 2))

# op _019R_single_tensor_sum_with_axis_eval
# LANG: _019Q --> _019S
# SHAPES: (4, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02048__019S = np.sum(v02047__019Q, axis = (0,)).reshape((1, 2))

# op _01CJ_power_combination_eval
# LANG: _01AU, _local_thrust --> _01CK
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02775__01CK = (v02748__local_thrust**1)*(v02743__01AU**-1)
v02775__01CK = (v02775__01CK*_01CJ_coeff).reshape((1, 40, 30))

# op _01CP_power_combination_eval
# LANG: _01CO --> _01CQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02779__01CQ = (v02778__01CO**2)
v02779__01CQ = (v02779__01CQ*_01CP_coeff).reshape((1, 40, 30))

# op _01CT_power_combination_eval
# LANG: _rotor_radius --> _01CU
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02781__01CU = (v02624__rotor_radius**1)
v02781__01CU = (v02781__01CU*_01CT_coeff).reshape((1, 40, 30))

# op _01DU_power_combination_eval
# LANG: _01DT, _radius --> _local_torque_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02841__local_torque_2 = (v02840__01DT**1)*(v02637__radius**1)
v02841__local_torque_2 = (v02841__local_torque_2*_01DU_coeff).reshape((1, 40, 30))

# op _01Dw_power_combination_eval
# LANG: _01Dv, _dr --> _local_thrust_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02793__local_thrust_2 = (v02792__01Dv**1)*(v02625__dr**1)
v02793__local_thrust_2 = (v02793__local_thrust_2*_01Dw_coeff).reshape((1, 40, 30))

# op _01ET_power_combination_eval
# LANG: _01EI, _01ES --> _01EU
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02822__01EU = (v02821__01EI**1)*(v02824__01ES**1)
v02822__01EU = (v02822__01EU*_01ET_coeff).reshape((1, 40, 30))

# op _01Ex_power_combination_eval
# LANG: _01Em, _01Ew --> _01Ey
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02755__01Ey = (v02754__01Em**1)*(v02757__01Ew**1)
v02755__01Ey = (v02755__01Ey*_01Ex_coeff).reshape((1, 40, 30))

# op _01FW_power_combination_eval
# LANG: _01FV, prandtl_loss_factor --> _01FX
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02857__01FX = (v02846__01FV**1)*(v02687_prandtl_loss_factor**1)
v02857__01FX = (v02857__01FX*_01FW_coeff).reshape((1, 40, 30))

# op _01Fq_power_combination_eval
# LANG: _01Fp, _dr --> _local_thrust_star
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02813__local_thrust_star = (v02812__01Fp**1)*(v02625__dr**1)
v02813__local_thrust_star = (v02813__local_thrust_star*_01Fq_coeff).reshape((1, 40, 30))

# op _01GN_power_combination_eval
# LANG: _01GC, _01GM --> C_Q
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02880_C_Q = (v02875__01GC**1)*(v02885__01GM**-1)
v02880_C_Q = (v02880_C_Q*_01GN_coeff).reshape((1,))

# op _01H0_power_combination_eval
# LANG: _01G_ --> J
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02893_J = (v02892__01G_**1)
v02893_J = (v02893_J*_01H0_coeff).reshape((1,))

# op _01H8_power_combination_eval
# LANG: _01H7 --> _01H9
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02897__01H9 = (v02896__01H7**0.5)
v02897__01H9 = (v02897__01H9*_01H8_coeff).reshape((1,))

# op _01Il_linear_combination_eval
# LANG: _01Ii, _01Ik --> _01Im
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02923__01Im = _01Il_constant+1*v02921__01Ii+1*v02924__01Ik

# op _01JG_power_combination_eval
# LANG: _01JF --> pressure
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02966_pressure = (v02965__01JF**1)
v02966_pressure = (v02966_pressure*_01JG_coeff).reshape((1,))

# op _01JQ_power_combination_eval
# LANG: _01JP --> _01JR
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02971__01JR = (v02970__01JP**1)
v02971__01JR = (v02971__01JR*_01JQ_coeff).reshape((1,))

# op _01LE_power_combination_eval
# LANG: rel_obs_dist, _01LD --> _01LF
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03031__01LF = (v03030__01LD**1)*(v03023_rel_obs_dist**-1)
v03031__01LF = (v03031__01LF*_01LE_coeff).reshape((1, 1, 2))

# op _01LO arccos_eval
# LANG: _01LN --> _01LP
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03035__01LP = np.arccos(v03034__01LN)

# op _01LQ_linear_combination_eval
# LANG: rel_obs_z_pos --> _01LR
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03037__01LR = _01LQ_constant+1*v03015_rel_obs_z_pos

# op _01LW_power_combination_eval
# LANG: _01LV --> _01LX
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03040__01LX = (v03039__01LV**2)
v03040__01LX = (v03040__01LX*_01LW_coeff).reshape((1, 1, 2))

# op _01Ly_power_combination_eval
# LANG: rel_obs_dist, _01Lx --> _01Lz
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03027__01Lz = (v03026__01Lx**1)*(v03023_rel_obs_dist**-1)
v03027__01Lz = (v03027__01Lz*_01Ly_coeff).reshape((1, 1, 2))

# op _01VN_power_combination_eval
# LANG: rel_obs_dist, _01VM --> _01VO
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03340__01VO = (v03339__01VM**1)*(v03332_rel_obs_dist**-1)
v03340__01VO = (v03340__01VO*_01VN_coeff).reshape((1, 1, 2))

# op _01VX arccos_eval
# LANG: _01VW --> _01VY
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03344__01VY = np.arccos(v03343__01VW)

# op _01VZ_linear_combination_eval
# LANG: rel_obs_z_pos --> _01V_
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03346__01V_ = _01VZ_constant+1*v03324_rel_obs_z_pos

# op _01W4_power_combination_eval
# LANG: _01W3 --> _01W5
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03349__01W5 = (v03348__01W3**2)
v03349__01W5 = (v03349__01W5*_01W4_coeff).reshape((1, 1, 2))

# op _01Zn_linear_combination_eval
# LANG: _01Zk, _01Zm --> _01Zo
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03439__01Zo = _01Zn_constant+1*v03437__01Zk+1*v03440__01Zm

# op _01_I_power_combination_eval
# LANG: _01_H --> pressure
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03480_pressure = (v03479__01_H**1)
v03480_pressure = (v03480_pressure*_01_I_coeff).reshape((1,))

# op _01_S_power_combination_eval
# LANG: _01_R --> _01_T
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03485__01_T = (v03484__01_R**1)
v03485__01_T = (v03485__01_T*_01_S_coeff).reshape((1,))

# op _01aB_power_combination_eval
# LANG: _01aA --> _01aC
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02113__01aC = (v02112__01aA**1)
v02113__01aC = (v02113__01aC*_01aB_coeff).reshape((1,))

# op _01aL_power_combination_eval
# LANG: _01aK --> _01aM
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02101__01aM = (v02100__01aK**1)
v02101__01aM = (v02101__01aM*_01aL_coeff).reshape((1,))

# op _01aP_power_combination_eval
# LANG: _01aO --> _01aQ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02116__01aQ = (v02115__01aO**1)
v02116__01aQ = (v02116__01aQ*_01aP_coeff).reshape((1,))

# op _01aX_power_combination_eval
# LANG: _01aW --> _01aY
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02103__01aY = (v02102__01aW**1)
v02103__01aY = (v02103__01aY*_01aX_coeff).reshape((1,))

# op _01ae_single_tensor_sum_with_axis_eval
# LANG: _01ad --> _01af
# SHAPES: (4, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02058__01af = np.sum(v02057__01ad, axis = (0,)).reshape((1, 2))

# op _01aw_power_combination_eval
# LANG: _01av --> _01ax
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02098__01ax = (v02097__01av**1)
v02098__01ax = (v02098__01ax*_01aw_coeff).reshape((1,))

# op _01b0_power_combination_eval
# LANG: _01a_ --> _01b1
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02118__01b1 = (v02117__01a_**1)
v02118__01b1 = (v02118__01b1*_01b0_coeff).reshape((1,))

# op _01b8_power_combination_eval
# LANG: _01b7 --> _01b9
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02105__01b9 = (v02104__01b7**1)
v02105__01b9 = (v02105__01b9*_01b8_coeff).reshape((1,))

# op _01bA_power_combination_eval
# LANG: _01bz --> _01bB
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02124__01bB = (v02123__01bz**1)
v02124__01bB = (v02124__01bB*_01bA_coeff).reshape((1,))

# op _01bI_power_combination_eval
# LANG: _01bH --> _01bJ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02111__01bJ = (v02110__01bH**1)
v02111__01bJ = (v02111__01bJ*_01bI_coeff).reshape((1,))

# op _01bM_power_combination_eval
# LANG: _01bL --> _01bN
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02126__01bN = (v02125__01bL**1)
v02126__01bN = (v02126__01bN*_01bM_coeff).reshape((1,))

# op _01bc_power_combination_eval
# LANG: _01bb --> _01bd
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02120__01bd = (v02119__01bb**1)
v02120__01bd = (v02120__01bd*_01bc_coeff).reshape((1,))

# op _01bk_power_combination_eval
# LANG: _01bj --> _01bl
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02107__01bl = (v02106__01bj**1)
v02107__01bl = (v02107__01bl*_01bk_coeff).reshape((1,))

# op _01bo_power_combination_eval
# LANG: _01bn --> _01bp
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02122__01bp = (v02121__01bn**1)
v02122__01bp = (v02122__01bp*_01bo_coeff).reshape((1,))

# op _01bw_power_combination_eval
# LANG: _01bv --> _01bx
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02109__01bx = (v02108__01bv**1)
v02109__01bx = (v02109__01bx*_01bw_coeff).reshape((1,))

# op _01c1_power_combination_eval
# LANG: _01c0 --> _01c2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02147__01c2 = (v02146__01c0**1)
v02147__01c2 = (v02147__01c2*_01c1_coeff).reshape((1,))

# op _01fb_indexed_passthrough_eval
# LANG: _01fa, _01fg, _01fl --> F
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02199_F__temp[i_v02195__01fa__01fb_indexed_passthrough_eval] = v02195__01fa.flatten()
v02199_F = v02199_F__temp.copy()
v02199_F__temp[i_v02201__01fg__01fb_indexed_passthrough_eval] = v02201__01fg.flatten()
v02199_F = v02199_F__temp.copy()
v02199_F__temp[i_v02203__01fl__01fb_indexed_passthrough_eval] = v02203__01fl.flatten()
v02199_F = v02199_F__temp.copy()

# op _01fm_linear_combination_eval
# LANG: thrust_origin, reference_point --> _01fn
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02204__01fn = _01fm_constant+1*v02179_thrust_origin+-1*v02205_reference_point

# op _01nG_power_combination_eval
# LANG: _01lR, _local_thrust --> _01nH
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02402__01nH = (v02375__local_thrust**1)*(v02370__01lR**-1)
v02402__01nH = (v02402__01nH*_01nG_coeff).reshape((1, 40, 30))

# op _01nM_power_combination_eval
# LANG: _01nL --> _01nN
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02406__01nN = (v02405__01nL**2)
v02406__01nN = (v02406__01nN*_01nM_coeff).reshape((1, 40, 30))

# op _01nQ_power_combination_eval
# LANG: _rotor_radius --> _01nR
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02408__01nR = (v02251__rotor_radius**1)
v02408__01nR = (v02408__01nR*_01nQ_coeff).reshape((1, 40, 30))

# op _01oR_power_combination_eval
# LANG: _01oQ, _radius --> _local_torque_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02468__local_torque_2 = (v02467__01oQ**1)*(v02264__radius**1)
v02468__local_torque_2 = (v02468__local_torque_2*_01oR_coeff).reshape((1, 40, 30))

# op _01ot_power_combination_eval
# LANG: _01os, _dr --> _local_thrust_2
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02420__local_thrust_2 = (v02419__01os**1)*(v02252__dr**1)
v02420__local_thrust_2 = (v02420__local_thrust_2*_01ot_coeff).reshape((1, 40, 30))

# op _01pQ_power_combination_eval
# LANG: _01pF, _01pP --> _01pR
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02449__01pR = (v02448__01pF**1)*(v02451__01pP**1)
v02449__01pR = (v02449__01pR*_01pQ_coeff).reshape((1, 40, 30))

# op _01pu_power_combination_eval
# LANG: _01pj, _01pt --> _01pv
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02382__01pv = (v02381__01pj**1)*(v02384__01pt**1)
v02382__01pv = (v02382__01pv*_01pu_coeff).reshape((1, 40, 30))

# op _01qT_power_combination_eval
# LANG: _01qS, prandtl_loss_factor --> _01qU
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02484__01qU = (v02473__01qS**1)*(v02314_prandtl_loss_factor**1)
v02484__01qU = (v02484__01qU*_01qT_coeff).reshape((1, 40, 30))

# op _01qn_power_combination_eval
# LANG: _01qm, _dr --> _local_thrust_star
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02440__local_thrust_star = (v02439__01qm**1)*(v02252__dr**1)
v02440__local_thrust_star = (v02440__local_thrust_star*_01qn_coeff).reshape((1, 40, 30))

# op _01rK_power_combination_eval
# LANG: _01rz, _01rJ --> C_Q
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02507_C_Q = (v02502__01rz**1)*(v02512__01rJ**-1)
v02507_C_Q = (v02507_C_Q*_01rK_coeff).reshape((1,))

# op _01rY_power_combination_eval
# LANG: _01rX --> J
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02520_J = (v02519__01rX**1)
v02520_J = (v02520_J*_01rY_coeff).reshape((1,))

# op _01s5_power_combination_eval
# LANG: _01s4 --> _01s6
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02524__01s6 = (v02523__01s4**0.5)
v02524__01s6 = (v02524__01s6*_01s5_coeff).reshape((1,))

# op _01ue_indexed_passthrough_eval
# LANG: _01ud, _01uj, _01uo --> F
# SHAPES: (1, 1), (1, 1), (1, 1) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02572_F__temp[i_v02568__01ud__01ue_indexed_passthrough_eval] = v02568__01ud.flatten()
v02572_F = v02572_F__temp.copy()
v02572_F__temp[i_v02574__01uj__01ue_indexed_passthrough_eval] = v02574__01uj.flatten()
v02572_F = v02572_F__temp.copy()
v02572_F__temp[i_v02576__01uo__01ue_indexed_passthrough_eval] = v02576__01uo.flatten()
v02572_F = v02572_F__temp.copy()

# op _01up_linear_combination_eval
# LANG: thrust_origin, reference_point --> _01uq
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02577__01uq = _01up_constant+1*v02552_thrust_origin+-1*v02578_reference_point

# op _021A_power_combination_eval
# LANG: rel_obs_dist, _021z --> _021B
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03541__021B = (v03540__021z**1)*(v03537_rel_obs_dist**-1)
v03541__021B = (v03541__021B*_021A_coeff).reshape((1, 1, 2))

# op _021G_power_combination_eval
# LANG: rel_obs_dist, _021F --> _021H
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03545__021H = (v03544__021F**1)*(v03537_rel_obs_dist**-1)
v03545__021H = (v03545__021H*_021G_coeff).reshape((1, 1, 2))

# op _021Q arccos_eval
# LANG: _021P --> _021R
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03549__021R = np.arccos(v03548__021P)

# op _021S_linear_combination_eval
# LANG: rel_obs_z_pos --> _021T
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03551__021T = _021S_constant+1*v03529_rel_obs_z_pos

# op _021Y_power_combination_eval
# LANG: _021X --> _021Z
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03554__021Z = (v03553__021X**2)
v03554__021Z = (v03554__021Z*_021Y_coeff).reshape((1, 1, 2))

# op _02bP_power_combination_eval
# LANG: rel_obs_dist, _02bO --> _02bQ
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03854__02bQ = (v03853__02bO**1)*(v03846_rel_obs_dist**-1)
v03854__02bQ = (v03854__02bQ*_02bP_coeff).reshape((1, 1, 2))

# op _02bZ arccos_eval
# LANG: _02bY --> _02b_
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03858__02b_ = np.arccos(v03857__02bY)

# op _02c0_linear_combination_eval
# LANG: rel_obs_z_pos --> _02c1
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03860__02c1 = _02c0_constant+1*v03838_rel_obs_z_pos

# op _02c6_power_combination_eval
# LANG: _02c5 --> _02c7
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03863__02c7 = (v03862__02c5**2)
v03863__02c7 = (v03863__02c7*_02c6_coeff).reshape((1, 1, 2))

# op _02eH_single_tensor_sum_with_axis_eval
# LANG: _02eG --> _02eI
# SHAPES: (4, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03936__02eI = np.sum(v03935__02eG, axis = (0,)).reshape((1, 2))

# op _02f4_single_tensor_sum_with_axis_eval
# LANG: _02f3 --> _02f5
# SHAPES: (4, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03946__02f5 = np.sum(v03945__02f3, axis = (0,)).reshape((1, 2))

# op _0017_indexed_passthrough_eval
# LANG: _0016, _001l, _001x, _001J, _001V, _0026, _002i --> temp_density
# SHAPES: (1,), (1,), (1,), (1,), (1,), (1,), (1,) --> (7,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v049_temp_density__temp[i_v048__0016__0017_indexed_passthrough_eval] = v048__0016.flatten()
v049_temp_density = v049_temp_density__temp.copy()
v049_temp_density__temp[i_v051__001l__0017_indexed_passthrough_eval] = v051__001l.flatten()
v049_temp_density = v049_temp_density__temp.copy()
v049_temp_density__temp[i_v053__001x__0017_indexed_passthrough_eval] = v053__001x.flatten()
v049_temp_density = v049_temp_density__temp.copy()
v049_temp_density__temp[i_v055__001J__0017_indexed_passthrough_eval] = v055__001J.flatten()
v049_temp_density = v049_temp_density__temp.copy()
v049_temp_density__temp[i_v057__001V__0017_indexed_passthrough_eval] = v057__001V.flatten()
v049_temp_density = v049_temp_density__temp.copy()
v049_temp_density__temp[i_v059__0026__0017_indexed_passthrough_eval] = v059__0026.flatten()
v049_temp_density = v049_temp_density__temp.copy()
v049_temp_density__temp[i_v061__002i__0017_indexed_passthrough_eval] = v061__002i.flatten()
v049_temp_density = v049_temp_density__temp.copy()

# op _001c_indexed_passthrough_eval
# LANG: _001b, _001p, _001B, _001N, _001Z, _002a, _002m --> temp_pressure
# SHAPES: (1,), (1,), (1,), (1,), (1,), (1,), (1,) --> (7,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v064_temp_pressure__temp[i_v063__001b__001c_indexed_passthrough_eval] = v063__001b.flatten()
v064_temp_pressure = v064_temp_pressure__temp.copy()
v064_temp_pressure__temp[i_v066__001p__001c_indexed_passthrough_eval] = v066__001p.flatten()
v064_temp_pressure = v064_temp_pressure__temp.copy()
v064_temp_pressure__temp[i_v068__001B__001c_indexed_passthrough_eval] = v068__001B.flatten()
v064_temp_pressure = v064_temp_pressure__temp.copy()
v064_temp_pressure__temp[i_v070__001N__001c_indexed_passthrough_eval] = v070__001N.flatten()
v064_temp_pressure = v064_temp_pressure__temp.copy()
v064_temp_pressure__temp[i_v072__001Z__001c_indexed_passthrough_eval] = v072__001Z.flatten()
v064_temp_pressure = v064_temp_pressure__temp.copy()
v064_temp_pressure__temp[i_v074__002a__001c_indexed_passthrough_eval] = v074__002a.flatten()
v064_temp_pressure = v064_temp_pressure__temp.copy()
v064_temp_pressure__temp[i_v076__002m__001c_indexed_passthrough_eval] = v076__002m.flatten()
v064_temp_pressure = v064_temp_pressure__temp.copy()

# op _002D_power_combination_eval
# LANG: _002C --> _002E
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v098__002E = (v097__002C**1)
v098__002E = (v098__002E*_002D_coeff).reshape((1,))

# op _002F_linear_combination_eval
# LANG: hover_temperature --> _002G
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v0100__002G = _002F_constant+1*v092_hover_temperature

# op _002J_power_combination_eval
# LANG: hover_temperature --> _002K
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v0101__002K = (v092_hover_temperature**1)
v0101__002K = (v0101__002K*_002J_coeff).reshape((1,))

# op _002Y_power_combination_eval
# LANG: _002P --> p
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v036_p = (v030__002P**1)
v036_p = (v036_p*_002Y_coeff).reshape((1,))

# op _002__power_combination_eval
# LANG: _002P --> q
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v037_q = (v030__002P**1)
v037_q = (v037_q*_002__coeff).reshape((1,))

# op _0031_power_combination_eval
# LANG: _002P --> r
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v038_r = (v030__002P**1)
v038_r = (v038_r*_0031_coeff).reshape((1,))

# op _005r cross_product_eval
# LANG: F, _005q --> _005s
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0156__005s = np.cross(v0154__005q, v0149_F, axisa = 1, axisb = 1, axisc = 1)

# op _00BO_power_combination_eval
# LANG: _00BL, _00BN --> _00BP
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0983__00BP = (v0982__00BL**1)*(v0984__00BN**1)
v0983__00BP = (v0983__00BP*_00BO_coeff).reshape((1, 1, 2))

# op _00BU_power_combination_eval
# LANG: _00BT --> _00BV
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0988__00BV = (v0987__00BT**0.5)
v0988__00BV = (v0988__00BV*_00BU_coeff).reshape((1, 1, 2))

# op _00Bw_arcsin_eval
# LANG: _00Bv --> _00Bx
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0975__00Bx = np.arcsin(v0974__00Bv)

# op _00OC_power_combination_eval
# LANG: _00Oz, _00OB --> _00OD
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01375__00OD = (v01374__00Oz**1)*(v01376__00OB**1)
v01375__00OD = (v01375__00OD*_00OC_coeff).reshape((1, 1, 2))

# op _00OI_power_combination_eval
# LANG: _00OH --> _00OJ
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01380__00OJ = (v01379__00OH**0.5)
v01380__00OJ = (v01380__00OJ*_00OI_coeff).reshape((1, 1, 2))

# op _00Oq arccos_eval
# LANG: _00Op --> _00Or
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01371__00Or = np.arccos(v01370__00Op)

# op _00To_power_combination_eval
# LANG: _00Tn --> _00Tp
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01515__00Tp = (v01514__00Tn**1)
v01515__00Tp = (v01515__00Tp*_00To_coeff).reshape((1,))

# op _00Tq_linear_combination_eval
# LANG: temperature --> _00Tr
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01517__00Tr = _00Tq_constant+1*v01506_temperature

# op _00V6_arcsin_eval
# LANG: _00V5 --> _00V7
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01571__00V7 = np.arcsin(v01570__00V5)

# op _00Vo_power_combination_eval
# LANG: _00Vl, _00Vn --> _00Vp
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01579__00Vp = (v01578__00Vl**1)*(v01580__00Vn**1)
v01579__00Vp = (v01579__00Vp*_00Vo_coeff).reshape((1, 1, 2))

# op _00Vu_power_combination_eval
# LANG: _00Vt --> _00Vv
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01584__00Vv = (v01583__00Vt**0.5)
v01584__00Vv = (v01584__00Vv*_00Vu_coeff).reshape((1, 1, 2))

# op _00dR_power_combination_eval
# LANG: _00dK, _00dQ --> _00dS
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0353__00dS = (v0352__00dK**1)*(v0356__00dQ**-1)
v0353__00dS = (v0353__00dS*_00dR_coeff).reshape((1, 40, 30))

# op _00dV_power_combination_eval
# LANG: _00dU --> _00dW
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0359__00dW = (v0358__00dU**4)
v0359__00dW = (v0359__00dW*_00dV_coeff).reshape((1, 40, 30))

# op _00fV_power_combination_eval
# LANG: _00fU, _chord --> _00fW
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0405__00fW = (v0399__00fU**1)*(v0209__chord**1)
v0405__00fW = (v0405__00fW*_00fV_coeff).reshape((1, 40, 30))

# op _00fZ_single_tensor_sum_with_axis_eval
# LANG: _local_thrust_2 --> _00f_
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0371__00f_ = np.sum(v0370__local_thrust_2, axis = (1, 2)).reshape((1,))

# op _00fz_power_combination_eval
# LANG: _00fy, _chord --> _00fA
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0338__00fA = (v0332__00fy**1)*(v0209__chord**1)
v0338__00fA = (v0338__00fA*_00fz_coeff).reshape((1, 40, 30))

# op _00g2_single_tensor_sum_with_axis_eval
# LANG: _local_torque_2 --> _00g3
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0419__00g3 = np.sum(v0418__local_torque_2, axis = (1, 2)).reshape((1,))

# op _00gY_power_combination_eval
# LANG: _00gX, _dr --> _local_energy_loss
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0435__local_energy_loss = (v0434__00gX**1)*(v0202__dr**1)
v0435__local_energy_loss = (v0435__local_energy_loss*_00gY_coeff).reshape((1, 40, 30))

# op _00gs_single_tensor_sum_with_axis_eval
# LANG: _local_thrust_star --> _00gt
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0391__00gt = np.sum(v0390__local_thrust_star, axis = (1, 2)).reshape((1,))

# op _00hP_power_combination_eval
# LANG: C_Q --> C_P
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0463_C_P = (v0457_C_Q**1)
v0463_C_P = (v0463_C_P*_00hP_coeff).reshape((1,))

# op _00i2_power_combination_eval
# LANG: C_T, J --> _00i3
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0464__00i3 = (v0445_C_T**1)*(v0470_J**1)
v0464__00i3 = (v0464__00i3*_00i2_coeff).reshape((1,))

# op _00ia_power_combination_eval
# LANG: C_T, _00i9 --> _00ib
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0472__00ib = (v0445_C_T**1)*(v0474__00i9**1)
v0472__00ib = (v0472__00ib*_00ia_coeff).reshape((1,))

# op _00ku cross_product_eval
# LANG: F, _00kt --> _00kv
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0529__00kv = np.cross(v0527__00kt, v0522_F, axisa = 1, axisb = 1, axisc = 1)

# op _00sU_power_combination_eval
# LANG: _00sN, _00sT --> _00sV
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0726__00sV = (v0725__00sN**1)*(v0729__00sT**-1)
v0726__00sV = (v0726__00sV*_00sU_coeff).reshape((1, 40, 30))

# op _00sY_power_combination_eval
# LANG: _00sX --> _00sZ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0732__00sZ = (v0731__00sX**4)
v0732__00sZ = (v0732__00sZ*_00sY_coeff).reshape((1, 40, 30))

# op _00uC_power_combination_eval
# LANG: _00uB, _chord --> _00uD
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0711__00uD = (v0705__00uB**1)*(v0582__chord**1)
v0711__00uD = (v0711__00uD*_00uC_coeff).reshape((1, 40, 30))

# op _00uY_power_combination_eval
# LANG: _00uX, _chord --> _00uZ
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0778__00uZ = (v0772__00uX**1)*(v0582__chord**1)
v0778__00uZ = (v0778__00uZ*_00uY_coeff).reshape((1, 40, 30))

# op _00v1_single_tensor_sum_with_axis_eval
# LANG: _local_thrust_2 --> _00v2
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0744__00v2 = np.sum(v0743__local_thrust_2, axis = (1, 2)).reshape((1,))

# op _00v5_single_tensor_sum_with_axis_eval
# LANG: _local_torque_2 --> _00v6
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0792__00v6 = np.sum(v0791__local_torque_2, axis = (1, 2)).reshape((1,))

# op _00vv_single_tensor_sum_with_axis_eval
# LANG: _local_thrust_star --> _00vw
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0764__00vw = np.sum(v0763__local_thrust_star, axis = (1, 2)).reshape((1,))

# op _00w0_power_combination_eval
# LANG: _00v_, _dr --> _local_energy_loss
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0808__local_energy_loss = (v0807__00v_**1)*(v0575__dr**1)
v0808__local_energy_loss = (v0808__local_energy_loss*_00w0_coeff).reshape((1, 40, 30))

# op _00wS_power_combination_eval
# LANG: C_Q --> C_P
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0836_C_P = (v0830_C_Q**1)
v0836_C_P = (v0836_C_P*_00wS_coeff).reshape((1,))

# op _00x5_power_combination_eval
# LANG: C_T, J --> _00x6
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0837__00x6 = (v0818_C_T**1)*(v0843_J**1)
v0837__00x6 = (v0837__00x6*_00x5_coeff).reshape((1,))

# op _00xd_power_combination_eval
# LANG: C_T, _00xc --> _00xe
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0845__00xe = (v0818_C_T**1)*(v0847__00xc**1)
v0845__00xe = (v0845__00xe*_00xd_coeff).reshape((1,))

# op _00zO_power_combination_eval
# LANG: _00zN --> _00zP
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0919__00zP = (v0918__00zN**1)
v0919__00zP = (v0919__00zP*_00zO_coeff).reshape((1,))

# op _00zQ_linear_combination_eval
# LANG: temperature --> _00zR
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0921__00zR = _00zQ_constant+1*v0910_temperature

# op _0170 arccos_eval
# LANG: _016_ --> _0171
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01967__0171 = np.arccos(v01966__016_)

# op _017c_power_combination_eval
# LANG: _0179, _017b --> _017d
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01971__017d = (v01970__0179**1)*(v01972__017b**1)
v01971__017d = (v01971__017d*_017c_coeff).reshape((1, 1, 2))

# op _017i_power_combination_eval
# LANG: _017h --> _017j
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01976__017j = (v01975__017h**0.5)
v01976__017j = (v01976__017j*_017i_coeff).reshape((1, 1, 2))

# op _019T_log10_eval
# LANG: _019S --> _019U
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02049__019U = np.log10(v02048__019S)

# op _01CR_power_combination_eval
# LANG: _01CK, _01CQ --> _01CS
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02776__01CS = (v02775__01CK**1)*(v02779__01CQ**-1)
v02776__01CS = (v02776__01CS*_01CR_coeff).reshape((1, 40, 30))

# op _01CV_power_combination_eval
# LANG: _01CU --> _01CW
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02782__01CW = (v02781__01CU**4)
v02782__01CW = (v02782__01CW*_01CV_coeff).reshape((1, 40, 30))

# op _01EV_power_combination_eval
# LANG: _01EU, _chord --> _01EW
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02828__01EW = (v02822__01EU**1)*(v02632__chord**1)
v02828__01EW = (v02828__01EW*_01EV_coeff).reshape((1, 40, 30))

# op _01EZ_single_tensor_sum_with_axis_eval
# LANG: _local_thrust_2 --> _01E_
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02794__01E_ = np.sum(v02793__local_thrust_2, axis = (1, 2)).reshape((1,))

# op _01Ez_power_combination_eval
# LANG: _01Ey, _chord --> _01EA
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02761__01EA = (v02755__01Ey**1)*(v02632__chord**1)
v02761__01EA = (v02761__01EA*_01Ez_coeff).reshape((1, 40, 30))

# op _01F2_single_tensor_sum_with_axis_eval
# LANG: _local_torque_2 --> _01F3
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02842__01F3 = np.sum(v02841__local_torque_2, axis = (1, 2)).reshape((1,))

# op _01FY_power_combination_eval
# LANG: _01FX, _dr --> _local_energy_loss
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02858__local_energy_loss = (v02857__01FX**1)*(v02625__dr**1)
v02858__local_energy_loss = (v02858__local_energy_loss*_01FY_coeff).reshape((1, 40, 30))

# op _01Fs_single_tensor_sum_with_axis_eval
# LANG: _local_thrust_star --> _01Ft
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02814__01Ft = np.sum(v02813__local_thrust_star, axis = (1, 2)).reshape((1,))

# op _01GP_power_combination_eval
# LANG: C_Q --> C_P
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02886_C_P = (v02880_C_Q**1)
v02886_C_P = (v02886_C_P*_01GP_coeff).reshape((1,))

# op _01H2_power_combination_eval
# LANG: C_T, J --> _01H3
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02887__01H3 = (v02868_C_T**1)*(v02893_J**1)
v02887__01H3 = (v02887__01H3*_01H2_coeff).reshape((1,))

# op _01Ha_power_combination_eval
# LANG: C_T, _01H9 --> _01Hb
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02895__01Hb = (v02868_C_T**1)*(v02897__01H9**1)
v02895__01Hb = (v02895__01Hb*_01Ha_coeff).reshape((1,))

# op _01In_power_combination_eval
# LANG: _01Im --> _01Io
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02925__01Io = (v02923__01Im**0.5)
v02925__01Io = (v02925__01Io*_01In_coeff).reshape((1,))

# op _01JI_power_combination_eval
# LANG: pressure --> _01JJ
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02967__01JJ = (v02966_pressure**1)
v02967__01JJ = (v02967__01JJ*_01JI_coeff).reshape((1,))

# op _01JS_power_combination_eval
# LANG: _01JR --> _01JT
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02972__01JT = (v02971__01JR**1)
v02972__01JT = (v02972__01JT*_01JS_coeff).reshape((1,))

# op _01JU_linear_combination_eval
# LANG: temperature --> _01JV
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02974__01JV = _01JU_constant+1*v02963_temperature

# op _01LA_arcsin_eval
# LANG: _01Lz --> _01LB
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03028__01LB = np.arcsin(v03027__01Lz)

# op _01LG arccos_eval
# LANG: _01LF --> _01LH
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03032__01LH = np.arccos(v03031__01LF)

# op _01LS_power_combination_eval
# LANG: _01LP, _01LR --> _01LT
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03036__01LT = (v03035__01LP**1)*(v03037__01LR**1)
v03036__01LT = (v03036__01LT*_01LS_coeff).reshape((1, 1, 2))

# op _01LY_power_combination_eval
# LANG: _01LX --> _01LZ
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03041__01LZ = (v03040__01LX**0.5)
v03041__01LZ = (v03041__01LZ*_01LY_coeff).reshape((1, 1, 2))

# op _01VP arccos_eval
# LANG: _01VO --> _01VQ
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03341__01VQ = np.arccos(v03340__01VO)

# op _01W0_power_combination_eval
# LANG: _01VY, _01V_ --> _01W1
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03345__01W1 = (v03344__01VY**1)*(v03346__01V_**1)
v03345__01W1 = (v03345__01W1*_01W0_coeff).reshape((1, 1, 2))

# op _01W6_power_combination_eval
# LANG: _01W5 --> _01W7
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03350__01W7 = (v03349__01W5**0.5)
v03350__01W7 = (v03350__01W7*_01W6_coeff).reshape((1, 1, 2))

# op _01Zp_power_combination_eval
# LANG: _01Zo --> _01Zq
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03441__01Zq = (v03439__01Zo**0.5)
v03441__01Zq = (v03441__01Zq*_01Zp_coeff).reshape((1,))

# op _01_K_power_combination_eval
# LANG: pressure --> _01_L
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03481__01_L = (v03480_pressure**1)
v03481__01_L = (v03481__01_L*_01_K_coeff).reshape((1,))

# op _01_U_power_combination_eval
# LANG: _01_T --> _01_V
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03486__01_V = (v03485__01_T**1)
v03486__01_V = (v03486__01_V*_01_U_coeff).reshape((1,))

# op _01_W_linear_combination_eval
# LANG: temperature --> _01_X
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03488__01_X = _01_W_constant+1*v03477_temperature

# op _01aD_indexed_passthrough_eval
# LANG: _01aC, _01aQ, _01b1, _01bd, _01bp, _01bB, _01bN --> temp_pressure
# SHAPES: (1,), (1,), (1,), (1,), (1,), (1,), (1,) --> (7,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02114_temp_pressure__temp[i_v02113__01aC__01aD_indexed_passthrough_eval] = v02113__01aC.flatten()
v02114_temp_pressure = v02114_temp_pressure__temp.copy()
v02114_temp_pressure__temp[i_v02116__01aQ__01aD_indexed_passthrough_eval] = v02116__01aQ.flatten()
v02114_temp_pressure = v02114_temp_pressure__temp.copy()
v02114_temp_pressure__temp[i_v02118__01b1__01aD_indexed_passthrough_eval] = v02118__01b1.flatten()
v02114_temp_pressure = v02114_temp_pressure__temp.copy()
v02114_temp_pressure__temp[i_v02120__01bd__01aD_indexed_passthrough_eval] = v02120__01bd.flatten()
v02114_temp_pressure = v02114_temp_pressure__temp.copy()
v02114_temp_pressure__temp[i_v02122__01bp__01aD_indexed_passthrough_eval] = v02122__01bp.flatten()
v02114_temp_pressure = v02114_temp_pressure__temp.copy()
v02114_temp_pressure__temp[i_v02124__01bB__01aD_indexed_passthrough_eval] = v02124__01bB.flatten()
v02114_temp_pressure = v02114_temp_pressure__temp.copy()
v02114_temp_pressure__temp[i_v02126__01bN__01aD_indexed_passthrough_eval] = v02126__01bN.flatten()
v02114_temp_pressure = v02114_temp_pressure__temp.copy()

# op _01ag_log10_eval
# LANG: _01af --> _01ah
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02059__01ah = np.log10(v02058__01af)

# op _01ay_indexed_passthrough_eval
# LANG: _01ax, _01aM, _01aY, _01b9, _01bl, _01bx, _01bJ --> temp_density
# SHAPES: (1,), (1,), (1,), (1,), (1,), (1,), (1,) --> (7,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02099_temp_density__temp[i_v02098__01ax__01ay_indexed_passthrough_eval] = v02098__01ax.flatten()
v02099_temp_density = v02099_temp_density__temp.copy()
v02099_temp_density__temp[i_v02101__01aM__01ay_indexed_passthrough_eval] = v02101__01aM.flatten()
v02099_temp_density = v02099_temp_density__temp.copy()
v02099_temp_density__temp[i_v02103__01aY__01ay_indexed_passthrough_eval] = v02103__01aY.flatten()
v02099_temp_density = v02099_temp_density__temp.copy()
v02099_temp_density__temp[i_v02105__01b9__01ay_indexed_passthrough_eval] = v02105__01b9.flatten()
v02099_temp_density = v02099_temp_density__temp.copy()
v02099_temp_density__temp[i_v02107__01bl__01ay_indexed_passthrough_eval] = v02107__01bl.flatten()
v02099_temp_density = v02099_temp_density__temp.copy()
v02099_temp_density__temp[i_v02109__01bx__01ay_indexed_passthrough_eval] = v02109__01bx.flatten()
v02099_temp_density = v02099_temp_density__temp.copy()
v02099_temp_density__temp[i_v02111__01bJ__01ay_indexed_passthrough_eval] = v02111__01bJ.flatten()
v02099_temp_density = v02099_temp_density__temp.copy()

# op _01c3_power_combination_eval
# LANG: _01c2 --> _01c4
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02148__01c4 = (v02147__01c2**1)
v02148__01c4 = (v02148__01c4*_01c3_coeff).reshape((1,))

# op _01c5_linear_combination_eval
# LANG: cruise_temperature --> _01c6
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02150__01c6 = _01c5_constant+1*v02142_cruise_temperature

# op _01cT_power_combination_eval
# LANG: u --> p
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02085_p = (v02074_u**1)
v02085_p = (v02085_p*_01cT_coeff).reshape((1,))

# op _01cV_power_combination_eval
# LANG: u --> q
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02086_q = (v02074_u**1)
v02086_q = (v02086_q*_01cV_coeff).reshape((1,))

# op _01cX_power_combination_eval
# LANG: u --> r
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02087_r = (v02074_u**1)
v02087_r = (v02087_r*_01cX_coeff).reshape((1,))

# op _01cn_power_combination_eval
# LANG: _01cm --> _01co
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02088__01co = (v02069__01cm**1)
v02088__01co = (v02088__01co*_01cn_coeff).reshape((1,))

# op _01fo cross_product_eval
# LANG: F, _01fn --> _01fp
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02206__01fp = np.cross(v02204__01fn, v02199_F, axisa = 1, axisb = 1, axisc = 1)

# op _01nO_power_combination_eval
# LANG: _01nH, _01nN --> _01nP
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02403__01nP = (v02402__01nH**1)*(v02406__01nN**-1)
v02403__01nP = (v02403__01nP*_01nO_coeff).reshape((1, 40, 30))

# op _01nS_power_combination_eval
# LANG: _01nR --> _01nT
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02409__01nT = (v02408__01nR**4)
v02409__01nT = (v02409__01nT*_01nS_coeff).reshape((1, 40, 30))

# op _01pS_power_combination_eval
# LANG: _01pR, _chord --> _01pT
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02455__01pT = (v02449__01pR**1)*(v02259__chord**1)
v02455__01pT = (v02455__01pT*_01pS_coeff).reshape((1, 40, 30))

# op _01pW_single_tensor_sum_with_axis_eval
# LANG: _local_thrust_2 --> _01pX
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02421__01pX = np.sum(v02420__local_thrust_2, axis = (1, 2)).reshape((1,))

# op _01p__single_tensor_sum_with_axis_eval
# LANG: _local_torque_2 --> _01q0
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02469__01q0 = np.sum(v02468__local_torque_2, axis = (1, 2)).reshape((1,))

# op _01pw_power_combination_eval
# LANG: _01pv, _chord --> _01px
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02388__01px = (v02382__01pv**1)*(v02259__chord**1)
v02388__01px = (v02388__01px*_01pw_coeff).reshape((1, 40, 30))

# op _01qV_power_combination_eval
# LANG: _01qU, _dr --> _local_energy_loss
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02485__local_energy_loss = (v02484__01qU**1)*(v02252__dr**1)
v02485__local_energy_loss = (v02485__local_energy_loss*_01qV_coeff).reshape((1, 40, 30))

# op _01qp_single_tensor_sum_with_axis_eval
# LANG: _local_thrust_star --> _01qq
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02441__01qq = np.sum(v02440__local_thrust_star, axis = (1, 2)).reshape((1,))

# op _01rM_power_combination_eval
# LANG: C_Q --> C_P
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02513_C_P = (v02507_C_Q**1)
v02513_C_P = (v02513_C_P*_01rM_coeff).reshape((1,))

# op _01r__power_combination_eval
# LANG: C_T, J --> _01s0
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02514__01s0 = (v02495_C_T**1)*(v02520_J**1)
v02514__01s0 = (v02514__01s0*_01r__coeff).reshape((1,))

# op _01s7_power_combination_eval
# LANG: C_T, _01s6 --> _01s8
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02522__01s8 = (v02495_C_T**1)*(v02524__01s6**1)
v02522__01s8 = (v02522__01s8*_01s7_coeff).reshape((1,))

# op _01ur cross_product_eval
# LANG: F, _01uq --> _01us
# SHAPES: (1, 3), (1, 3) --> (1, 3)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02579__01us = np.cross(v02577__01uq, v02572_F, axisa = 1, axisb = 1, axisc = 1)

# op _021C_arcsin_eval
# LANG: _021B --> _021D
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03542__021D = np.arcsin(v03541__021B)

# op _021I arccos_eval
# LANG: _021H --> _021J
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03546__021J = np.arccos(v03545__021H)

# op _021U_power_combination_eval
# LANG: _021R, _021T --> _021V
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03550__021V = (v03549__021R**1)*(v03551__021T**1)
v03550__021V = (v03550__021V*_021U_coeff).reshape((1, 1, 2))

# op _021__power_combination_eval
# LANG: _021Z --> _0220
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03555__0220 = (v03554__021Z**0.5)
v03555__0220 = (v03555__0220*_021__coeff).reshape((1, 1, 2))

# op _02bR arccos_eval
# LANG: _02bQ --> _02bS
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03855__02bS = np.arccos(v03854__02bQ)

# op _02c2_power_combination_eval
# LANG: _02b_, _02c1 --> _02c3
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03859__02c3 = (v03858__02b_**1)*(v03860__02c1**1)
v03859__02c3 = (v03859__02c3*_02c2_coeff).reshape((1, 1, 2))

# op _02c8_power_combination_eval
# LANG: _02c7 --> _02c9
# SHAPES: (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03864__02c9 = (v03863__02c7**0.5)
v03864__02c9 = (v03864__02c9*_02c8_coeff).reshape((1, 1, 2))

# op _02eJ_log10_eval
# LANG: _02eI --> _02eK
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03937__02eK = np.log10(v03936__02eI)

# op _02f6_log10_eval
# LANG: _02f5 --> _02f7
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03947__02f7 = np.log10(v03946__02f5)

# op _0001_power_combination_eval
# LANG: caddee_test_input --> caddee_test_output
# SHAPES: (1,) --> (1,)
# full namespace: 
v02_caddee_test_output = (v01_caddee_test_input**1)
v02_caddee_test_output = (v02_caddee_test_output*_0001_coeff).reshape((1,))

# op _000Y_power_combination_eval
# LANG: hover_hover_time --> hover_time
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v029_hover_time = (v027_hover_hover_time**1)
v029_hover_time = (v029_hover_time*_000Y_coeff).reshape((1,))

# op _000d_power_combination_eval
# LANG: design_geometry --> design_geometry_0
# SHAPES: (32500, 3) --> (32500, 3)
# full namespace: system_representation.outputs_model.design_outputs_model
v06_design_geometry_0 = (v05_design_geometry**1)
v06_design_geometry_0 = (v06_design_geometry_0*_000d_coeff).reshape((32500, 3))

# op _002H_power_combination_eval
# LANG: _002E, _002G --> hover_dynamic_viscosity
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v099_hover_dynamic_viscosity = (v098__002E**1)*(v0100__002G**-1)
v099_hover_dynamic_viscosity = (v099_hover_dynamic_viscosity*_002H_coeff).reshape((1,))

# op _002L_power_combination_eval
# LANG: _002K --> hover_speed_of_sound
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v0102_hover_speed_of_sound = (v0101__002K**0.5)
v0102_hover_speed_of_sound = (v0102_hover_speed_of_sound*_002L_coeff).reshape((1,))

# op _002r single_tensor_sum_no_axis_eval
# LANG: temp_density --> hover_density
# SHAPES: (7,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v094_hover_density = np.sum(v049_temp_density).reshape((1,))

# op _002t single_tensor_sum_no_axis_eval
# LANG: temp_pressure --> hover_pressure
# SHAPES: (7,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation.atmosphere_model
v093_hover_pressure = np.sum(v064_temp_pressure).reshape((1,))

# op _0033_power_combination_eval
# LANG: _002P --> phi
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v039_phi = (v030__002P**1)
v039_phi = (v039_phi*_0033_coeff).reshape((1,))

# op _0035_power_combination_eval
# LANG: _002P --> gamma
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v040_gamma = (v030__002P**1)
v040_gamma = (v040_gamma*_0035_coeff).reshape((1,))

# op _0037_power_combination_eval
# LANG: _002P --> psi
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v041_psi = (v030__002P**1)
v041_psi = (v041_psi*_0037_coeff).reshape((1,))

# op _003b_power_combination_eval
# LANG: _002P --> x
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v043_x = (v030__002P**1)
v043_x = (v043_x*_003b_coeff).reshape((1,))

# op _003d_power_combination_eval
# LANG: _002Q --> y
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v044_y = (v031__002Q**1)
v044_y = (v044_y*_003d_coeff).reshape((1,))

# op _003f_power_combination_eval
# LANG: _002R --> z
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.hover_ac_states_operation
v045_z = (v032__002R**1)
v045_z = (v045_z*_003f_coeff).reshape((1,))

# op _005F_power_combination_eval
# LANG: p --> p1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v036_p = v036_p.reshape((1, 1))
v0168_p1 = (v036_p**1)
v0168_p1 = (v0168_p1*_005F_coeff).reshape((1, 1))
v036_p = v036_p.reshape((1,))

# op _005I_power_combination_eval
# LANG: q --> q1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v037_q = v037_q.reshape((1, 1))
v0169_q1 = (v037_q**1)
v0169_q1 = (v0169_q1*_005I_coeff).reshape((1, 1))
v037_q = v037_q.reshape((1,))

# op _005L_power_combination_eval
# LANG: r --> r1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.BEM_external_inputs_model
v038_r = v038_r.reshape((1, 1))
v0170_r1 = (v038_r**1)
v0170_r1 = (v0170_r1*_005L_coeff).reshape((1, 1))
v038_r = v038_r.reshape((1,))

# op _005t_transpose_eval
# LANG: _005s --> M
# SHAPES: (1, 3) --> (3, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model
v0157_M = np.transpose(v0156__005s)

# op _00BE reshape_eval
# LANG: _00Bx --> rel_angle_plane
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0976_rel_angle_plane = v0975__00Bx.reshape((1, 2))

# op _00BW_power_combination_eval
# LANG: _00BP, _00BV --> rel_obs_angle
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.steady_observer_location_model
v0985_rel_obs_angle = (v0983__00BP**1)*(v0988__00BV**-1)
v0985_rel_obs_angle = (v0985_rel_obs_angle*_00BW_coeff).reshape((1, 1, 2))

# op _00OK_power_combination_eval
# LANG: _00OD, _00OJ --> rel_obs_angle
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01377_rel_obs_angle = (v01375__00OD**1)*(v01380__00OJ**-1)
v01377_rel_obs_angle = (v01377_rel_obs_angle*_00OK_coeff).reshape((1, 1, 2))

# op _00Ou reshape_eval
# LANG: _00Or --> rel_angle_normal
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v01372_rel_angle_normal = v01371__00Or.reshape((1, 2))

# op _00Ts_power_combination_eval
# LANG: _00Tp, _00Tr --> dynamic_viscosity
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.atmosphere_model
v01516_dynamic_viscosity = (v01515__00Tp**1)*(v01517__00Tr**-1)
v01516_dynamic_viscosity = (v01516_dynamic_viscosity*_00Ts_coeff).reshape((1,))

# op _00Ve reshape_eval
# LANG: _00V7 --> rel_angle_plane
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01572_rel_angle_plane = v01571__00V7.reshape((1, 2))

# op _00Vw_power_combination_eval
# LANG: _00Vp, _00Vv --> rel_obs_angle
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_KS_tonal_model.steady_observer_location_model
v01581_rel_obs_angle = (v01579__00Vp**1)*(v01584__00Vv**-1)
v01581_rel_obs_angle = (v01581_rel_obs_angle*_00Vw_coeff).reshape((1, 1, 2))

# op _00dX_power_combination_eval
# LANG: _00dS, _00dW --> dC_T
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0357_dC_T = (v0353__00dS**1)*(v0359__00dW**-1)
v0357_dC_T = (v0357_dC_T*_00dX_coeff).reshape((1, 40, 30))

# op _00fB_power_combination_eval
# LANG: _00fA, _dr --> _local_thrust_induced
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0339__local_thrust_induced = (v0338__00fA**1)*(v0202__dr**1)
v0339__local_thrust_induced = (v0339__local_thrust_induced*_00fB_coeff).reshape((1, 40, 30))

# op _00fX_power_combination_eval
# LANG: _00fW, _dr --> _local_torque_induced
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0406__local_torque_induced = (v0405__00fW**1)*(v0202__dr**1)
v0406__local_torque_induced = (v0406__local_torque_induced*_00fX_coeff).reshape((1, 40, 30))

# op _00g0_power_combination_eval
# LANG: _00f_ --> total_thrust_2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0372_total_thrust_2 = (v0371__00f_**1)
v0372_total_thrust_2 = (v0372_total_thrust_2*_00g0_coeff).reshape((1,))

# op _00g4_power_combination_eval
# LANG: _00g3 --> total_torque_2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0420_total_torque_2 = (v0419__00g3**1)
v0420_total_torque_2 = (v0420_total_torque_2*_00g4_coeff).reshape((1,))

# op _00g__single_tensor_sum_with_axis_eval
# LANG: _local_energy_loss --> total_energy_loss
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0436_total_energy_loss = np.sum(v0435__local_energy_loss, axis = (1, 2)).reshape((1,))

# op _00gu_power_combination_eval
# LANG: _00gt --> total_thrust_star
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0392_total_thrust_star = (v0391__00gt**1)
v0392_total_thrust_star = (v0392_total_thrust_star*_00gu_coeff).reshape((1,))

# op _00i4_power_combination_eval
# LANG: C_P, _00i3 --> eta
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0471_eta = (v0464__00i3**1)*(v0463_C_P**-1)
v0471_eta = (v0471_eta*_00i4_coeff).reshape((1,))

# op _00ic_power_combination_eval
# LANG: C_P, _00ib --> FOM
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0475_FOM = (v0472__00ib**1)*(v0463_C_P**-1)
v0475_FOM = (v0475_FOM*_00ic_coeff).reshape((1,))

# op _00ig_power_combination_eval
# LANG: total_torque --> Q
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0351_Q = (v0350_total_torque**1)
v0351_Q = (v0351_Q*_00ig_coeff).reshape((1,))

# op _00ii_power_combination_eval
# LANG: _local_torque --> _dQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_bem_model.induced_velocity_model
v0393__dQ = (v0348__local_torque**1)
v0393__dQ = (v0393__dQ*_00ii_coeff).reshape((1, 40, 30))

# op _00kI_power_combination_eval
# LANG: p --> p1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v036_p = v036_p.reshape((1, 1))
v0541_p1 = (v036_p**1)
v0541_p1 = (v0541_p1*_00kI_coeff).reshape((1, 1))
v036_p = v036_p.reshape((1,))

# op _00kL_power_combination_eval
# LANG: q --> q1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v037_q = v037_q.reshape((1, 1))
v0542_q1 = (v037_q**1)
v0542_q1 = (v0542_q1*_00kL_coeff).reshape((1, 1))
v037_q = v037_q.reshape((1,))

# op _00kO_power_combination_eval
# LANG: r --> r1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.BEM_external_inputs_model
v038_r = v038_r.reshape((1, 1))
v0543_r1 = (v038_r**1)
v0543_r1 = (v0543_r1*_00kO_coeff).reshape((1, 1))
v038_r = v038_r.reshape((1,))

# op _00kw_transpose_eval
# LANG: _00kv --> M
# SHAPES: (1, 3) --> (3, 1)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model
v0530_M = np.transpose(v0529__00kv)

# op _00s__power_combination_eval
# LANG: _00sV, _00sZ --> dC_T
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0730_dC_T = (v0726__00sV**1)*(v0732__00sZ**-1)
v0730_dC_T = (v0730_dC_T*_00s__coeff).reshape((1, 40, 30))

# op _00uE_power_combination_eval
# LANG: _00uD, _dr --> _local_thrust_induced
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0712__local_thrust_induced = (v0711__00uD**1)*(v0575__dr**1)
v0712__local_thrust_induced = (v0712__local_thrust_induced*_00uE_coeff).reshape((1, 40, 30))

# op _00u__power_combination_eval
# LANG: _00uZ, _dr --> _local_torque_induced
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0779__local_torque_induced = (v0778__00uZ**1)*(v0575__dr**1)
v0779__local_torque_induced = (v0779__local_torque_induced*_00u__coeff).reshape((1, 40, 30))

# op _00v3_power_combination_eval
# LANG: _00v2 --> total_thrust_2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0745_total_thrust_2 = (v0744__00v2**1)
v0745_total_thrust_2 = (v0745_total_thrust_2*_00v3_coeff).reshape((1,))

# op _00v7_power_combination_eval
# LANG: _00v6 --> total_torque_2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0793_total_torque_2 = (v0792__00v6**1)
v0793_total_torque_2 = (v0793_total_torque_2*_00v7_coeff).reshape((1,))

# op _00vx_power_combination_eval
# LANG: _00vw --> total_thrust_star
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0765_total_thrust_star = (v0764__00vw**1)
v0765_total_thrust_star = (v0765_total_thrust_star*_00vx_coeff).reshape((1,))

# op _00w2_single_tensor_sum_with_axis_eval
# LANG: _local_energy_loss --> total_energy_loss
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0809_total_energy_loss = np.sum(v0808__local_energy_loss, axis = (1, 2)).reshape((1,))

# op _00x7_power_combination_eval
# LANG: C_P, _00x6 --> eta
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0844_eta = (v0837__00x6**1)*(v0836_C_P**-1)
v0844_eta = (v0844_eta*_00x7_coeff).reshape((1,))

# op _00xf_power_combination_eval
# LANG: C_P, _00xe --> FOM
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0848_FOM = (v0845__00xe**1)*(v0836_C_P**-1)
v0848_FOM = (v0848_FOM*_00xf_coeff).reshape((1,))

# op _00xj_power_combination_eval
# LANG: total_torque --> Q
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0724_Q = (v0723_total_torque**1)
v0724_Q = (v0724_Q*_00xj_coeff).reshape((1,))

# op _00xl_power_combination_eval
# LANG: _local_torque --> _dQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_bem_model.induced_velocity_model
v0766__dQ = (v0721__local_torque**1)
v0766__dQ = (v0766__dQ*_00xl_coeff).reshape((1, 40, 30))

# op _00zS_power_combination_eval
# LANG: _00zP, _00zR --> dynamic_viscosity
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_1_disk_KS_tonal_model.atmosphere_model
v0920_dynamic_viscosity = (v0919__00zP**1)*(v0921__00zR**-1)
v0920_dynamic_viscosity = (v0920_dynamic_viscosity*_00zS_coeff).reshape((1,))

# op _0174 reshape_eval
# LANG: _0171 --> rel_angle_normal
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01968_rel_angle_normal = v01967__0171.reshape((1, 2))

# op _017k_power_combination_eval
# LANG: _017d, _017j --> rel_obs_angle
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v01973_rel_obs_angle = (v01971__017d**1)*(v01976__017j**-1)
v01973_rel_obs_angle = (v01973_rel_obs_angle*_017k_coeff).reshape((1, 1, 2))

# op _019V_power_combination_eval
# LANG: _019U --> total_spl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02050_total_spl = (v02049__019U**1)
v02050_total_spl = (v02050_total_spl*_019V_coeff).reshape((1, 2))

# op _01CX_power_combination_eval
# LANG: _01CS, _01CW --> dC_T
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02780_dC_T = (v02776__01CS**1)*(v02782__01CW**-1)
v02780_dC_T = (v02780_dC_T*_01CX_coeff).reshape((1, 40, 30))

# op _01EB_power_combination_eval
# LANG: _01EA, _dr --> _local_thrust_induced
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02762__local_thrust_induced = (v02761__01EA**1)*(v02625__dr**1)
v02762__local_thrust_induced = (v02762__local_thrust_induced*_01EB_coeff).reshape((1, 40, 30))

# op _01EX_power_combination_eval
# LANG: _01EW, _dr --> _local_torque_induced
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02829__local_torque_induced = (v02828__01EW**1)*(v02625__dr**1)
v02829__local_torque_induced = (v02829__local_torque_induced*_01EX_coeff).reshape((1, 40, 30))

# op _01F0_power_combination_eval
# LANG: _01E_ --> total_thrust_2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02795_total_thrust_2 = (v02794__01E_**1)
v02795_total_thrust_2 = (v02795_total_thrust_2*_01F0_coeff).reshape((1,))

# op _01F4_power_combination_eval
# LANG: _01F3 --> total_torque_2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02843_total_torque_2 = (v02842__01F3**1)
v02843_total_torque_2 = (v02843_total_torque_2*_01F4_coeff).reshape((1,))

# op _01F__single_tensor_sum_with_axis_eval
# LANG: _local_energy_loss --> total_energy_loss
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02859_total_energy_loss = np.sum(v02858__local_energy_loss, axis = (1, 2)).reshape((1,))

# op _01Fu_power_combination_eval
# LANG: _01Ft --> total_thrust_star
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02815_total_thrust_star = (v02814__01Ft**1)
v02815_total_thrust_star = (v02815_total_thrust_star*_01Fu_coeff).reshape((1,))

# op _01H4_power_combination_eval
# LANG: C_P, _01H3 --> eta
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02894_eta = (v02887__01H3**1)*(v02886_C_P**-1)
v02894_eta = (v02894_eta*_01H4_coeff).reshape((1,))

# op _01Hc_power_combination_eval
# LANG: C_P, _01Hb --> FOM
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02898_FOM = (v02895__01Hb**1)*(v02886_C_P**-1)
v02898_FOM = (v02898_FOM*_01Hc_coeff).reshape((1,))

# op _01Hg_power_combination_eval
# LANG: total_torque --> Q
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02774_Q = (v02773_total_torque**1)
v02774_Q = (v02774_Q*_01Hg_coeff).reshape((1,))

# op _01Hi_power_combination_eval
# LANG: _local_torque --> _dQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.induced_velocity_model
v02816__dQ = (v02771__local_torque**1)
v02816__dQ = (v02816__dQ*_01Hi_coeff).reshape((1, 40, 30))

# op _01Ip_power_combination_eval
# LANG: _01Io, speed_of_sound --> mach_number
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model
v02926_mach_number = (v02925__01Io**1)*(v02976_speed_of_sound**-1)
v02926_mach_number = (v02926_mach_number*_01Ip_coeff).reshape((1,))

# op _01JK_power_combination_eval
# LANG: temperature, _01JJ --> density
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02968_density = (v02967__01JJ**1)*(v02963_temperature**-1)
v02968_density = (v02968_density*_01JK_coeff).reshape((1,))

# op _01JW_power_combination_eval
# LANG: _01JT, _01JV --> dynamic_viscosity
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.atmosphere_model
v02973_dynamic_viscosity = (v02972__01JT**1)*(v02974__01JV**-1)
v02973_dynamic_viscosity = (v02973_dynamic_viscosity*_01JW_coeff).reshape((1,))

# op _01LI reshape_eval
# LANG: _01LB --> rel_angle_plane
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03029_rel_angle_plane = v03028__01LB.reshape((1, 2))

# op _01LK reshape_eval
# LANG: _01LH --> rel_angle_normal
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03033_rel_angle_normal = v03032__01LH.reshape((1, 2))

# op _01L__power_combination_eval
# LANG: _01LT, _01LZ --> rel_obs_angle
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_Lowson_tonal_model.observer_location_model
v03038_rel_obs_angle = (v03036__01LT**1)*(v03041__01LZ**-1)
v03038_rel_obs_angle = (v03038_rel_obs_angle*_01L__coeff).reshape((1, 1, 2))

# op _01VT reshape_eval
# LANG: _01VQ --> rel_angle_normal
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03342_rel_angle_normal = v03341__01VQ.reshape((1, 2))

# op _01W8_power_combination_eval
# LANG: _01W1, _01W7 --> rel_obs_angle
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_GL_broadband_model.steady_observer_location_model
v03347_rel_obs_angle = (v03345__01W1**1)*(v03350__01W7**-1)
v03347_rel_obs_angle = (v03347_rel_obs_angle*_01W8_coeff).reshape((1, 1, 2))

# op _01Zr_power_combination_eval
# LANG: _01Zq, speed_of_sound --> mach_number
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model
v03442_mach_number = (v03441__01Zq**1)*(v03490_speed_of_sound**-1)
v03442_mach_number = (v03442_mach_number*_01Zr_coeff).reshape((1,))

# op _01_M_power_combination_eval
# LANG: temperature, _01_L --> density
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03482_density = (v03481__01_L**1)*(v03477_temperature**-1)
v03482_density = (v03482_density*_01_M_coeff).reshape((1,))

# op _01_Y_power_combination_eval
# LANG: _01_V, _01_X --> dynamic_viscosity
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.atmosphere_model
v03487_dynamic_viscosity = (v03486__01_V**1)*(v03488__01_X**-1)
v03487_dynamic_viscosity = (v03487_dynamic_viscosity*_01_Y_coeff).reshape((1,))

# op _01ai_power_combination_eval
# LANG: _01ah --> A_weighted_total_spl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.hover.hover.total_noise_model
v02060_A_weighted_total_spl = (v02059__01ah**1)
v02060_A_weighted_total_spl = (v02060_A_weighted_total_spl*_01ai_coeff).reshape((1, 2))

# op _01bS single_tensor_sum_no_axis_eval
# LANG: temp_density --> cruise_density
# SHAPES: (7,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02144_cruise_density = np.sum(v02099_temp_density).reshape((1,))

# op _01bU single_tensor_sum_no_axis_eval
# LANG: temp_pressure --> cruise_pressure
# SHAPES: (7,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02143_cruise_pressure = np.sum(v02114_temp_pressure).reshape((1,))

# op _01c7_power_combination_eval
# LANG: _01c4, _01c6 --> cruise_dynamic_viscosity
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation.atmosphere_model
v02149_cruise_dynamic_viscosity = (v02148__01c4**1)*(v02150__01c6**-1)
v02149_cruise_dynamic_viscosity = (v02149_cruise_dynamic_viscosity*_01c7_coeff).reshape((1,))

# op _01cj_power_combination_eval
# LANG: cruise_range, cruise_speed --> cruise_time
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02065_cruise_time = (v02063_cruise_range**1)*(v02066_cruise_speed**-1)
v02065_cruise_time = (v02065_cruise_time*_01cj_coeff).reshape((1,))

# op _01d0_power_combination_eval
# LANG: _01co --> phi
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02089_phi = (v02088__01co**1)
v02089_phi = (v02089_phi*_01d0_coeff).reshape((1,))

# op _01d2_power_combination_eval
# LANG: _01cq --> gamma
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02090_gamma = (v02072__01cq**1)
v02090_gamma = (v02090_gamma*_01d2_coeff).reshape((1,))

# op _01d4_power_combination_eval
# LANG: _01cs --> psi
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02091_psi = (v02075__01cs**1)
v02091_psi = (v02091_psi*_01d4_coeff).reshape((1,))

# op _01d8_power_combination_eval
# LANG: _01cZ --> x
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02093_x = (v02070__01cZ**1)
v02093_x = (v02093_x*_01d8_coeff).reshape((1,))

# op _01da_power_combination_eval
# LANG: _01c_ --> y
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02094_y = (v02071__01c_**1)
v02094_y = (v02094_y*_01da_coeff).reshape((1,))

# op _01dc_power_combination_eval
# LANG: _01cm --> z
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.cruise_ac_states_operation
v02095_z = (v02069__01cm**1)
v02095_z = (v02095_z*_01dc_coeff).reshape((1,))

# op _01fC_power_combination_eval
# LANG: p --> p1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02085_p = v02085_p.reshape((1, 1))
v02218_p1 = (v02085_p**1)
v02218_p1 = (v02218_p1*_01fC_coeff).reshape((1, 1))
v02085_p = v02085_p.reshape((1,))

# op _01fF_power_combination_eval
# LANG: q --> q1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02086_q = v02086_q.reshape((1, 1))
v02219_q1 = (v02086_q**1)
v02219_q1 = (v02219_q1*_01fF_coeff).reshape((1, 1))
v02086_q = v02086_q.reshape((1,))

# op _01fI_power_combination_eval
# LANG: r --> r1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.BEM_external_inputs_model
v02087_r = v02087_r.reshape((1, 1))
v02220_r1 = (v02087_r**1)
v02220_r1 = (v02220_r1*_01fI_coeff).reshape((1, 1))
v02087_r = v02087_r.reshape((1,))

# op _01fq_transpose_eval
# LANG: _01fp --> M
# SHAPES: (1, 3) --> (3, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model
v02207_M = np.transpose(v02206__01fp)

# op _01nU_power_combination_eval
# LANG: _01nP, _01nT --> dC_T
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02407_dC_T = (v02403__01nP**1)*(v02409__01nT**-1)
v02407_dC_T = (v02407_dC_T*_01nU_coeff).reshape((1, 40, 30))

# op _01pU_power_combination_eval
# LANG: _01pT, _dr --> _local_torque_induced
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02456__local_torque_induced = (v02455__01pT**1)*(v02252__dr**1)
v02456__local_torque_induced = (v02456__local_torque_induced*_01pU_coeff).reshape((1, 40, 30))

# op _01pY_power_combination_eval
# LANG: _01pX --> total_thrust_2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02422_total_thrust_2 = (v02421__01pX**1)
v02422_total_thrust_2 = (v02422_total_thrust_2*_01pY_coeff).reshape((1,))

# op _01py_power_combination_eval
# LANG: _01px, _dr --> _local_thrust_induced
# SHAPES: (1, 40, 30), (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02389__local_thrust_induced = (v02388__01px**1)*(v02252__dr**1)
v02389__local_thrust_induced = (v02389__local_thrust_induced*_01py_coeff).reshape((1, 40, 30))

# op _01q1_power_combination_eval
# LANG: _01q0 --> total_torque_2
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02470_total_torque_2 = (v02469__01q0**1)
v02470_total_torque_2 = (v02470_total_torque_2*_01q1_coeff).reshape((1,))

# op _01qX_single_tensor_sum_with_axis_eval
# LANG: _local_energy_loss --> total_energy_loss
# SHAPES: (1, 40, 30) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02486_total_energy_loss = np.sum(v02485__local_energy_loss, axis = (1, 2)).reshape((1,))

# op _01qr_power_combination_eval
# LANG: _01qq --> total_thrust_star
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02442_total_thrust_star = (v02441__01qq**1)
v02442_total_thrust_star = (v02442_total_thrust_star*_01qr_coeff).reshape((1,))

# op _01s1_power_combination_eval
# LANG: C_P, _01s0 --> eta
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02521_eta = (v02514__01s0**1)*(v02513_C_P**-1)
v02521_eta = (v02521_eta*_01s1_coeff).reshape((1,))

# op _01s9_power_combination_eval
# LANG: C_P, _01s8 --> FOM
# SHAPES: (1,), (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02525_FOM = (v02522__01s8**1)*(v02513_C_P**-1)
v02525_FOM = (v02525_FOM*_01s9_coeff).reshape((1,))

# op _01sd_power_combination_eval
# LANG: total_torque --> Q
# SHAPES: (1,) --> (1,)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02401_Q = (v02400_total_torque**1)
v02401_Q = (v02401_Q*_01sd_coeff).reshape((1,))

# op _01sf_power_combination_eval
# LANG: _local_torque --> _dQ
# SHAPES: (1, 40, 30) --> (1, 40, 30)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_bem_model.induced_velocity_model
v02443__dQ = (v02398__local_torque**1)
v02443__dQ = (v02443__dQ*_01sf_coeff).reshape((1, 40, 30))

# op _01uF_power_combination_eval
# LANG: p --> p1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02085_p = v02085_p.reshape((1, 1))
v02591_p1 = (v02085_p**1)
v02591_p1 = (v02591_p1*_01uF_coeff).reshape((1, 1))
v02085_p = v02085_p.reshape((1,))

# op _01uI_power_combination_eval
# LANG: q --> q1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02086_q = v02086_q.reshape((1, 1))
v02592_q1 = (v02086_q**1)
v02592_q1 = (v02592_q1*_01uI_coeff).reshape((1, 1))
v02086_q = v02086_q.reshape((1,))

# op _01uL_power_combination_eval
# LANG: r --> r1
# SHAPES: (1, 1) --> (1, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model.BEM_external_inputs_model
v02087_r = v02087_r.reshape((1, 1))
v02593_r1 = (v02087_r**1)
v02593_r1 = (v02593_r1*_01uL_coeff).reshape((1, 1))
v02087_r = v02087_r.reshape((1,))

# op _01ut_transpose_eval
# LANG: _01us --> M
# SHAPES: (1, 3) --> (3, 1)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_1_disk_bem_model
v02580_M = np.transpose(v02579__01us)

# op _021K reshape_eval
# LANG: _021D --> rel_angle_plane
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03543_rel_angle_plane = v03542__021D.reshape((1, 2))

# op _021M reshape_eval
# LANG: _021J --> rel_angle_normal
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03547_rel_angle_normal = v03546__021J.reshape((1, 2))

# op _0221_power_combination_eval
# LANG: _021V, _0220 --> rel_obs_angle
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_Lowson_tonal_model.observer_location_model
v03552_rel_obs_angle = (v03550__021V**1)*(v03555__0220**-1)
v03552_rel_obs_angle = (v03552_rel_obs_angle*_0221_coeff).reshape((1, 1, 2))

# op _02bV reshape_eval
# LANG: _02bS --> rel_angle_normal
# SHAPES: (1, 1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03856_rel_angle_normal = v03855__02bS.reshape((1, 2))

# op _02ca_power_combination_eval
# LANG: _02c3, _02c9 --> rel_obs_angle
# SHAPES: (1, 1, 2), (1, 1, 2) --> (1, 1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.rotor_2_disk_GL_broadband_model.steady_observer_location_model
v03861_rel_obs_angle = (v03859__02c3**1)*(v03864__02c9**-1)
v03861_rel_obs_angle = (v03861_rel_obs_angle*_02ca_coeff).reshape((1, 1, 2))

# op _02eL_power_combination_eval
# LANG: _02eK --> total_spl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03938_total_spl = (v03937__02eK**1)
v03938_total_spl = (v03938_total_spl*_02eL_coeff).reshape((1, 2))

# op _02f8_power_combination_eval
# LANG: _02f7 --> A_weighted_total_spl
# SHAPES: (1, 2) --> (1, 2)
# full namespace: system_model.side_by_side_hc.cruise.cruise.total_noise_model
v03948_A_weighted_total_spl = (v03947__02f7**1)
v03948_A_weighted_total_spl = (v03948_A_weighted_total_spl*_02f8_coeff).reshape((1, 2))